<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>about_vpath.page</name>
    <path>/scratch/damon/git/queso/build_v0.55.0/doxygen/txt_common/</path>
    <filename>a00238</filename>
  </compound>
  <compound kind="file">
    <name>queso.page</name>
    <path>/scratch/damon/git/queso/doxygen/</path>
    <filename>a00239</filename>
  </compound>
  <compound kind="file">
    <name>acknowledgment.page</name>
    <path>/scratch/damon/git/queso/doxygen/txt_common/</path>
    <filename>a00240</filename>
  </compound>
  <compound kind="file">
    <name>lgpl.page</name>
    <path>/scratch/damon/git/queso/doxygen/txt_common/</path>
    <filename>a00241</filename>
  </compound>
  <compound kind="file">
    <name>noop.page</name>
    <path>/scratch/damon/git/queso/doxygen/txt_common/</path>
    <filename>a00242</filename>
  </compound>
  <compound kind="file">
    <name>ArrayOfSequences.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00243</filename>
    <class kind="class">QUESO::ArrayOfSequences</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BoxSubset.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00244</filename>
    <class kind="class">QUESO::BoxSubset</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenationSubset.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00245</filename>
    <class kind="class">QUESO::ConcatenationSubset</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantScalarFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00246</filename>
    <class kind="class">QUESO::ConstantScalarFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantVectorFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00247</filename>
    <class kind="class">QUESO::ConstantVectorFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteSubset.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00248</filename>
    <class kind="class">QUESO::DiscreteSubset</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericScalarFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00249</filename>
    <class kind="class">QUESO::GenericScalarFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00250</filename>
    <class kind="class">QUESO::GenericVectorFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InstantiateIntersection.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00251</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>VectorSet&lt; V, M &gt; *</type>
      <name>InstantiateIntersection</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa79046437ab085c5487ae16e9a0baeec</anchor>
      <arglist>(const VectorSet&lt; V, M &gt; &amp;domain1, const VectorSet&lt; V, M &gt; &amp;domain2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IntersectionSubset.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00252</filename>
    <class kind="class">QUESO::IntersectionSubset</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00253</filename>
    <class kind="class">QUESO::BaseScalarFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarFunctionSynchronizer.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00254</filename>
    <class kind="class">QUESO::ScalarFunctionSynchronizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarSequence.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00255</filename>
    <class kind="class">QUESO::ScalarSequence</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_SEQUENCE_INIT_MPI_MSG</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a64aad2676a8b0db9e73a3dfb2d3cf0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_SEQUENCE_SIZE_MPI_MSG</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab861df57b68ddbaa21de47a2955f1c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCALAR_SEQUENCE_DATA_MPI_MSG</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aeaa93ea37bc3de247daf0de5f9ae6bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeSubGaussian2dKde</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af865210b84a63c53796aff42989c4af7</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double scaleValue1, double scaleValue2, const std::vector&lt; T &gt; &amp;evaluationPositions1, const std::vector&lt; T &gt; &amp;evaluationPositions2, std::vector&lt; double &gt; &amp;densityValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeUnifiedGaussian2dKde</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af7a1e5f83b5acc46b51bc87eb3dc9b28</anchor>
      <arglist>(bool useOnlyInter0Comm, const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double unifiedScaleValue1, double unifiedScaleValue2, const std::vector&lt; T &gt; &amp;unifiedEvaluationPositions1, const std::vector&lt; T &gt; &amp;unifiedEvaluationPositions2, std::vector&lt; double &gt; &amp;unifiedDensityValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrBetweenScalarSequences</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>add6823a7271447445f532bf5ce73e9b8</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;subPSeq, const ScalarSequence&lt; T &gt; &amp;subQSeq, unsigned int subNumSamples, T &amp;covValue, T &amp;corrValue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SequenceOfVectors.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00256</filename>
    <class kind="class">QUESO::SequenceOfVectors</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SEQ_VEC_USES_SCALAR_SEQ_CODE</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a1ba15bb1169b4deacba0079de16a6875</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SequenceStatisticalOptions.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00257</filename>
  </compound>
  <compound kind="file">
    <name>VectorFunction.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00258</filename>
    <class kind="class">QUESO::BaseVectorFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorFunctionSynchronizer.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00259</filename>
    <class kind="class">QUESO::VectorFunctionSynchronizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSequence.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00260</filename>
    <class kind="class">QUESO::BaseVectorSequence</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrMatricesBetweenVectorSequences</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae194d12af9b08b130faf542b9b9ffe9b</anchor>
      <arglist>(const BaseVectorSequence&lt; P_V, P_M &gt; &amp;subPSeq, const BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;subQSeq, unsigned int subNumSamples, P_M &amp;pqCovMatrix, P_M &amp;pqCorrMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorSet.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00261</filename>
    <class kind="class">QUESO::VectorSpace</class>
    <class kind="class">QUESO::VectorSet</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSpace.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00262</filename>
    <class kind="class">QUESO::VectorSpace</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSubset.h</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>a00263</filename>
    <class kind="class">QUESO::VectorSubset</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayOfSequences.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00264</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BoxSubset.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00265</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenationSubset.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00266</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantScalarFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00267</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantVectorFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00268</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteSubset.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00269</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericScalarFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00270</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00271</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslVectorSpace.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00272</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InstantiateIntersection.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00273</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>IntersectionSubset.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00274</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00275</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarFunctionSynchronizer.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00276</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarSequence.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00277</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SequenceOfVectors.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00278</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SequenceStatisticalOptions.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00279</filename>
  </compound>
  <compound kind="file">
    <name>TeuchosVectorSpace.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00280</filename>
  </compound>
  <compound kind="file">
    <name>VectorFunction.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00281</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorFunctionSynchronizer.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00282</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSequence.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00283</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>template void</type>
      <name>QUESO::ComputeCovCorrMatricesBetweenVectorSequences&lt; QUESO::GslVector, QUESO::GslMatrix, QUESO::GslVector, QUESO::GslMatrix &gt;</name>
      <anchorfile>a00283.html</anchorfile>
      <anchor>aecab31ab77cd6b5c1c2ea18857131551</anchor>
      <arglist>(QUESO::BaseVectorSequence&lt; QUESO::GslVector, QUESO::GslMatrix &gt; const &amp;, QUESO::BaseVectorSequence&lt; QUESO::GslVector, QUESO::GslMatrix &gt; const &amp;, unsigned int, QUESO::GslMatrix &amp;, QUESO::GslMatrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorSet.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00284</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSpace.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00285</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorSubset.C</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>a00286</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ann2fig.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/ann2fig/</path>
    <filename>a00287</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>TRANS_X</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a54e4c74a843f80a5048ea3bd9e6ac1db</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANS_Y</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a2ab6fd277636a5b2521c3d7044681bcc</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>abd279ad6ac37fcf85881e690e8875616</anchor>
      <arglist>(const char *msg, ANNerr level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slice_val</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a24326826753a88b433f214353b94e7fb</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArgs</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a121108f1337a0a9a98c92a1c2faeb8c5</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a2e19c2ee025cf0d8494654f6baa42176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePoint</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ac74894175c568ccdd162865b40ae1ee4</anchor>
      <arglist>(ANNpoint p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBox</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a43265c93b3e1b477627e253b5196df41</anchor>
      <arglist>(const ANNorthRect &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLine</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a09046b3c19c279ebbe377f7067653659</anchor>
      <arglist>(ANNpoint p0, ANNpoint p1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCaption</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a6df8fccb629d8f4b854244844a18b8b3</anchor>
      <arglist>(const ANNorthRect &amp;bnd_box, char *caption)</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>overlap</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a8f0302d4cc5b5cb00cf1c15f446bda8d</anchor>
      <arglist>(const ANNorthRect &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recReadTree</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a0b4361cb538ad26d66f8eff36d795b31</anchor>
      <arglist>(ANNorthRect &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readTree</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a180fee6b105f7d14eb56b8f828d440e7</anchor>
      <arglist>(ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readANN</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ad43e1c2a0c3323926f7d11e6457f6c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>main</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a5ea466849f21e6c2be4ef9b2eb8868d3</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>STRING_LEN</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ac88fef96657c1a127763f35c90198503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_DIM</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>abdb68df7b02fded293d9a021b5d4b98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>DEF_SLICE_VAL</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a0cc097249747ffd08c103d29e5061124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>FIG_HEAD</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>aeff17604b8f415a6d5fb67898b4941be</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>DUMP_SUFFIX</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a2049c37e5ee7c3e5d84a7e292aa5eefe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>FIG_SUFFIX</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a7b804a18b1a8469058f2cc5c1a5519a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>file_name</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a2b4263d7f8209bcf4eff6e8abbf380a4</anchor>
      <arglist>[STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>infile_name</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a5fd0a844a564a97f522d647f766e6748</anchor>
      <arglist>[STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>outfile_name</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a383ba91f28a18c83dc92d5167bffcf6a</anchor>
      <arglist>[STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>caption</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ae9a3c13d88b1d28a1f7f10f8ffd26e9a</anchor>
      <arglist>[STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>ofstream</type>
      <name>ofile</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a197423a2685cca241cfa975b33a3d133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ifstream</type>
      <name>ifile</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a7b4e1a3197fb184b6ef4c286831be7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim_x</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a78e7e791466dc8e951311de2a1709955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim_y</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ad26cec1d8cdf8ba04707fd4cf822065a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>slice_val</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>aa5c7c246db633bdbc0b491abe5844a32</anchor>
      <arglist>[MAX_DIM]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_per_in</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>abf58023cd640f305a2bea6e4252eddac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>in_size</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a1712ade4e68442c8d4d61f13b08fccf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>in_low_x</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a712afd87dd16698b429411c83d2f9c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>in_low_y</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a33f1d57665492dd7dbedcb127f791531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_size</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a9214a173820785f5cba2b542be907733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_low_x</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>aa4f1b1d4dba2af20243b5c84e7eb19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_low_y</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>ad290fd148fd22448a15c841810ea61ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pt_size</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a61b6f0736b15001daac148134af647b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a70b5e28b5bc3d1b63a7435c5fe50b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_pts</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a49eeba22d5b2a203ba8607dae7d1c5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>pts</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a7e1bd7f0242ce9e79a7a615c7f1975d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a80d402d10e8341004c0caf10133b80ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset_x</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a9eacb3e1c989a5ef62110c576af47b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>offset_y</name>
      <anchorfile>a00287.html</anchorfile>
      <anchor>a86e0cfd0ccdc8fe9465f4c430bb14e48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Copyright.txt</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/</path>
    <filename>a00288</filename>
    <member kind="function">
      <type>ANN</type>
      <name>Copyright</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>af1d8603f5ea661cfb1da5f0ecce0647e</anchor>
      <arglist>(c) 1997-2010 University of Maryland and Sunil Arya and David Mount All Rights Reserved.This program is free software</arglist>
    </member>
    <member kind="function">
      <type>either version of the</type>
      <name>or</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>af2a6330b2536b559cd70d3c06470a360</anchor>
      <arglist>(at your option) any later version.This program is distributed in the hope that it will be useful</arglist>
    </member>
    <member kind="variable">
      <type>ANN</type>
      <name>__pad0__</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>affac4b8d6c026d8cb1b2ec07ff806bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>you can redistribute it and or modify it under the terms of the GNU Lesser Public License as published by the Free Software</type>
      <name>Foundation</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ab065c67d923d5fc5faee4a1c5e209ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>either version of the</type>
      <name>License</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a4bd867dc29560807dc926f25b4374eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>either version of the but WITHOUT ANY</type>
      <name>WARRANTY</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a01d4ec73d916d67d085f3e63d1fdbd4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at</type>
      <name>http</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>aa88f37f5cd3de0e0806b9c08a48cbc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software</type>
      <name>Inc</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ad3af55cea7785876c24b0ca1eead6d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software Temple Place</type>
      <name>Suite</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>ae77df1d30a5c769d6134d5543fbc1586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software Temple Place</type>
      <name>Boston</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a4d9e29107ada7e77c067162a6e64bdfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software Temple Place</type>
      <name>MA</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a065b5c19b956296d15708b3608d99f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software Temple Place USA Disclaimer The University of Maryland and the authors make no representations about the suitability or fitness of this software for any purpose It is provided as is without express or implied warranty Authors David Mount Dept of Computer Science University of</type>
      <name>Maryland</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a9fa68e71f593fd4c05bac6e9767a7dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE See the GNU Lesser Public License for more details A copy of the terms and conditions of the license can be found in License txt or online at write to the Free Software Temple Place USA Disclaimer The University of Maryland and the authors make no representations about the suitability or fitness of this software for any purpose It is provided as is without express or implied warranty Authors David Mount Dept of Computer Science University of College</type>
      <name>Park</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>a33e51f8d9c8783de42edfd57e5203718</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANN.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/include/ANN/</path>
    <filename>a00289</filename>
    <class kind="class">ANNpointSet</class>
    <class kind="class">ANNbruteForce</class>
    <class kind="class">ANNkd_tree</class>
    <class kind="class">ANNbd_tree</class>
    <member kind="define">
      <type>#define</type>
      <name>DLL_API</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a1a2aaad2f42ad198a2e6c97dc7681137</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANNversion</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a4ef5fb5f7e0bf3774fb2806411da5f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANNversionCmt</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a5f7631a9a849a061774026c06da511ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANNcopyright</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a11382dea040739c8fa14084650eb5de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANNlatestRev</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a7066d3c64155111f9d28b766442bf711</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_POW</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a9098bea865802af85103a5a1b4582d2c</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_ROOT</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a89ef502f6f11abc56cc0f3aa530e5b13</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_SUM</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a185e91d6668c4e876c016ef9dff4d107</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_DIFF</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a3a36654b93b11f820a32404cba93a98f</anchor>
      <arglist>(x, y)</arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ANNcoord</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ab066cd4e4fffad67a16b64d9a28a86e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ANNdist</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ab2a7296707a2205201daccfc1929c3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>ANNidx</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ac73fee32442f021ddcce434bd34f735f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNcoord *</type>
      <name>ANNpoint</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ad85f4b5cb9cf5877a2094bf8582133f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNpoint *</type>
      <name>ANNpointArray</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a402299ac00a81ad80f09a0eb84ba4059</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNdist *</type>
      <name>ANNdistArray</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ae3a038f02621d79c1efd5f8fb2ee968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNidx *</type>
      <name>ANNidxArray</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6cc54f9929727736423d719870cf1a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNkd_node *</type>
      <name>ANNkd_ptr</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>aacc30b4a2ed20722620c89db6c9f512c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ANNbool</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ae5927710e8251aa54f5b820eca160f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNfalse</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ae5927710e8251aa54f5b820eca160f2ca51606fdd5e5305332f7c95a60e00d474</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNtrue</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ae5927710e8251aa54f5b820eca160f2ca41d4356309b10c4c058247f6edc276c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ANNsplitRule</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_STD</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bba33c8110b750dedbe3e585bfe1371b35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_MIDPT</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bba269ec3c64e6a211889803403e3db8c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_FAIR</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bba120e2bf3c00d785a8deeaa911aa0762d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_SL_MIDPT</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bbac8e375f7efb04af5ff833dac2095bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_SL_FAIR</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bba55cf23b5fd13fc8ca54d1e3c4a04d0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_KD_SUGGEST</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a229eef95deefadc9d3fa738683c9c2bba9998b60fada03ec8867d9ee448ac4ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ANNshrinkRule</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6efa97da21b6bc41db3ce4cfbfbe9c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_BD_NONE</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6efa97da21b6bc41db3ce4cfbfbe9c8ca00e2c3dae33e7a522c5f5265d1ce67e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_BD_SIMPLE</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6efa97da21b6bc41db3ce4cfbfbe9c8ca9b85530cb7c0f2afd844dd298239beca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_BD_CENTROID</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6efa97da21b6bc41db3ce4cfbfbe9c8ca337cef9db4d4b9d7184c912bb5802a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_BD_SUGGEST</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a6efa97da21b6bc41db3ce4cfbfbe9c8caf9599a9dddddb636d4fb525dc14751bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DLL_API ANNdist</type>
      <name>annDist</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>abcf59e35431a1c2153e0a01c056bc647</anchor>
      <arglist>(int dim, ANNpoint p, ANNpoint q)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API ANNpoint</type>
      <name>annAllocPt</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a479fe2e8e10f09a57c69f70dcd239f9a</anchor>
      <arglist>(int dim, ANNcoord c=0)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API ANNpointArray</type>
      <name>annAllocPts</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a7d801c6084e348aefc8d675d5b8f2f9a</anchor>
      <arglist>(int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annDeallocPt</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a85f3fafa513eee017f525ad74a82cf10</anchor>
      <arglist>(ANNpoint &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annDeallocPts</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>af45ca32b2926c0e7c20c458e555c8c04</anchor>
      <arglist>(ANNpointArray &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API ANNpoint</type>
      <name>annCopyPt</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a4d699aa9bd46a0c0bf91c25252da80e0</anchor>
      <arglist>(int dim, ANNpoint source)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annMaxPtsVisit</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a821c00e57e7674b17d9a6145839f48d4</anchor>
      <arglist>(int maxPts)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annClose</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a7841414482997b8e49024b3cd5d3a017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ANN_DBL_MAX</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a477b3fd2435613171740930b8e1925cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNidx</type>
      <name>ANN_NULL_IDX</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>ae1346d82a39cf8b05b03fa85aaa51233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNdist</type>
      <name>ANN_DIST_INF</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a8a36a08c888181744ed16309e29f48ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ANNcoordPrec</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>af70a6982ba3eb965c85163b12bf15a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNbool</type>
      <name>ANN_ALLOW_SELF_MATCH</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>afe32cadf19fdc4ce47a9b05d309d767c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ANN_N_SPLIT_RULES</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a421ca66e0eaae53f541086d744353b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>ANN_N_SHRINK_RULES</name>
      <anchorfile>a00289.html</anchorfile>
      <anchor>a626cc402195987f50e1355300ceaa9f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANNperf.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/include/ANN/</path>
    <filename>a00290</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <class kind="class">ANNkdStats</class>
    <class kind="class">ANNsampStat</class>
    <member kind="define">
      <type>#define</type>
      <name>ANN_FLOP</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9e54d6f38fc80e6cdd64b97abf63c9a3</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_LEAF</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>acffe8d4f58bee289c680d8a184d88901</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_SPL</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0bee5d957077387db7da586aefc5bc90</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_SHR</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a68f69069cd40b0f2af289be09181d8bd</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_PTS</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6e30a1f9d8d2889f718811d80b2cba08</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_COORD</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a67b23644302dcb8220dd583858c08e70</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annResetStats</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a89b7e0cd8af74cc8d5f4bcfdeffc7253</anchor>
      <arglist>(int data_size)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annResetCounts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a83ceb9a16ee887b17f0d62e94df9b108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annUpdateStats</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac6bd8fa70c4890b00111489840ee81eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annPrintStats</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1a515cbe4f2098c4572c07eccad5947f</anchor>
      <arglist>(ANNbool validate)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Ndata_pts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af7ee7a56e708a27e5aaebc4152fe5594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_lfs</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a205cda409af0b01d497bbcdcb34e3230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_spl</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9c22946920d2b89178a653645f5ac82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_shr</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad9ecb2d5d12bce6c7ac9fa0027758235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_pts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a151ffa084bfdc0a8a04fc8d687b2056c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Ncoord_hts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a81e54e697b57aaf509eb51b09d25b9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nfloat_ops</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a70ccd7e7b9eb6782dde1c78cd9ced31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_lfs</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad57196294262f12bdae236b0a0dee141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_spl</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab5e73a7260753d5b0fb333a98c74f63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_shr</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a28f11fe1859ed2d0be6e9fb4ff829dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_nds</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae500935e7d2c71559eb87a3a5c096d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_pts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0b30ac9b05165412913497344a5a4e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_coord_hts</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae372fcf91d2df2afbb3920d350f8d23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_float_ops</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0a0607f278b0adde5d48aac74498a42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DLL_API ANNsampStat</type>
      <name>ann_average_err</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abb1cd1b34c631d95c135a355cf8b7575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DLL_API ANNsampStat</type>
      <name>ann_rank_err</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab27ba5311ae2c265a700cbfe736640c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANNx.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/include/ANN/</path>
    <filename>a00291</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <class kind="class">ANNorthRect</class>
    <class kind="class">ANNorthHalfSpace</class>
    <member kind="typedef">
      <type>ANNorthHalfSpace *</type>
      <name>ANNorthHSArray</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>aa5d68668d091aed5a8b43c0ff966af04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_LO</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baa8cdd7f0b9fb9ae3d138d13815c57d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_HI</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55baec74667bc912e4db7f65f6a85e6e9c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_IN</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a0d2aaac2cc3bb72be73ecfa346e35fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANN_OUT</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a74d342c79fc6125d2b51326d62ce597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ANNerr</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a13bdbb0af13b1a99636a383f628469d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNwarn</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a13bdbb0af13b1a99636a383f628469d4a894429235656d13f3ba0c0285c74aeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ANNabort</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a13bdbb0af13b1a99636a383f628469d4ac74a434b098f1c98aa9c2fbdd2e93524</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annError</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>a9c45d5ab29fad7c514d22008daf15534</anchor>
      <arglist>(const char *msg, ANNerr level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPrintPt</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>ad98b2b2c921df6fd52bb08c46b68cd98</anchor>
      <arglist>(ANNpoint pt, int dim, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annAssignRect</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>aa570fcff6b3af0b516162d102c04c68b</anchor>
      <arglist>(int dim, ANNorthRect &amp;dest, const ANNorthRect &amp;source)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNmaxPtsVisited</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>ad78dd7b2d385a9fbf5921ad3ab0483d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNptsVisited</name>
      <anchorfile>a00291.html</anchorfile>
      <anchor>aeb58eb8320bf779eb6646194bb1d0df3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>License.txt</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/</path>
    <filename>a00292</filename>
    <member kind="function">
      <type>The ANN</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a661fec76256ed4cd1c4342c47de46f40</anchor>
      <arglist>(all versions) is provided under the terms and conditions of the GNU Lesser General Public Library</arglist>
    </member>
    <member kind="function">
      <type>The ANN which is stated below It can also be found February</type>
      <name>Copyright</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aca6c4443b7d9deae57b6ec1b4cf36341</anchor>
      <arglist>(C) 1991</arglist>
    </member>
    <member kind="function">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public applies to some specially designated software packages typically libraries of the Free Software Foundation and other authors who decide to use it You can use it but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular based on the explanations below When we speak of free we are referring to freedom of not price Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free</type>
      <name>software</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3308f10abda1eb1d8fe882d307e92578</anchor>
      <arglist>(and charge for this service if you wish)</arglist>
    </member>
    <member kind="function">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step</type>
      <name>and</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0ae30037179743e2ec49d709cd3e7bbb</anchor>
      <arglist>(2) we offer you this license</arglist>
    </member>
    <member kind="function">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains</type>
      <name>meaningful</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ad7afdec9f307ffaef09f6ede5ffc8bfc</anchor>
      <arglist>(For example, a function in a library to compute square roots has a purpose that is entirely well-defined independent of the application.Therefore, Subsection 2d requires that any application-supplied function or table used by this function must be optional:if the application does not supply it, the square root function must still compute square roots.) These requirements apply to the modified work as a whole.If identifiable sections of that work are not derived from the Library</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6201ddb6be030b403fe49aab2fa34b60</anchor>
      <arglist>(or with a work based on the Library) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.3.You may opt to apply the terms of the ordinary GNU General Public License instead of this License to a given copy of the Library.To do this</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this</type>
      <name>License</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a1ac4962d6b7a8c1a7ee5cea63e494487</anchor>
      <arglist>(If a newer version than version 2 of the ordinary GNU General Public License has appeared, then you can specify that version instead if you wish.) Do not make any other change in these notices.Once this change is made in a given copy</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a669b446fd5c2d3023c09a8cea47f185d</anchor>
      <arglist>(or a portion or derivative of it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you accompany it with the complete corresponding machine-readable source code</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a7e705fb14a98ba803b098e212678bfc4</anchor>
      <arglist>(because it contains portions of the Library)</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical data structure layouts and and small macros and small</type>
      <name>functions</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6ebc3cd8aa99ab15e71701961702fcfc</anchor>
      <arglist>(ten lines or less in length)</arglist>
    </member>
    <member kind="function">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical data structure layouts and and small macros and small then the use of the object file is regardless of whether it is legally a derivative</type>
      <name>work</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a1b5470c60688358a70a69f8556894407</anchor>
      <arglist>(Executables containing this object code plus portions of the Library will still fall under Section 6.) Otherwise</arglist>
    </member>
    <member kind="function">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4cb386ea816016426209a5fbaf0128a1</anchor>
      <arglist>(It is understood that the user who changes the contents of definitions files in the Library will not necessarily be able to recompile the application to use the modified definitions.) b) Use a suitable shared library mechanism for linking with the Library.A suitable mechanism is one that(1) uses at run time a copy of the library already present on the user&apos;s computer system</arglist>
    </member>
    <member kind="function">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally</type>
      <name>distributed</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0b0015f76c0b6dfe70b6fd8b7a3b645f</anchor>
      <arglist>(in either source or binary form) with the major components(compiler</arglist>
    </member>
    <member kind="function">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6540bdb35eb8c50f1b2b2e6c6f255a79</anchor>
      <arglist>(or any work based on the Library)</arglist>
    </member>
    <member kind="function">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other</type>
      <name>reason</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a9642942062a0c88c684a2bb3289aa738</anchor>
      <arglist>(not limited to patent issues)</arglist>
    </member>
    <member kind="function">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other conditions are imposed on</type>
      <name>you</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aa3e27662c1d4cbafd95f10f5d4c51aed</anchor>
      <arglist>(whether by court order, agreement or otherwise) that contradict the conditions of this License</arglist>
    </member>
    <member kind="function">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT OR ANY OTHER PARTY WHO MAY MODIFY AND OR REDISTRIBUTE THE LIBRARY AS PERMITTED BE LIABLE TO YOU FOR INCLUDING ANY INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE</type>
      <name>LIBRARY</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ae23839c8bbae885f4746a0302f845386</anchor>
      <arglist>(INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE)</arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found</type>
      <name>at</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aeaac6802e676141cab768575bc40a590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software</type>
      <name>Foundation</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ab065c67d923d5fc5faee4a1c5e209ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple</type>
      <name>Place</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ae6b6ebb3626d5d173636f29f6ef6f503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple</type>
      <name>Suite</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4f88eca3393c5031057f175b95ca6858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple</type>
      <name>Boston</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6cb122465b2ae5f83de7969bc50b7290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license</type>
      <name>document</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ae02fb31471d5ba37d00ca378b339e5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By</type>
      <name>contrast</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a09dcfc38cc0f07632260cf354b4e5c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This</type>
      <name>license</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a820decac2dd17e001260c7a868b809a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public</type>
      <name>License</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4bd867dc29560807dc926f25b4374eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public applies to some specially designated software packages typically libraries of the Free Software Foundation and other authors who decide to use it You can use it</type>
      <name>too</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3d2245f96a434471e1848c2055169baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public applies to some specially designated software packages typically libraries of the Free Software Foundation and other authors who decide to use it You can use it but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular</type>
      <name>case</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ac25546546ad3dde8a40a9c987d5d1adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public applies to some specially designated software packages typically libraries of the Free Software Foundation and other authors who decide to use it You can use it but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular based on the explanations below When we speak of free</type>
      <name>software</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a8137cd65172c9811e6816fe29351d999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>The ANN which is stated below It can also be found February Free Software Inc Temple MA USA Everyone is permitted to copy and distribute verbatim copies of this license but changing it is not allowed[This is the first released version of the Lesser GPL.It also countsas the successor of the GNU Library Public License, version 2, hence theversion number 2.1.] Preamble The licenses for most software are designed to take away your freedom to share and change it By the GNU General Public Licenses are intended to guarantee your freedom to share and change free software to make sure the software is free for all its users This the Lesser General Public applies to some specially designated software packages typically libraries of the Free Software Foundation and other authors who decide to use it You can use it but we suggest you first think carefully about whether this license or the ordinary General Public License is the better strategy to use in any particular based on the explanations below When we speak of free we are referring to freedom of</type>
      <name>use</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a86986f37198fc3e201d462d14d004409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>that you receive source code or can get it if you want</type>
      <name>it</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a76868a71f10b10fd75a76f81ad936660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>that you can change the software and use pieces of it in new free</type>
      <name>programs</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4ef2920e76005114cb8e96e7f62863bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your</type>
      <name>rights</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a8735f0e515c965031b8651a7fc9eae79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For</type>
      <name>example</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>af6961d05aa95782e09878d46c51032a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the</type>
      <name>library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a35643e6cde36e0e5b6d5516664e8c947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a</type>
      <name>fee</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a61da2b4c678466f1445a18398b698544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that</type>
      <name>they</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ad13dd895315182151260cab9a07dae0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the</type>
      <name>recipients</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ac2be71e6b9f58e4791403f97d5152e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step</type>
      <name>method</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a59a31db1436d75d219a8e2d9b645b3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to</type>
      <name>copy</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a02c38e07ba0ee181a9bca6d7393323cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each</type>
      <name>distributor</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a1fd3b2b6850b4a24cbb2b8bbe1d5eec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library</type>
      <name>Also</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a1879f2c993b16b521d8bdeea88a02659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library if the library is modified by someone else and passed</type>
      <name>on</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3a09c912178e06d15053fd07b1c9c94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library if the library is modified by someone else and passed the recipients should know that what they have is not the original</type>
      <name>version</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a12136ab41a8aa67f0858137868a55106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library if the library is modified by someone else and passed the recipients should know that what they have is not the original so that the original author s reputation will not be affected by problems that might be introduced by others</type>
      <name>Finally</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a68245740e2aaf3b780b25aab4e9e0faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library if the library is modified by someone else and passed the recipients should know that what they have is not the original so that the original author s reputation will not be affected by problems that might be introduced by others software patents pose a constant threat to the existence of any free program We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder</type>
      <name>Therefore</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ad0e37b4975cc61835f0bef5777f184ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and that you are informed that you can do these things To protect your we need to make restrictions that forbid distributors to deny you these rights or to ask you to surrender these rights These restrictions translate to certain responsibilities for you if you distribute copies of the library or if you modify it For if you distribute copies of the whether gratis or for a you must give the recipients all the rights that we gave you You must make sure that receive or can get the source code If you link other code with the you must provide complete object files to the so that they can relink them with the library after making changes to the library and recompiling it And you must show them these terms so they know their rights We protect your rights with a two step which gives you legal permission to distribute and or modify the library To protect each we want to make it very clear that there is no warranty for the free library if the library is modified by someone else and passed the recipients should know that what they have is not the original so that the original author s reputation will not be affected by problems that might be introduced by others software patents pose a constant threat to the existence of any free program We wish to make sure that a company cannot effectively restrict the users of a free program by obtaining a restrictive license from a patent holder we insist that any patent license obtained for a version of the library must be consistent with the full freedom of use specified in this license Most GNU including some</type>
      <name>libraries</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a7b421a4ea8b5fcd57b66a885f56c1aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>keep intact all the notices that refer to this License and to the absence of any</type>
      <name>warranty</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a27a8812425734f0c8ac946c629baeade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the</type>
      <name>Library</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4a611c7289539bb6520646e2596a5edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section</type>
      <name>above</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aadd2157482c040487672f890e730bb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these</type>
      <name>conditions</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a959c33040522a6f22c2b74cb54f5c100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is</type>
      <name>invoked</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a558e60d2ccd05f0eb1bee55276c5af30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure</type>
      <name>that</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a5d452122c551e70f3c0e36813a608148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or</type>
      <name>table</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a48e7535f720104b60a6d6683444cd682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still</type>
      <name>operates</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a631eec9927b7e2b075459ac8fe596978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains and can be reasonably considered independent and separate works in</type>
      <name>themselves</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>afb08de83535451ed5236d11fe01f1744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains and can be reasonably considered independent and separate works in then this and its</type>
      <name>terms</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a55e9e8cd95e9ba7aefc56f876dd6bb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains and can be reasonably considered independent and separate works in then this and its do not apply to those sections when you distribute them as separate works But when you distribute the same sections as part of a whole which is a work based on the the distribution of the whole must be on the terms of this whose permissions for other licensees extend to the entire</type>
      <name>whole</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>af769a7190a391b8b7e0e51a42e3436fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains and can be reasonably considered independent and separate works in then this and its do not apply to those sections when you distribute them as separate works But when you distribute the same sections as part of a whole which is a work based on the the distribution of the whole must be on the terms of this whose permissions for other licensees extend to the entire and thus to each and every part regardless of who wrote it</type>
      <name>Thus</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a71be6a61d066a5fa7cd7495567e3d572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>and distribute a copy of this License along with the Library You may charge a fee for the physical act of transferring a and you may at your option offer warranty protection in exchange for a fee You may modify your copy or copies of the Library or any portion of thus forming a work based on the and copy and distribute such modifications or work under the terms of Section provided that you also meet all of these other than as an argument passed when the facility is then you must make a good faith effort to ensure in the event an application does not supply such function or the facility still and performs whatever part of its purpose remains and can be reasonably considered independent and separate works in then this and its do not apply to those sections when you distribute them as separate works But when you distribute the same sections as part of a whole which is a work based on the the distribution of the whole must be on the terms of this whose permissions for other licensees extend to the entire and thus to each and every part regardless of who wrote it it is not the intent of this section to claim rights or contest your rights to work written entirely by</type>
      <name>you</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4495c3111459369eb323a9ee7656a312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>rather</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a9e488ec5b91629b25061b1b46784800c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In</type>
      <name>addition</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a484a34a9cdb13614033aad6115c0b7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated</type>
      <name>place</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a5092c9ff9459e29face27814a2388918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source</type>
      <name>code</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>afa2765f9f647ea2e9c46055f93a44d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a</type>
      <name>work</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>afdb0a747f08804b5ae928e34146db865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in</type>
      <name>isolation</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a64e2bd2713b498c2d91c16de886df3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License</type>
      <name>However</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ab3e60cab1b889fe24cf1d0f12391a8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical</type>
      <name>parameters</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a4ff3b40dd630814cc9ceb2f3b05f6f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical data structure layouts and</type>
      <name>accessors</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aa8e16f2ab61f1001e1287aa3122fd801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical data structure layouts and and small macros and small then the use of the object file is</type>
      <name>unrestricted</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a5378057c0a94406fda677ef5dd8ee7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>the intent is to exercise the right to control the distribution of derivative or collective works based on the Library In mere aggregation of another work not based on the Library with the you must alter all the notices that refer to this so that they refer to the ordinary GNU General Public instead of to this it is irreversible for that so the ordinary GNU General Public License applies to all subsequent copies and derivative works made from that copy This option is useful when you wish to copy part of the code of the Library into a program that is not a library You may copy and distribute the which must be distributed under the terms of Sections and above on a medium customarily used for software interchange If distribution of object code is made by offering access to copy from a designated then offering equivalent access to copy the source code from the same place satisfies the requirement to distribute the source even though third parties are not compelled to copy the source along with the object code A program that contains no derivative of any portion of the but is designed to work with the Library by being compiled or linked with is called a work that uses the Library Such a in is not a derivative work of the and therefore falls outside the scope of this License linking a work that uses the Library with the Library creates an executable that is a derivative of the rather than a work that uses the library The executable is therefore covered by this License Section states terms for distribution of such executables When a work that uses the Library uses material from a header file that is part of the the object code for the work may be a derivative work of the Library even though the source code is not Whether this is true is especially significant if the work can be linked without the or if the work is itself a library The threshold for this to be true is not precisely defined by law If such an object file uses only numerical data structure layouts and and small macros and small then the use of the object file is regardless of whether it is legally a derivative if the work is a derivative of the you may distribute the object code for the work under the terms of Section Any executables containing that work also fall under</type>
      <name>Section</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>acd7dcfbebc7ef50b69085e9a9b4b0fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>and</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a8f661f2697a1ac05a8b611b6eee39cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the</type>
      <name>executable</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a85a23887875d1d68497d61bdef4fae1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs</type>
      <name>one</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6a2b11d0e95bd2a3022eb2d52a00baf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written</type>
      <name>offer</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a63f8690e0a305241116885614f13f540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three</type>
      <name>years</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>adfc8101ac588320105be309d16bdec1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in</type>
      <name>Subsection</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a2881b931c0e22b822ff45128204d9be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special</type>
      <name>exception</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ad8404db5e23841dcb367ab565ba9dfd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally</type>
      <name>kernel</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a8aebb015888967ed75005bf1a0a7fb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable</type>
      <name>runs</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a67521e40ab794c3178368ec253fa7ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise</type>
      <name>permitted</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6063e0ff241979deb5bdd1622fef9233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two</type>
      <name>things</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a9e13f359905b52d430bbf2c452912295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not</type>
      <name>modify</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ac5f9b0a3e7f864fefca2866e5018c913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not</type>
      <name>sublicense</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aaf20c63de6afa9d600c8fb6ecc69404f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link</type>
      <name>with</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a5ba130494931d00b0b91237b6d58a84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is</type>
      <name>void</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3b083519fd2b41d83363afcfd5ebad9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received</type>
      <name>copies</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a2e016e95b6ec2317cc7bad73ccdac272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do</type>
      <name>so</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a837ac4013b176503c7868b35d826d5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for</type>
      <name>copying</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aaef58a3908624fb8c4fca99f96f8e3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to</type>
      <name>distribute</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a7756c797845a8854bd687c15b4b3c5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License</type>
      <name>If</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a639f8d73f895ba1d65ad9df8173ea738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other conditions are imposed on they do not excuse you from the conditions of this License If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent</type>
      <name>obligations</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0f05e08f9e1e73ccd0b2a24d481c359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other conditions are imposed on they do not excuse you from the conditions of this License If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent then as a consequence you may not distribute the Library at all For if a patent license would not permit royalty free redistribution of the Library by all those who receive copies directly or indirectly through then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library If any portion of this section is held invalid or unenforceable under any particular</type>
      <name>circumstance</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>af577bddf3c9ce160f7937a639dd589a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other conditions are imposed on they do not excuse you from the conditions of this License If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent then as a consequence you may not distribute the Library at all For if a patent license would not permit royalty free redistribution of the Library by all those who receive copies directly or indirectly through then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library If any portion of this section is held invalid or unenforceable under any particular the balance of the section is intended to</type>
      <name>apply</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6082233bf9df361b3d1be248dceede0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>if the work is an executable linked with the with the complete machine readable work that uses the as object code and or source so that the user can modify the Library and then relink to produce a modified executable containing the modified rather than copying library functions into the if the user installs as long as the modified version is interface compatible with the version that the work was made with c Accompany the work with a written valid for at least three to give the same user the materials specified in for a charge no more than the cost of performing this distribution d If distribution of the work is made by offering access to copy from a designated offer equivalent access to copy the above specified materials from the same place e Verify that the user has already received a copy of these materials or that you have already sent this user a copy For an the required form of the work that uses the Library must include any data and utility programs needed for reproducing the executable from it as a special the materials to be distributed need not include anything that is normally and so on of the operating system on which the executable unless that component itself accompanies the executable It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system Such a contradiction means you cannot use both them and the Library together in an executable that you distribute You may place library facilities that are a work based on the Library side by side in a single library together with other library facilities not covered by this and distribute such a combined provided that the separate distribution of the work based on the Library and of the other library facilities is otherwise and provided that you do these two uncombined with any other library facilities This must be distributed under the terms of the Sections above b Give prominent notice with the combined library of the fact that part of it is a work based on the and explaining where to find the accompanying uncombined form of the same work You may not link or distribute the Library except as expressly provided under this License Any attempt otherwise to link or distribute the Library is and will automatically terminate your rights under this License parties who have received or from you under this License will not have their licenses terminated so long as such parties remain in full compliance You are not required to accept this since you have not signed it nothing else grants you permission to modify or distribute the Library or its derivative works These actions are prohibited by law if you do not accept this License by modifying or distributing the you indicate your acceptance of this License to do and all its terms and conditions for distributing or modifying the Library or works based on it Each time you redistribute the the recipient automatically receives a license from the original licensor to link with or modify the Library subject to these terms and conditions You may not impose any further restrictions on the recipients exercise of the rights granted herein You are not responsible for enforcing compliance by third parties with this License as a consequence of a court judgment or allegation of patent infringement or for any other conditions are imposed on they do not excuse you from the conditions of this License If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent then as a consequence you may not distribute the Library at all For if a patent license would not permit royalty free redistribution of the Library by all those who receive copies directly or indirectly through then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Library If any portion of this section is held invalid or unenforceable under any particular the balance of the section is intended to and the section as a whole is intended to apply in other circumstances It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such</type>
      <name>claims</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a6164e5bf4641705afd8d4b406e8b9f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>this section has the sole purpose of protecting the integrity of the free software distribution system which is implemented by public license practices Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that</type>
      <name>system</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a432eddf81146259af5784b3ceb29d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>it is up to the author donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License If the distribution and or use of the Library is restricted in certain countries either by patents or by copyrighted</type>
      <name>interfaces</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>aa77bda5a94aa5bcb8557edd336ad6283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>it is up to the author donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License If the distribution and or use of the Library is restricted in certain countries either by patents or by copyrighted the original copyright holder who places the Library under this License may add an geographical distribution limitation excluding those</type>
      <name>countries</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a151f945c9aa2771834dbffd2b08204db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>it is up to the author donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License If the distribution and or use of the Library is restricted in certain countries either by patents or by copyrighted the original copyright holder who places the Library under this License may add an geographical distribution limitation excluding those so that distribution is permitted only in or among countries not thus excluded In such this License incorporates the limitation as if written in the body of this License The Free Software Foundation may publish revised and or new versions of the Lesser General Public License from time to time Such new versions will be similar in spirit to the present but may differ in detail to address new problems or concerns Each version is given a distinguishing version number If the Library specifies a version number of this License which applies to it and any later you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation If the Library does not specify a license version</type>
      <name>number</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a839cee5f06e0d8ce20519eec62121b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>it is up to the author donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License If the distribution and or use of the Library is restricted in certain countries either by patents or by copyrighted the original copyright holder who places the Library under this License may add an geographical distribution limitation excluding those so that distribution is permitted only in or among countries not thus excluded In such this License incorporates the limitation as if written in the body of this License The Free Software Foundation may publish revised and or new versions of the Lesser General Public License from time to time Such new versions will be similar in spirit to the present but may differ in detail to address new problems or concerns Each version is given a distinguishing version number If the Library specifies a version number of this License which applies to it and any later you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation If the Library does not specify a license version you may choose any version ever published by the Free Software Foundation If you wish to incorporate parts of the Library into other free programs whose distribution conditions are incompatible with</type>
      <name>these</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a14c3a401d863646681a42df2779ef995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF</type>
      <name>CHARGE</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>acb35985508282727f936becdbc728f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE</type>
      <name>LIBRARY</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a7274c369eeb124028a4145b928c60a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY</type>
      <name>KIND</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>af32033102592d1492798a20bc9e56ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR</type>
      <name>IMPLIED</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0656092151afd9a88ee2de844a2b05bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR</type>
      <name>INCLUDING</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>ae153ca5b04a23c8c58af712bf8ab69bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED</type>
      <name>TO</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a103074f46d300e3c4887f987e29e76d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE</type>
      <name>DEFECTIVE</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a818a9b581bd0b1468c2b3bcda51dc3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY</type>
      <name>SERVICING</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a5110cdd7e7b6443c15aacfc6f607bb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT</type>
      <name>HOLDER</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a3a972c1122f2a1a7de5b1991d30e5587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT OR ANY OTHER PARTY WHO MAY MODIFY AND OR REDISTRIBUTE THE LIBRARY AS PERMITTED</type>
      <name>ABOVE</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a9e9a12403755f7233990d0df1579a60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT OR ANY OTHER PARTY WHO MAY MODIFY AND OR REDISTRIBUTE THE LIBRARY AS PERMITTED BE LIABLE TO YOU FOR</type>
      <name>DAMAGES</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a2e217f41fea3729c4c31071caff329b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT OR ANY OTHER PARTY WHO MAY MODIFY AND OR REDISTRIBUTE THE LIBRARY AS PERMITTED BE LIABLE TO YOU FOR INCLUDING ANY</type>
      <name>GENERAL</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a0bb3213ee1b083288e16fd41e9fc062d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>we sometimes make exceptions for this Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally NO WARRANTY BECAUSE THE LIBRARY IS LICENSED FREE OF THERE IS NO WARRANTY FOR THE TO THE EXTENT PERMITTED BY APPLICABLE LAW EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND OR OTHER PARTIES PROVIDE THE LIBRARY AS IS WITHOUT WARRANTY OF ANY EITHER EXPRESSED OR BUT NOT LIMITED THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU SHOULD THE LIBRARY PROVE YOU ASSUME THE COST OF ALL NECESSARY REPAIR OR CORRECTION IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT OR ANY OTHER PARTY WHO MAY MODIFY AND OR REDISTRIBUTE THE LIBRARY AS PERMITTED BE LIABLE TO YOU FOR INCLUDING ANY</type>
      <name>SPECIAL</name>
      <anchorfile>a00292.html</anchorfile>
      <anchor>a79ce859bf6f8862c0ff5cf565fa14bf7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReadMe.txt</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/</path>
    <filename>a00293</filename>
    <member kind="function">
      <type>ANN</type>
      <name>Copyright</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>af9c791ac5753e4d7d7a2f88174931c4e</anchor>
      <arglist>(c) 1997-2010 University of Maryland and Sunil Arya and David Mount.All Rights Reserved.See Copyright.txt and License.txt for complete information on terms and conditions of use and distribution of this software.----------------------------------------------------------------------------Authors-------David Mount Dept of Computer Science University of Maryland</arglist>
    </member>
    <member kind="function">
      <type>ANN College MD USA mount cs umd edu HONG KONG arya cs ust hk and Sunil Arya of the Hong Kong University of Science and Technology</type>
      <name>ANN</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>aac944ce38f41b55a0241b3fc6e6f4c60</anchor>
      <arglist>(pronounced like the name``Ann&apos;&apos;) stands for Approximate Nearest Neighbors.ANN is also a testbed containing programs and procedures for generating data sets</arglist>
    </member>
    <member kind="variable">
      <type>ANN</type>
      <name>__pad0__</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>affac4b8d6c026d8cb1b2ec07ff806bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANN College</type>
      <name>Park</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a033799b02cde1d4d85c99a0605cfea65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANN College MD USA mount cs umd edu</type>
      <name>http</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>aa88f37f5cd3de0e0806b9c08a48cbc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANN College MD USA mount cs umd edu HONG KONG arya cs ust hk and Sunil Arya of the Hong Kong University of Science and Technology collecting and analyzing statistics on the performance of nearest neighbor algorithms and data</type>
      <name>structures</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a86256db26f33a0e156b1f3018eeb0a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANN College MD USA mount cs umd edu HONG KONG arya cs ust hk and Sunil Arya of the Hong Kong University of Science and Technology collecting and analyzing statistics on the performance of nearest neighbor algorithms and data and visualizing the geometric structure of these data structures The ANN source code and documentation is available from the following web</type>
      <name>page</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a185d0342dab15e22e0c2750068c62067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANN College MD USA mount cs umd edu HONG KONG arya cs ust hk and Sunil Arya of the Hong Kong University of Science and Technology collecting and analyzing statistics on the performance of nearest neighbor algorithms and data and visualizing the geometric structure of these data structures The ANN source code and documentation is available from the following web see the ANN Programming</type>
      <name>Manual</name>
      <anchorfile>a00293.html</anchorfile>
      <anchor>a5c56307b8ba25158a51e185409b5a834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ann_sample.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/sample/</path>
    <filename>a00294</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <member kind="function">
      <type>void</type>
      <name>getArgs</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a121108f1337a0a9a98c92a1c2faeb8c5</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readPt</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>aae59a5d5b5611b349436830970ff23c5</anchor>
      <arglist>(istream &amp;in, ANNpoint p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPt</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a5bf3e6f77cc6d8a4d1895f30a4b67380</anchor>
      <arglist>(ostream &amp;out, ANNpoint p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>k</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>ab66ed8e0098c0a86b458672a55a9cca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a70b5e28b5bc3d1b63a7435c5fe50b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eps</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a974b448c3d0a13d483d36ef15de369b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxPts</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a8c59db27913a8a427a7049780bacde29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>istream *</type>
      <name>dataIn</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a69b05c430493eb60acb983be2d11cb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>istream *</type>
      <name>queryIn</name>
      <anchorfile>a00294.html</anchorfile>
      <anchor>a1e762cf8fc8c7e92bfb0be1a8306f45c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ANN.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00295</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="function">
      <type>ANNdist</type>
      <name>annDist</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a76a0095a765b28e3ad8499b01120b8d9</anchor>
      <arglist>(int dim, ANNpoint p, ANNpoint q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPrintPt</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>ad98b2b2c921df6fd52bb08c46b68cd98</anchor>
      <arglist>(ANNpoint pt, int dim, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>ANNpoint</type>
      <name>annAllocPt</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a1df39489f56d5a8d926c6fd4a572915a</anchor>
      <arglist>(int dim, ANNcoord c)</arglist>
    </member>
    <member kind="function">
      <type>ANNpointArray</type>
      <name>annAllocPts</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a703040bb093ce3037ab49fda6d0d93cb</anchor>
      <arglist>(int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annDeallocPt</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>aad1268f560cd6fd1e303c7d4b6542546</anchor>
      <arglist>(ANNpoint &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annDeallocPts</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a106ff4e0d6961e2f4052568644620d5c</anchor>
      <arglist>(ANNpointArray &amp;pa)</arglist>
    </member>
    <member kind="function">
      <type>ANNpoint</type>
      <name>annCopyPt</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a4d8063b183a74fc44b855fa06e49e55b</anchor>
      <arglist>(int dim, ANNpoint source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annAssignRect</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>aa570fcff6b3af0b516162d102c04c68b</anchor>
      <arglist>(int dim, ANNorthRect &amp;dest, const ANNorthRect &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annError</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a9c45d5ab29fad7c514d22008daf15534</anchor>
      <arglist>(const char *msg, ANNerr level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annMaxPtsVisit</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>abf6536a3f3d4ce36a8880bffd26c3952</anchor>
      <arglist>(int maxPts)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNmaxPtsVisited</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>ad78dd7b2d385a9fbf5921ad3ab0483d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNptsVisited</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>aeb58eb8320bf779eb6646194bb1d0df3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bd_fix_rad_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00296</filename>
    <includes id="a00300" name="bd_tree.h" local="yes" imported="no">bd_tree.h</includes>
    <includes id="a00304" name="kd_fix_rad_search.h" local="yes" imported="no">kd_fix_rad_search.h</includes>
  </compound>
  <compound kind="file">
    <name>bd_pr_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00297</filename>
    <includes id="a00300" name="bd_tree.h" local="yes" imported="no">bd_tree.h</includes>
    <includes id="a00306" name="kd_pr_search.h" local="yes" imported="no">kd_pr_search.h</includes>
  </compound>
  <compound kind="file">
    <name>bd_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00298</filename>
    <includes id="a00300" name="bd_tree.h" local="yes" imported="no">bd_tree.h</includes>
    <includes id="a00308" name="kd_search.h" local="yes" imported="no">kd_search.h</includes>
  </compound>
  <compound kind="file">
    <name>bd_tree.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00299</filename>
    <includes id="a00300" name="bd_tree.h" local="yes" imported="no">bd_tree.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00310" name="kd_split.h" local="yes" imported="no">kd_split.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="enumeration">
      <type></type>
      <name>ANNdecomp</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a4d755a48c58bb5e8df17eebd9ed380c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPLIT</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a4d755a48c58bb5e8df17eebd9ed380c1a7cf1f5924560c2c48f72f6e1a462e9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHRINK</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a4d755a48c58bb5e8df17eebd9ed380c1af14d86ba10483fa11e17e193561e9951</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ANNkd_ptr</type>
      <name>rbd_tree</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a4a549ea7feb1fea9a4e349fe9d1b3cf7</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, int bsp, ANNorthRect &amp;bnd_box, ANNkd_splitter splitter, ANNshrinkRule shrink)</arglist>
    </member>
    <member kind="function">
      <type>ANNdecomp</type>
      <name>trySimpleShrink</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a759c10464cd5cc31f03f2db13c4b6a09</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, const ANNorthRect &amp;bnd_box, ANNorthRect &amp;inner_box)</arglist>
    </member>
    <member kind="function">
      <type>ANNdecomp</type>
      <name>tryCentroidShrink</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a065d588d28739d479c61c8150bf8a441</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, const ANNorthRect &amp;bnd_box, ANNkd_splitter splitter, ANNorthRect &amp;inner_box)</arglist>
    </member>
    <member kind="function">
      <type>ANNdecomp</type>
      <name>selectDecomp</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>adeb2d76e77ce2ab143d9867d3cb5b505</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, const ANNorthRect &amp;bnd_box, ANNkd_splitter splitter, ANNshrinkRule shrink, ANNorthRect &amp;inner_box)</arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>BD_GAP_THRESH</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>ae7f4c19694bd08d4fcbc08bdbabe9cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>BD_CT_THRESH</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a8e29622e6257ea7203d496f02b35aac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>BD_MAX_SPLIT_FAC</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>aecc902378ae4699873bef200e2e6dadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>BD_FRACTION</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a2d502c8202ce28bdf0830ffc7b568ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bd_tree.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00300</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <class kind="class">ANNbd_shrink</class>
  </compound>
  <compound kind="file">
    <name>brute.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00301</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00317" name="pr_queue_k.h" local="yes" imported="no">pr_queue_k.h</includes>
  </compound>
  <compound kind="file">
    <name>kd_dump.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00302</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00300" name="bd_tree.h" local="yes" imported="no">bd_tree.h</includes>
    <member kind="enumeration">
      <type></type>
      <name>ANNtreeType</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8f896b788f94f593eae2f63c14aadbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KD_TREE</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8f896b788f94f593eae2f63c14aadbbbaa688e9cd1158916bc183aa517724568c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BD_TREE</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8f896b788f94f593eae2f63c14aadbbba3db7510f23fe6ab78f77cacff3f719d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ANNkd_ptr</type>
      <name>annReadDump</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a26c6fdde49db3b129c5bfd2a328424f7</anchor>
      <arglist>(istream &amp;in, ANNtreeType tree_type, ANNpointArray &amp;the_pts, ANNidxArray &amp;the_pidx, int &amp;the_dim, int &amp;the_n_pts, int &amp;the_bkt_size, ANNpoint &amp;the_bnd_box_lo, ANNpoint &amp;the_bnd_box_hi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ANNkd_ptr</type>
      <name>annReadTree</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a0c7518c682c98520602183746b169a1a</anchor>
      <arglist>(istream &amp;in, ANNtreeType tree_type, ANNidxArray the_pidx, int &amp;next_idx)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>STRING_LEN</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ac88fef96657c1a127763f35c90198503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>EPSILON</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a596344e5a2992d2beec43b76a6294de0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_fix_rad_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00303</filename>
    <includes id="a00304" name="kd_fix_rad_search.h" local="yes" imported="no">kd_fix_rad_search.h</includes>
    <member kind="variable">
      <type>int</type>
      <name>ANNkdFRDim</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a67ea86da497843533bcbacfa9edc8be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNkdFRQ</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a66d6083f736903bd4507482cf0b9a9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNdist</type>
      <name>ANNkdFRSqRad</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a70880ab83ed88ea7fcf0ce6d1f2f8afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANNkdFRMaxErr</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a178ec84eba4893e6a475635ff4ef12a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>ANNkdFRPts</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a043d90a884bc12a4887412574d09da47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNmin_k *</type>
      <name>ANNkdFRPointMK</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a8cc4b044e0ba55c1a6cc1fbdd40917dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNkdFRPtsVisited</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a424e805af47541b82fece9cd33e11d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNkdFRPtsInRange</name>
      <anchorfile>a00303.html</anchorfile>
      <anchor>a405abdc27737cd8f41e97358c1a614bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_fix_rad_search.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00304</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00317" name="pr_queue_k.h" local="yes" imported="no">pr_queue_k.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNkdFRQ</name>
      <anchorfile>a00304.html</anchorfile>
      <anchor>a66d6083f736903bd4507482cf0b9a9d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_pr_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00305</filename>
    <includes id="a00306" name="kd_pr_search.h" local="yes" imported="no">kd_pr_search.h</includes>
    <member kind="variable">
      <type>double</type>
      <name>ANNprEps</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ac95401999844d25e4249ad43c1885c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNprDim</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>ab896b83aee6622832939edaf20c6a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNprQ</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a525d7f7c1461455f090badced0a0d914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANNprMaxErr</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a5823c040d63b246744a958f626b573ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>ANNprPts</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a25142950182b470aa1123cbeaade95a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpr_queue *</type>
      <name>ANNprBoxPQ</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a33f66a6eca38ed6d2de1454a10b1ff3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNmin_k *</type>
      <name>ANNprPointMK</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a3fbfea4f7c32c0c4091ddf60e0396a3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_pr_search.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00306</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00316" name="pr_queue.h" local="yes" imported="no">pr_queue.h</includes>
    <includes id="a00317" name="pr_queue_k.h" local="yes" imported="no">pr_queue_k.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="variable">
      <type>double</type>
      <name>ANNprEps</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>ac95401999844d25e4249ad43c1885c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNprDim</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>ab896b83aee6622832939edaf20c6a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNprQ</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a525d7f7c1461455f090badced0a0d914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANNprMaxErr</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a5823c040d63b246744a958f626b573ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>ANNprPts</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a25142950182b470aa1123cbeaade95a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpr_queue *</type>
      <name>ANNprBoxPQ</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a33f66a6eca38ed6d2de1454a10b1ff3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNmin_k *</type>
      <name>ANNprPointMK</name>
      <anchorfile>a00306.html</anchorfile>
      <anchor>a3fbfea4f7c32c0c4091ddf60e0396a3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_search.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00307</filename>
    <includes id="a00308" name="kd_search.h" local="yes" imported="no">kd_search.h</includes>
    <member kind="variable">
      <type>int</type>
      <name>ANNkdDim</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a5b5f65154e60eff0303de0d00d2c2c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNkdQ</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a03bc7a006abb015e7718bb42bb17ecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANNkdMaxErr</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a53e7ac25fee2b89f57b094e4e79d21a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>ANNkdPts</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>ad35814127198466a7a926a185b865a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNmin_k *</type>
      <name>ANNkdPointMK</name>
      <anchorfile>a00307.html</anchorfile>
      <anchor>a7c1a86efec4fe6b27f8305d469421629</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_search.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00308</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00317" name="pr_queue_k.h" local="yes" imported="no">pr_queue_k.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="variable">
      <type>int</type>
      <name>ANNkdDim</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a5b5f65154e60eff0303de0d00d2c2c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>ANNkdQ</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a03bc7a006abb015e7718bb42bb17ecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ANNkdMaxErr</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a53e7ac25fee2b89f57b094e4e79d21a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>ANNkdPts</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>ad35814127198466a7a926a185b865a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNmin_k *</type>
      <name>ANNkdPointMK</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>a7c1a86efec4fe6b27f8305d469421629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ANNptsVisited</name>
      <anchorfile>a00308.html</anchorfile>
      <anchor>aeb58eb8320bf779eb6646194bb1d0df3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_split.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00309</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00310" name="kd_split.h" local="yes" imported="no">kd_split.h</includes>
    <member kind="function">
      <type>void</type>
      <name>kd_split</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a40f559e8137bf18a6f072d33d40fabb6</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>midpt_split</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a7709666b3446757acd5589b4aaa14784</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sl_midpt_split</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a6d5f8c8dc552d75ade33052dc7f20ab7</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fair_split</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>ab6167ffd4cda270c15d2eca1bbce4e9d</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sl_fair_split</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>ae4399675d75267ad56169a2072c7a2ba</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ERR</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>a76624d898059c8f97b6bef0e20dfcabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>FS_ASPECT_RATIO</name>
      <anchorfile>a00309.html</anchorfile>
      <anchor>ad389b4eb0129451673ea77462cf86402</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_split.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00310</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <member kind="function">
      <type>void</type>
      <name>kd_split</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>a40f559e8137bf18a6f072d33d40fabb6</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>midpt_split</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>a7709666b3446757acd5589b4aaa14784</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sl_midpt_split</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>a6d5f8c8dc552d75ade33052dc7f20ab7</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fair_split</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>ab6167ffd4cda270c15d2eca1bbce4e9d</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sl_fair_split</name>
      <anchorfile>a00310.html</anchorfile>
      <anchor>ae4399675d75267ad56169a2072c7a2ba</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_tree.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00311</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <includes id="a00310" name="kd_split.h" local="yes" imported="no">kd_split.h</includes>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MAX</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>afa99ec4acc4ecb2dc3c2d05da15d0e3f</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClose</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>aa8c7cdb69389c07d12cdce9b9f2cb132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNkd_ptr</type>
      <name>rkd_tree</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>a98c8c4e8b5a0301bdc0e71e9726b3fdf</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, int bsp, ANNorthRect &amp;bnd_box, ANNkd_splitter splitter)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>IDX_TRIVIAL</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>a61de2b08f94c67c1c047b70367edef43</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>ANNkd_leaf *</type>
      <name>KD_TRIVIAL</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>aefd44c312f0116089b2cfbf80ef5c5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ANN_AR_TOOBIG</name>
      <anchorfile>a00311.html</anchorfile>
      <anchor>af54d0f80dc799be58b844867993ba603</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_tree.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00312</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <class kind="class">ANNkd_node</class>
    <class kind="class">ANNkd_leaf</class>
    <class kind="class">ANNkd_split</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>ANNkd_splitter</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a0cbd4f81e97e97a48ccdf5227f04aa80</anchor>
      <arglist>)(ANNpointArray pa, ANNidxArray pidx, const ANNorthRect &amp;bnds, int n, int dim, int &amp;cut_dim, ANNcoord &amp;cut_val, int &amp;n_lo)</arglist>
    </member>
    <member kind="function">
      <type>ANNkd_ptr</type>
      <name>rkd_tree</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>a98c8c4e8b5a0301bdc0e71e9726b3fdf</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, int bsp, ANNorthRect &amp;bnd_box, ANNkd_splitter splitter)</arglist>
    </member>
    <member kind="variable">
      <type>ANNkd_leaf *</type>
      <name>KD_TRIVIAL</name>
      <anchorfile>a00312.html</anchorfile>
      <anchor>aefd44c312f0116089b2cfbf80ef5c5c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_util.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00313</filename>
    <includes id="a00314" name="kd_util.h" local="yes" imported="no">kd_util.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>PA</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a520b75c3a06cbd1be950d21b309fd546</anchor>
      <arglist>(i, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>ae65cc4bf3530fdebb828a4ace3d9e656</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PASWAP</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a5f31b691a1338abc32afff3608192750</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>annAspectRatio</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>abeb11b67343f60d405a32a1e1ab97301</anchor>
      <arglist>(int dim, const ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annEnclRect</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a6ed5406b7e20d7f1b0a15c0d21354f77</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annEnclCube</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a20585b2d03212cd28215262e75f0e836</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>ANNdist</type>
      <name>annBoxDistance</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a38361018b8237d050c438634bdd7378e</anchor>
      <arglist>(const ANNpoint q, const ANNpoint lo, const ANNpoint hi, int dim)</arglist>
    </member>
    <member kind="function">
      <type>ANNcoord</type>
      <name>annSpread</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a8de10b7ed69bdf2b2db334bf5be7e015</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annMinMax</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a79e0b5d9056cd12db02b51f8b69c464a</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord &amp;min, ANNcoord &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annMaxSpread</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a35245541753c73940727828771b08f0d</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annMedianSplit</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>ada35176903dab27160ac24f82b17c8dd</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord &amp;cv, int n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPlaneSplit</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a204cfb519eaf094b1310c8cd3470154f</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord cv, int &amp;br1, int &amp;br2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBoxSplit</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a143da22f78c0a096963e6ef3eff3254a</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;box, int &amp;n_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annSplitBalance</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a3b25673b846dead901bb0d9fc4942ac5</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBox2Bnds</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>a01292be79b7bd38cff456094b6ebea6b</anchor>
      <arglist>(const ANNorthRect &amp;inner_box, const ANNorthRect &amp;bnd_box, int dim, int &amp;n_bnds, ANNorthHSArray &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBnds2Box</name>
      <anchorfile>a00313.html</anchorfile>
      <anchor>ab9e52de33c0c32dd9b27eb58d78fb7e4</anchor>
      <arglist>(const ANNorthRect &amp;bnd_box, int dim, int n_bnds, ANNorthHSArray bnds, ANNorthRect &amp;inner_box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kd_util.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00314</filename>
    <includes id="a00312" name="kd_tree.h" local="yes" imported="no">kd_tree.h</includes>
    <member kind="function">
      <type>double</type>
      <name>annAspectRatio</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abeb11b67343f60d405a32a1e1ab97301</anchor>
      <arglist>(int dim, const ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annEnclRect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6ed5406b7e20d7f1b0a15c0d21354f77</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annEnclCube</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a20585b2d03212cd28215262e75f0e836</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>ANNdist</type>
      <name>annBoxDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a38361018b8237d050c438634bdd7378e</anchor>
      <arglist>(const ANNpoint q, const ANNpoint lo, const ANNpoint hi, int dim)</arglist>
    </member>
    <member kind="function">
      <type>ANNcoord</type>
      <name>annSpread</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8de10b7ed69bdf2b2db334bf5be7e015</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annMinMax</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a79e0b5d9056cd12db02b51f8b69c464a</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord &amp;min, ANNcoord &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annMaxSpread</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35245541753c73940727828771b08f0d</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annMedianSplit</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ada35176903dab27160ac24f82b17c8dd</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord &amp;cv, int n_lo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPlaneSplit</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a204cfb519eaf094b1310c8cd3470154f</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord cv, int &amp;br1, int &amp;br2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBoxSplit</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a143da22f78c0a096963e6ef3eff3254a</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int dim, ANNorthRect &amp;box, int &amp;n_in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annSplitBalance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3b25673b846dead901bb0d9fc4942ac5</anchor>
      <arglist>(ANNpointArray pa, ANNidxArray pidx, int n, int d, ANNcoord cv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBox2Bnds</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a01292be79b7bd38cff456094b6ebea6b</anchor>
      <arglist>(const ANNorthRect &amp;inner_box, const ANNorthRect &amp;bnd_box, int dim, int &amp;n_bnds, ANNorthHSArray &amp;bnds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annBnds2Box</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab9e52de33c0c32dd9b27eb58d78fb7e4</anchor>
      <arglist>(const ANNorthRect &amp;bnd_box, int dim, int n_bnds, ANNorthHSArray bnds, ANNorthRect &amp;inner_box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>perf.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00315</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annResetStats</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a89b7e0cd8af74cc8d5f4bcfdeffc7253</anchor>
      <arglist>(int data_size)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annResetCounts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a83ceb9a16ee887b17f0d62e94df9b108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annUpdateStats</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ac6bd8fa70c4890b00111489840ee81eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_one_stat</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a532ee9d11c933b8bbf08ef05f0a4d37b</anchor>
      <arglist>(const char *title, ANNsampStat s, double div)</arglist>
    </member>
    <member kind="function">
      <type>DLL_API void</type>
      <name>annPrintStats</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a1a515cbe4f2098c4572c07eccad5947f</anchor>
      <arglist>(ANNbool validate)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Ndata_pts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>af7ee7a56e708a27e5aaebc4152fe5594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_lfs</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a205cda409af0b01d497bbcdcb34e3230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_spl</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a9c22946920d2b89178a653645f5ac82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_shr</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ad9ecb2d5d12bce6c7ac9fa0027758235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nvisit_pts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a151ffa084bfdc0a8a04fc8d687b2056c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Ncoord_hts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a81e54e697b57aaf509eb51b09d25b9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ann_Nfloat_ops</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a70ccd7e7b9eb6782dde1c78cd9ced31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_lfs</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ad57196294262f12bdae236b0a0dee141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_spl</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ab5e73a7260753d5b0fb333a98c74f63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_shr</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a28f11fe1859ed2d0be6e9fb4ff829dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_nds</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ae500935e7d2c71559eb87a3a5c096d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_visit_pts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a0b30ac9b05165412913497344a5a4e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_coord_hts</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>ae372fcf91d2df2afbb3920d350f8d23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_float_ops</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a0a0607f278b0adde5d48aac74498a42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_average_err</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a078e1624aaca5d4b15516a5d91552ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsampStat</type>
      <name>ann_rank_err</name>
      <anchorfile>a00315.html</anchorfile>
      <anchor>a43f5ab17d63b298712cc2a9d929e320a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pr_queue.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00316</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <class kind="class">ANNpr_queue</class>
    <class kind="struct">ANNpr_queue::pq_node</class>
    <member kind="typedef">
      <type>void *</type>
      <name>PQinfo</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a67e38939e5afb9f1663d563a6047825d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ANNdist</type>
      <name>PQkey</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a4f3250dcb9a07c4b44eec3de958c8a68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pr_queue_k.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>a00317</filename>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <class kind="class">ANNmin_k</class>
    <class kind="struct">ANNmin_k::mk_node</class>
    <member kind="typedef">
      <type>ANNdist</type>
      <name>PQKkey</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>a49b3ed24c00d3149153fcbd5a007990f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>PQKinfo</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>ab20931c673111c83de5b3f096cea7b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PQKkey</type>
      <name>PQ_NULL_KEY</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>a6d22ac93de0b840f2b39f3d7bf62324c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PQKinfo</type>
      <name>PQ_NULL_INFO</name>
      <anchorfile>a00317.html</anchorfile>
      <anchor>a2de9476a9fbdd1e8fd20e217bbd819d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ann_test.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/test/</path>
    <filename>a00318</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <includes id="a00291" name="ANNx.h" local="no" imported="no">ANN/ANNx.h</includes>
    <includes id="a00290" name="ANNperf.h" local="no" imported="no">ANN/ANNperf.h</includes>
    <includes id="a00320" name="rand.h" local="yes" imported="no">rand.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>CLOCKS_PER_SEC</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a3d9fc3c745d0880902fe3ea3d5d5f71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>log2</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a18af743c2cec4baeee9ffb27999ddaad</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PtType</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1fb22a2b10bf8916fe9879b89986458c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1fb22a2b10bf8916fe9879b89986458ca9d7d6f31868d66330397c967c4afd2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUERY</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1fb22a2b10bf8916fe9879b89986458ca21043ddfa5289b4cf14cd4e3f5a89b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StatLev</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SILENT</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017ab9de27525b1cd54c353f4ed868a6cb26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXEC_TIME</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017ad6f0b5e7c9739c882f491090a88d0bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PREP_STATS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017a496ec6f08c15bbce97aa50456a4796dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUERY_STATS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017a9968e6d82b4d3b1f187413e40ac595a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUERY_RES</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017a94d0079312dcd2456941d501c6bd9ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHOW_PTS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017a06cd73043dd0f0971bec4b665b7834d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHOW_STRUCT</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017a502370617c80ac8b76a7e2be9b66e16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>N_STAT_LEVELS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e4d9dbcdd770b8b2b650cfe4a57017ae4a398b2c44f419f08eb84800a88deb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Distrib</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIFORM</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a8f44784d154005a214e0fe94119d28ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GAUSS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a204ce557938d6d9ab10a9f7c3d2690c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LAPLACE</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974afda6538840f134139d8114dcae6229fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CO_GAUSS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a6421210a0c526170b814d2ed77d8be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CO_LAPLACE</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a42e1c08a836d136ab5381a4942e9f7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLUS_GAUSS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a25ab3947f17b678162a23f66a4d519f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLUS_ORTH_FLATS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a9988a7c835aed39262993c57d2395ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLUS_ELLIPSOIDS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a3d57f94b2bdf0202d6b1064f16c7209d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PLANTED</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974ae68045ee9c0b864c72ffa8ac8ad3ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>N_DISTRIBS</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aeeb42f553f18c0b00122963b7431e974a3272ad2f6cb1270d28311c11a3474cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Error</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>abd279ad6ac37fcf85881e690e8875616</anchor>
      <arglist>(const char *msg, ANNerr level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPoint</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1f8c02284842e9c82dbd93eba95d2e0a</anchor>
      <arglist>(ANNpoint p, int dim)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookUp</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a54206b815e3759c8a303b04077280c26</anchor>
      <arglist>(const char *arg, const char(*table)[STRING_LEN], int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generatePts</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>acd08ecdcf04c7c3b65ce76cfdbe03549</anchor>
      <arglist>(ANNpointArray &amp;pa, int n, PtType type, ANNbool new_clust, ANNpointArray src=NULL, int n_src=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readPts</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a47f1170075f453a431fc2765993f832e</anchor>
      <arglist>(ANNpointArray &amp;pa, int &amp;n, char *file_nm, PtType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doValidation</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>adb9c960ae20d5e79eab25bdf605ab18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTrueNN</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a20550c64e3c39c1927522ffa097558db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>treeStats</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6bd31f7a0ea1ba5e7d67dae5ed7796b0</anchor>
      <arglist>(ostream &amp;out, ANNbool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGlobals</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af3e2e485f3ff008910d925cbb25f3a73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>skipComment</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>adb330c486748e00296c0ba4f41c081b6</anchor>
      <arglist>(istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>getDirective</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a709843653912e9004f5a2cfa8033527d</anchor>
      <arglist>(istream &amp;in, char *directive)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>STRING_LEN</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac88fef96657c1a127763f35c90198503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>ERR</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a76624d898059c8f97b6bef0e20dfcabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>RND_OFF</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a5f37564208faabe172abf7f9f8722eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>stat_table</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a8c99bc4a0216a5eff06454c749da9983</anchor>
      <arglist>[N_STAT_LEVELS][STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>distr_table</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>afadc5f2c31edb7d851e57d45a48795a8</anchor>
      <arglist>[N_DISTRIBS][STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>N_SPLIT_RULES</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aa34760861edb6de271f01a329d1d83ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>split_table</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a36c29cd3f3ed78fb1061c306a15d2dc9</anchor>
      <arglist>[N_SPLIT_RULES][STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>N_SHRINK_RULES</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a860750ca7f0d313e2dee1b2498ab1d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>shrink_table</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a2bfb5f852e1fc2ed75894d259a5c29ed</anchor>
      <arglist>[N_SHRINK_RULES][STRING_LEN]</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>extra_nn</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a55a6fa7f58e730dee08570f7892065a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_dim</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1d34d8e8da6a641cc986bd590c591a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_data_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aaef966eb34c25a88870797fe4ec9a87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_query_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a7add6b15f55e4418e07447bb91a78fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_n_color</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>acb4206863affc28f2802a132e13d06eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNbool</type>
      <name>def_new_clust</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>adba6a9b288ac0f1457cf9458e45a62b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_max_dim</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a61611a31042ed6dbc20d5cadc288b3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Distrib</type>
      <name>def_distr</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac13cdcca96d2914eda2e007d975f73fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>def_std_dev</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a0de2fde07df0de753d6ec1c8fd747aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>def_corr_coef</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6cb774110008dc0e5ce3866cfe671c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_bucket_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac292f04bb5ce8a6417c0fda0e0566e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>def_epsilon</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a4063cf27287dcdfce7f5ca9840192aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_near_neigh</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af8461e2ff9d3fe8c4d918a22e7a8ae0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_max_visit</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad79d75410be4e5c161c384b785f4cbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_rad_bound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a56115752f6ce9c0a013b2c6a94e6c9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_true_nn</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a576c7457ca23bd31cba9321815b1a870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>def_seed</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a8877dd1421682e2cf819d482f6c6d3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNbool</type>
      <name>def_validate</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>add58c339547c51682ae66f8f70b85cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const StatLev</type>
      <name>def_stats</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6ebcca889b07b09f37bd3bd709c8cfdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNsplitRule</type>
      <name>def_split</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a251dad83a7cab4e4203b23cf5c2ebbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ANNshrinkRule</type>
      <name>def_shrink</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9ede81283f5a2c98e5acf793ba3c4e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a70b5e28b5bc3d1b63a7435c5fe50b837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>data_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af69e180c878a9c8f4e45ec7dc25a062f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>query_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a81082cef4a21e8b6885d7cb3cf9245c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_color</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aee182a62f1a80cd5db6995468ad38774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNbool</type>
      <name>new_clust</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac7772da3eb92b98bea52107de142dc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_dim</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a26fe12f37cc7899be8f2e112dc652e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Distrib</type>
      <name>distr</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af7695b70eae731ad066afe02e2d35703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>corr_coef</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a163c84df317d567c6a1cc1f3912f4974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>std_dev</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a2976da2f4cfad54a418dff74a0094ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>std_dev_lo</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad43ddee0ede448da2f7972732881f03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>std_dev_hi</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae349ce0a00dbf1de739f0d77fc2c1fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bucket_size</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9d4c8c7eab2aa3ddf3abd395f284bc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a4904cc82627458fdf6672ccc0b2802c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>near_neigh</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac8f1f881dcbf1c3456264e103bd5af8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_pts_visit</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a13750836ac3552caa01b9a3135a61bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius_bound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a76ea31b741bc7af0de3087891f1da6f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>true_nn</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ab2e509ad91db36eee1d269a708965427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNbool</type>
      <name>validate</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a4e97cf00e25d81dc049d340f7e3c2ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StatLev</type>
      <name>stats</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>affb69bed32fbe9ce4e1d7d0eb2cd1910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNsplitRule</type>
      <name>split</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a5f710f2ea1568580da33d7d678165850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNshrinkRule</type>
      <name>shrink</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a487329335f7a6eb9975346d4d996de94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>data_pts</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a09d359d9b8ee22c4221f527a7df7ee1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpointArray</type>
      <name>query_pts</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a7e4e1c671ffbd31a03951b4d6a56d47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNbd_tree *</type>
      <name>the_tree</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af32c43f329a8c142d72a2a65a6df146a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNidxArray</type>
      <name>apx_nn_idx</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a80e238b961b4b68de7694a9b3d4b93f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNdistArray</type>
      <name>apx_dists</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a30bb2915dd3a78b478f9e3a19729958f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>apx_pts_in_range</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a89f4a5cb6809759b6b4530be3a223915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNidxArray</type>
      <name>true_nn_idx</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a16b65911d31d6b0fae1a2388ca7b8273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNdistArray</type>
      <name>true_dists</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af96c4cdad75a55b6220777e8283e3a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>min_pts_in_range</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a86e477b0844f1e48b74d13668496c36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>max_pts_in_range</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a46631926e4981bea2bb613ed07377f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNbool</type>
      <name>valid_dirty</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a09a4c9a48e152164f8fb95dd6621a843</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rand.cpp</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/test/</path>
    <filename>a00319</filename>
    <includes id="a00320" name="rand.h" local="yes" imported="no">rand.h</includes>
    <member kind="function">
      <type>double</type>
      <name>annRan0</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a3d3eb738e586587f024e78a878ffed78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>annRanInt</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ae360a0f4cbba411060b85852ae4a106a</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>annRanUnif</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>aaef2b23f6cc6dcbab2a26733004eafd4</anchor>
      <arglist>(double lo, double hi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>annRanGauss</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>aefaef7883f348e729100e11247e722e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>annRanLaplace</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a4b02ed3c6f37a2e9ad8afd6f84a7b761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annUniformPts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a540e51fd43b975b1bf5d2189274004cd</anchor>
      <arglist>(ANNpointArray pa, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annGaussPts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ab4674f5c19c4f1f21c8c6c769c981fbe</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annLaplacePts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ac2220ea8ee08992452c086877db419a9</anchor>
      <arglist>(ANNpointArray pa, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annCoGaussPts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a6e7a4bc2721b0072c402d1f972b73803</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double correlation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annCoLaplacePts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a0cd055d33236798806cf92c242af0bbc</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double correlation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusGaussPts</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a68c754b3ef7ffcc9c9c91d27d1061d08</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>genOrthFlat</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ae9a14094a87f836dc4bdaec1a65c1ac1</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double *control, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusOrthFlats</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>addd81805ca1c7146b17cc4f89742fbd4</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev, int max_dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>genGauss</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a082b3d88cd4819d8b07f0c30433c7cae</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double *center, double *std_dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusEllipsoids</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a3bdf55c4d3f13f8ec0753c4c1d60807a</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev_small, double std_dev_lo, double std_dev_hi, int max_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPlanted</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ab9dd0157378d38e396988b4faf1f5e42</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, ANNpointArray src, int n_src, double std_dev)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>annIdum</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>ae8843fe482ba826ec5b56d5b6b4d72bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>CO_FLAG</name>
      <anchorfile>a00319.html</anchorfile>
      <anchor>a71dc66588e89d7327e945abf1f5456de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rand.h</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/test/</path>
    <filename>a00320</filename>
    <includes id="a00289" name="ANN.h" local="no" imported="no">ANN/ANN.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ANN_RAND</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a3058f0c00a364b4f3a5827bc906f737f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_SRAND</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a5a7f7b3fc002b03737d7ba745345e209</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANN_RAND_MAX</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a1fe4287be35cd19d0138de40677a2be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annUniformPts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a540e51fd43b975b1bf5d2189274004cd</anchor>
      <arglist>(ANNpointArray pa, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annGaussPts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>ab4674f5c19c4f1f21c8c6c769c981fbe</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annCoGaussPts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a6e7a4bc2721b0072c402d1f972b73803</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double correlation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annLaplacePts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>ac2220ea8ee08992452c086877db419a9</anchor>
      <arglist>(ANNpointArray pa, int n, int dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annCoLaplacePts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a0cd055d33236798806cf92c242af0bbc</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, double correlation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusGaussPts</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a68c754b3ef7ffcc9c9c91d27d1061d08</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusOrthFlats</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>addd81805ca1c7146b17cc4f89742fbd4</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev, int max_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annClusEllipsoids</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>a3bdf55c4d3f13f8ec0753c4c1d60807a</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, int n_clus, ANNbool new_clust, double std_dev_small, double std_dev_lo, double std_dev_hi, int max_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annPlanted</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>ab9dd0157378d38e396988b4faf1f5e42</anchor>
      <arglist>(ANNpointArray pa, int n, int dim, ANNpointArray src, int n_src, double std_dev)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>annIdum</name>
      <anchorfile>a00320.html</anchorfile>
      <anchor>ae8843fe482ba826ec5b56d5b6b4d72bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>all.h</name>
    <path>/scratch/damon/git/queso/src/contrib/inc/</path>
    <filename>a00321</filename>
  </compound>
  <compound kind="file">
    <name>asserts.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00322</filename>
    <includes id="a00332" name="exceptions.h" local="yes" imported="no">exceptions.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>queso_here</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>af14af2cef1e39fcbd1c3bcfdbc6ffe28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_error_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ae4891e6d45de7b78d62625c0f1aff96a</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_not_implemented_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aa5754c203b1bce6c8a99611a256755fc</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_file_error_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aff917c41cca367b381be6192028a5337</anchor>
      <arglist>(filename, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_error</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a0af4fa8de607265fa3e7413ba0475a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_not_implemented</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a7cd5266c96c8870c5d1c1e13073afb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_file_error</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aef4406c0569a56b24d3b09fc13034fd8</anchor>
      <arglist>(filename)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a12c8e412795bd37f07e28e922e394abb</anchor>
      <arglist>(asserted, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_equal_to_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ac7c55bc91ea8b2497b7a4db666f68409</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_not_equal_to_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ae5d1ae7a9426ab91c69d53b051eb0cb3</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_less_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a9fbd2830796070462f06425899f3d6d5</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_greater_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a7c34683a7aa3ea44e6d3d22a38d8a841</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_less_equal_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ab700dbf56f43fabc2bcfdc72ca2e50ae</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_greater_equal_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ac1ccb5a9313d762500e14d0ec5f57dfe</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a48c487b2ae940e951859b6c87f863eb4</anchor>
      <arglist>(asserted, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_equal_to_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a20bce73ab72d468f59fd69c11cdbb621</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_not_equal_to_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a1abc3ae8e70b4647d9c09eb6b30004fa</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_less_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a798937114b8b371d2845de0f159a7903</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_greater_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aae30b6697ba9523bc65ed8efcf132f35</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_less_equal_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a72b5f1a26a18c2028d374b3f17dfacc6</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_greater_equal_msg</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>aed57082f18f361b9451c642f91ec9ec7</anchor>
      <arglist>(expr1, expr2, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ab1ee4ccaee28b1c68dfb364efde26593</anchor>
      <arglist>(asserted)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_equal_to</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a13b6ff3f83010c4a01d4f61028c59cc3</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_not_equal_to</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a8a3c3f61812284465f525b47bc1610ff</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_less</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a943cd349edccbbcdb652ac081bb42df1</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_greater</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>af2cd089a5dbc8772d81c7905e9d13e1c</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_less_equal</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ac27f3d4f23c4bac37adfc30e8f8c79b6</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_require_greater_equal</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>ab1a4b89ec6fec86a124b5c0b070790e7</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a95f9887ed9b637efb5b71f1df7d6bc4d</anchor>
      <arglist>(asserted)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_equal_to</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a67de25b43faabd8d10a0827676e54a49</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_not_equal_to</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a256964c76b421e5187a0aa36e5907cb7</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_less</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a02c59e9150c230713f39314a442e2768</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_greater</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a85bd9423ebc33944bdef21ebaef62ea2</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_less_equal</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a73fd5305f6bc49b50fa21d9d9742a157</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_assert_greater_equal</name>
      <anchorfile>a00322.html</anchorfile>
      <anchor>a71e713c1171a8e48e343937f4e877e93</anchor>
      <arglist>(expr1, expr2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseInputOptionsParser.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00323</filename>
    <class kind="class">QUESO::BaseInputOptionsParser</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00324</filename>
    <class kind="class">QUESO::BasicPdfsBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsBoost.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00325</filename>
    <class kind="class">QUESO::BasicPdfsBoost</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsGsl.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00326</filename>
    <class kind="class">QUESO::BasicPdfsGsl</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BoostInputOptionsParser.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00327</filename>
    <class kind="class">QUESO::BoostInputOptionsParser</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Defines.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00328</filename>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QUESO_EXPECTS_LN_LIKELIHOOD_INSTEAD_OF_MINUS_2_LN</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a3c52cedc66ed5e8f7b06a1d92187f0cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HAVE_INLINE</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aa04d236e05d6a2163ce4a19d0863b8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GSL_RANGE_CHECK_OFF</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a09f6b3f804ed006f45f3c04a0342331f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ML_CODE_HAS_NEW_RESTART_CAPABILITY</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aad80372764e15a7ed434e7ad41ac27b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUESO_CLASSES_INSTANTIATE_NEW_MAPS</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a2b6fe4b3ebfba39f78eda4818276f486</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>QUESO_USES_NEW_RNG_CLASS</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aa45d29907806c8fcdf038595b87e2e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_FILE_EXTENSION_FOR_MATLAB_FORMAT</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac440026eff7deb1c1eed1eea0e8e36ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_FILE_EXTENSION_FOR_TXT_FORMAT</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a5aa0837ded178f1d919f87b19d1abee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_FILE_EXTENSION_FOR_HDF_FORMAT</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a4ebcc075277d031eb97c90b9a45f4493</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_do_once</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a02a0aec453415eb2a79461ccd8401d8f</anchor>
      <arglist>(do_this)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_warning</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ac2d0fbcfde7d44076a590a20e87f8938</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>queso_deprecated</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a81492c18dfc919346380a8583f8ebfae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_RC_MACRO</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aa3b4d42ed2bf66c8c4433d314439f0be</anchor>
      <arglist>(macroIRc, givenRank, where, what, retValue)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_TEST_MACRO</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>ab445104e0e2540384e8aaa8dbf3ae9b6</anchor>
      <arglist>(test, givenRank, where, what, retValue)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_FATAL_RC_MACRO</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>aa9107e1a9a5197371a412db3fa349988</anchor>
      <arglist>(macroIRc, givenRank, where, what)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_FATAL_TEST_MACRO</name>
      <anchorfile>a00328.html</anchorfile>
      <anchor>a56d63d18d0a6d45757de47fcc06f574d</anchor>
      <arglist>(test, givenRank, where, what)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyWorldfullRank</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5af97e1f9320b7787efc744ef76be297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_UNAVAILABLE_RANK</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7d4679800a430ae8e473c1c7bc0bfb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_OK_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8e909502900aecf24cedba022ea84471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INCOMPLETE_IMPLEMENTATION_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5332d3ac9b246e40779ba01f19a3f0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_PARAMETER_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a063c49e4743815cf95cde8425906b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_OBSERVABLE_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7184f2baf44df52d2c24409d9385c7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_QOI_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a62fa6d4e5314c2054707ab73c97204ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_INTERNAL_RESULT_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>afd6363699eae2710081ad1642a03131e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_INTERNAL_STATE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae093c8262be9961cc7297a84347c0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_FAILED_TO_OPEN_FILE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aaab9e69ed66f6902eb9b42879a52fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_MATRIX_IS_NOT_POS_DEFINITE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a677863cd32092584175760250f39e8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_FAILED_READING_FILE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab2cce05a6208cb239ef640a4ba6e5327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_SPACE_COMPONENT_ID_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0b5084868d81746fc7f2c0665b219812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_MATRIX_SVD_FAILED_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7502f36b36f6ba457d2cf5004f7a7c69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistArray.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00329</filename>
    <class kind="class">QUESO::DistArray</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Environment.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00330</filename>
    <class kind="struct">QUESO::FilePtrSetStruct</class>
    <class kind="class">QUESO::BaseEnvironment</class>
    <class kind="class">QUESO::EmptyEnvironment</class>
    <class kind="class">QUESO::FullEnvironment</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>queso_terminate_handler</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a97e263e01a0ff9fad14de6a8840b007e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>QUESO_version_print</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae2e4805bfcc226b2ceb17c8a8dbb1297</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QUESO_get_numeric_version</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a61ed284ac8a5002856025bf21955b215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae007c2d003b9f75b31b073ececd3120a</anchor>
      <arglist>(std::ostream &amp;os, const BaseEnvironment &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnvironmentOptions.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00331</filename>
    <class kind="class">QUESO::EnvOptionsValues</class>
    <class kind="class">QUESO::EnvironmentOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_FILENAME_FOR_NO_OUTPUT_FILE</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a0b152a87af300fefc74156efb1526e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_FILENAME_FOR_NO_INPUT_FILE</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a892d0b4584a84b0dd25ce41a69493bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_HELP</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ac082900da4fd6c26726eeb09f72c3582</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_NUM_SUB_ENVIRONMENTS_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>aa218bd19c1b15600e9fc4aea92000417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SUB_SCREEN_WRITE_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ab7b98ca2738dcbc152d358eafb2685be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SUB_DISPLAY_FILE_NAME_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>adb73e22ce84a516af0ad8860409588c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SUB_DISPLAY_ALLOW_ALL_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>ac435da3ea28649fbfb1f79e08c5e9a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SUB_DISPLAY_ALLOW_INTER0_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a848e049bac92957c3bf2b4897d70557f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SUB_DISPLAY_ALLOWED_SET_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a7a7226f5e2f79219b66071c97099fcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_DISPLAY_VERBOSITY_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>aa0aed60fbfac9147a8f4d02f5e57fc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SYNC_VERBOSITY_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a4388bca2484d2787f65db58c924e4663</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_CHECKING_LEVEL_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>af34c1c6676f7044beafb32dab1a1301a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_RNG_TYPE_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a706f5da95b8e726b803ef2b7e3dcb7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_SEED_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a46ccfdca1dd926bb77e0a35061f7b8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_IDENTIFYING_STRING_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>acd20b252766664d5f0d557b1b99ae9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_PLATFORM_NAME_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>af3bd1899c8b9dd8693709bfde2380b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_NUM_DEBUG_PARAMS_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>afc461b58cef6f59de0d02dd6ee425f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ENV_DEBUG_PARAM_ODV</name>
      <anchorfile>a00331.html</anchorfile>
      <anchor>a568dda30a031949b122d7b55118012d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a19108ba91686fa96e00f6f47bed7c67f</anchor>
      <arglist>(std::ostream &amp;os, const EnvironmentOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00332</filename>
    <class kind="class">QUESO::LogicError</class>
    <class kind="class">QUESO::NotImplemented</class>
    <class kind="class">QUESO::FileError</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>QUESO_THROW</name>
      <anchorfile>a00332.html</anchorfile>
      <anchor>afab7833816d1d2328ca5f890ccfc4cae</anchor>
      <arglist>(e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00333</filename>
    <class kind="class">QUESO::FunctionBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>FunctionOperatorBuilder.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00334</filename>
    <class kind="class">QUESO::FunctionOperatorBuilder</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslBlockMatrix.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00335</filename>
    <class kind="class">QUESO::GslBlockMatrix</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aee9cd88f39e5f81acf1cbc121a2d85f9</anchor>
      <arglist>(std::ostream &amp;os, const GslBlockMatrix &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GslMatrix.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00336</filename>
    <class kind="class">QUESO::GslMatrix</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1fa0d79f37a4fccc4c307456d29c4bfa</anchor>
      <arglist>(double a, const GslMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a87c02837d212969d66ae52ac73d0e301</anchor>
      <arglist>(const GslMatrix &amp;mat, const GslVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a511d0179f61e084b7574c97affcbd723</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator+</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a299d5db0d04a1d1a943b292585d01ad9</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator-</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a07502ec763e41daf33325dfbda9b0102</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>matrixProduct</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aea04e232d5d3dd76349a85bb8acf9e17</anchor>
      <arglist>(const GslVector &amp;v1, const GslVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>leftDiagScaling</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0d18267f571a86516c0d9960b1a0f1c9</anchor>
      <arglist>(const GslVector &amp;vec, const GslMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>rightDiagScaling</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2c87d8c1ab55355226086522f9fb7f83</anchor>
      <arglist>(const GslMatrix &amp;mat, const GslVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>acf137d0e0d62509c7abc70f1f0f799ef</anchor>
      <arglist>(std::ostream &amp;os, const GslMatrix &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GslOptimizer.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00337</filename>
    <class kind="class">QUESO::BaseScalarFunction</class>
    <class kind="class">QUESO::GslOptimizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslVector.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00338</filename>
    <class kind="class">QUESO::GslVector</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>GslVector</type>
      <name>operator/</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a583c7692c136ba44beb81f031d8d55fc</anchor>
      <arglist>(double a, const GslVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator/</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac34d69017fbfb253ed76d20ef53c6f81</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac6209b9b8dde0c23a8d7a239eabcc6b5</anchor>
      <arglist>(double a, const GslVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>adc8f40b553602f8f0e9668d30af42ebe</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scalarProduct</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a159769395a413f58b974587d5f43bbc7</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator+</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4b74ebe52de00d2ea6affde322a158bc</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator-</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae873227c9725013266467750e1fbad72</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a18841f416975b3d80dfefa99a9ad0c15</anchor>
      <arglist>(const GslVector &amp;lhs, const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a25bb97988816bba6f17d35884da60512</anchor>
      <arglist>(std::ostream &amp;os, const GslVector &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalGaussian.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00339</filename>
    <class kind="class">QUESO::InfiniteDimensionalGaussian</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalLikelihoodBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00340</filename>
    <class kind="class">QUESO::InfiniteDimensionalLikelihoodBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMCMCSampler.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00341</filename>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMCMCSamplerOptions.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00342</filename>
    <class kind="class">QUESO::InfiniteDimensionalMCMCSamplerOptions</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMeasureBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00343</filename>
    <class kind="class">QUESO::InfiniteDimensionalMeasureBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LibMeshFunction.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00344</filename>
  </compound>
  <compound kind="file">
    <name>LibMeshNegativeLaplacianOperator.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00345</filename>
  </compound>
  <compound kind="file">
    <name>LibMeshOperatorBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00346</filename>
  </compound>
  <compound kind="file">
    <name>Map.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00347</filename>
    <class kind="class">QUESO::Map</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00348</filename>
    <class kind="class">QUESO::Matrix</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MpiComm.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00349</filename>
    <class kind="struct">QUESO::data_type</class>
    <class kind="class">QUESO::DataType</class>
    <class kind="class">QUESO::StandardType</class>
    <class kind="class">QUESO::MpiComm</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_COMM_SELF</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a30f232216ea0c6b51721e662e02668f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_ANY_SOURCE</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a262b69101f0a1663523eb1ef1843ed0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_CHAR</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ae81a57f3cac29c0f9c656182d95b8af1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_INT</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a1f067da7be967aa1ff144738cadd3e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_DOUBLE</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ad0f503bd9fecfe4e570ca3d15aaf2518</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_UNSIGNED</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a06cbfbc33436f6e0dc8a48ff3c49bdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_MIN</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a8e30f42fdac116861205e83e2aa18042</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_MAX</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>a68f3ac7ff71a6504e236b0c95de78178</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RawValue_MPI_SUM</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>afbf78d291c032aa7f512bc566cee2bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00349.html</anchorfile>
      <anchor>ab1803cab4b6673a4cbb2238b3af13e83</anchor>
      <arglist>(cxxtype, mpitype)</arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Comm</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa3aeb31f2c1693b8f0d9403675d5b805</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Group</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab0b3b3f6c0a21b084ea4e021bf96429e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Datatype</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a974e147ad875ce654b48aade7a1c39de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Op</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a75bb589f75213c4ff7d02a6b7da5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Status</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a89d6670b5a300a7fbbab7c0839c1534c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a6d2735a4b1afcd970c75c1cf1d1719a5</anchor>
      <arglist>(char, MPI_CHAR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa1aad530c6c4930aa2dcfe769555b5bd</anchor>
      <arglist>(int, MPI_INT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae9b7a00f87ad6c515b815d4ca9711b2d</anchor>
      <arglist>(unsigned int, MPI_UNSIGNED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa27d0db158322d9d2e37440ff4b201f2</anchor>
      <arglist>(double, MPI_DOUBLE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OperatorBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00350</filename>
    <class kind="class">QUESO::OperatorBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Optimizer.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00351</filename>
    <class kind="class">QUESO::BaseOptimizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizerMonitor.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00352</filename>
    <class kind="class">QUESO::OptimizerMonitor</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngBase.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00353</filename>
    <class kind="class">QUESO::RngBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngBoost.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00354</filename>
    <class kind="class">QUESO::RngBoost</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngGsl.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00355</filename>
    <class kind="class">QUESO::RngGsl</class>
    <namespace>QUESO</namespace>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>gsl_rng_default_seed</name>
      <anchorfile>a00355.html</anchorfile>
      <anchor>aaedcdd15e9f5b131033de5fca9b4faa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScopedPtr.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00356</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SharedPtr.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00357</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TeuchosMatrix.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00358</filename>
  </compound>
  <compound kind="file">
    <name>TeuchosVector.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00359</filename>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>a00360</filename>
    <class kind="class">QUESO::Vector</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BaseInputOptionsParser.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00361</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00362</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsBoost.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00363</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BasicPdfsGsl.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00364</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BoostInputOptionsParser.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00365</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::vector&lt; double, std::allocator&lt; double &gt; &gt; &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa1384304b07b9fbc90cc872548b28fa3</anchor>
      <arglist>(std::string &amp;name, std::vector&lt; double, std::allocator&lt; double &gt; &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5b797675e032523d9a3b0c522cd1dd7f</anchor>
      <arglist>(std::ostream &amp;os, const BoostInputOptionsParser &amp;parser)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::registerOption&lt; std::string &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a044ed57198a1b71d1784755667e912dc</anchor>
      <arglist>(std::string, std::string, std::string)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::string &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1ba0c5d92f78e2c7327c2ef47175695c</anchor>
      <arglist>(std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::vector&lt; unsigned int, std::allocator&lt; unsigned int &gt; &gt; &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9ab8dd79e1b1e7ed8ed2e5c9e92b41a6</anchor>
      <arglist>(std::string &amp;, std::vector&lt; unsigned int, std::allocator&lt; unsigned int &gt; &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Defines.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00366</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>DistArray.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00367</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Environment.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00368</filename>
    <namespace>QUESO</namespace>
    <member kind="variable">
      <type>std::terminate_handler</type>
      <name>old_terminate_handler</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac54b755ffb94b8896563c43fec9a6a4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnvironmentOptions.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00369</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9be40334de3ec5c8894bbe0780bf954c</anchor>
      <arglist>(std::ostream &amp;os, const EnvOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctionBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00370</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>FunctionOperatorBuilder.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00371</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslBlockMatrix.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00372</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslMatrix.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00373</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslOptimizer.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00374</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>double</type>
      <name>c_evaluate</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a41729b1987bfaf3172e9ea79913876dd</anchor>
      <arglist>(const gsl_vector *x, void *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>c_evaluate_derivative</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9e69e6940dbc0ea35bbb5eb085163177</anchor>
      <arglist>(const gsl_vector *x, void *context, gsl_vector *derivative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>c_evaluate_with_derivative</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aadca5d879e57d8f597a440c33950256e</anchor>
      <arglist>(const gsl_vector *x, void *context, double *f, gsl_vector *derivative)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GslVector.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00375</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalGaussian.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00376</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalLikelihoodBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00377</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMCMCSampler.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00378</filename>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMCMCSamplerOptions.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00379</filename>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_INF_DATA_OUTPUT_DIR_NAME_ODV</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>aec1cc3af00e966ad1f72d4991db506f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_INF_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a94a16132b1d2694fe1ba4602594e7bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_INF_NUM_ITERS_ODV</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>a09baf502e91d02389a48a0eb808826f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_INF_SAVE_FREQ_ODV</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab6e147540aa260f27861a36a39443878</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_INF_RWMH_STEP_ODV</name>
      <anchorfile>a00379.html</anchorfile>
      <anchor>ab6dfe19abe6e2708a3bb7e50c07ee8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad119a84a6c4ad9039abb1ac87fa0583f</anchor>
      <arglist>(std::ostream &amp;os, const InfiniteDimensionalMCMCSamplerOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InfiniteDimensionalMeasureBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00380</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LibMeshFunction.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00381</filename>
  </compound>
  <compound kind="file">
    <name>LibMeshNegativeLaplacianOperator.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00382</filename>
  </compound>
  <compound kind="file">
    <name>LibMeshOperatorBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00383</filename>
  </compound>
  <compound kind="file">
    <name>Map.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00384</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Matrix.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00385</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MpiComm.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00386</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>OperatorBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00387</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Optimizer.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00388</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>OptimizerMonitor.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00389</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngBase.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00390</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngBoost.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00391</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RngGsl.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00392</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TeuchosMatrix.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00393</filename>
  </compound>
  <compound kind="file">
    <name>TeuchosVector.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00394</filename>
  </compound>
  <compound kind="file">
    <name>Vector.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00395</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>version.C</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>a00396</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>ae66f6b31b5ad750f1fe042a706a4e3d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExperimentModel.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00397</filename>
    <class kind="class">QUESO::ExperimentModel</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExperimentModelOptions.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00398</filename>
    <class kind="class">QUESO::EmOptionsValues</class>
    <class kind="class">QUESO::ExperimentModelOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_G_VALUES_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ae7e7883beac70a642d73a4e9dbbbad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_A_V_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a497f817ebbebf7a6782d192c0599c609</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_B_V_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a690107ffbb973d9a988b0eb6356ab7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_A_RHO_V_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>aabccd26cef6a58c5d62944a05a95774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_B_RHO_V_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2135153fd4ba572d5fa1470a7ee1bd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_A_Y_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>adde8b6a4e0c81af27647cb310f74f3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_EXPERIMENT_MODEL_B_Y_ODV</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a17c9d9a3321541cd93cd520ea0cf9246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8fd1509f4bb4b47bf494146cf6a63443</anchor>
      <arglist>(std::ostream &amp;os, const ExperimentModelOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExperimentStorage.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00399</filename>
    <class kind="class">QUESO::ExperimentStorage</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmExperimentInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00400</filename>
    <class kind="class">QUESO::GcmExperimentInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmJointInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00401</filename>
    <class kind="class">QUESO::GcmJointInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmJointTildeInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00402</filename>
    <class kind="class">QUESO::GcmJointTildeInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmSimulationInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00403</filename>
    <class kind="class">QUESO::GcmSimulationInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmSimulationTildeInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00404</filename>
    <class kind="class">QUESO::GcmSimulationTildeInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmTotalInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00405</filename>
    <class kind="class">QUESO::GcmTotalInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmZInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00406</filename>
    <class kind="class">QUESO::GcmZInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmZTildeInfo.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00407</filename>
    <class kind="class">QUESO::GcmZTildeInfo</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GPMSA.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00408</filename>
    <class kind="class">QUESO::GPMSAEmulator</class>
    <class kind="class">QUESO::GPMSAFactory</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GpmsaComputerModel.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00409</filename>
    <class kind="class">QUESO::GpmsaComputerModel</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GpmsaComputerModelOptions.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00410</filename>
    <class kind="class">QUESO::GcmOptionsValues</class>
    <class kind="class">QUESO::GpmsaComputerModelOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a6cce9c7ebfa5f7a0ecb7ce7521e95f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_COMPUTE_SOLUTION_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a2355ba336f357e2eb6cb6f843c38c9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_CHECK_AGAINST_PREVIOUS_SAMPLE_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a72d50ac08aa4911926873ed921e142e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a9e67a0a404fec583de879bae8257ba3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a4342ad95ecb9873f6f840ac2950ad095</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a87b8a6574745272134ec9583d522a3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRIOR_SEQ_NUM_SAMPLES_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a345dcb05464f6221bef866189526054b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRIOR_SEQ_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ac15fbed573356459a67fdf442fd0038f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRIOR_SEQ_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aaf96d1b92eee463b9faa47369dfb222c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRIOR_SEQ_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a6f96a0327cfeda808b8231f34e100a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRIOR_SEQ_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a00c1221b14751b4e6298448d43767f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_NUGGET_VALUE_FOR_BT_WY_B_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ad65a2a2056cbf6488321fa297a0f08a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_NUGGET_VALUE_FOR_BT_WY_B_INV_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0848a674a137d53f4a239ba149ea4b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_FORM_C_MATRIX_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a20c17a4b9505bd3f125f15a4d211ad7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_USE_TILDE_LOGIC_FOR_RANK_DEFFICIENT_C_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a1208f9012e56e2989669ad936a0add77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_LAG_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ad35f15ebf634e81fdc4891cf3d25157f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_VUS_BY_SAMPLING_RVS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a595669e25d77ab2564ce835d4365cf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_VUS_BY_SUMMING_RVS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a3d03afc8c3c8fff1a49ef657f4caac36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_VUS_AT_KEY_POINTS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>af88d70dde3281fb1cee1d6861cbb335b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_WS_BY_SAMPLING_RVS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>aca787ee7b06428738404035faec0c164</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_WS_BY_SUMMING_RVS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ab656c45cb7187af66d7a9a8de2f1a929</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GCM_PRED_WS_AT_KEY_POINTS_ODV</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>a0afcde26e1d59adcc20dae1bc42e14f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2a37574e418c22634c66f8aaa4a54c0a</anchor>
      <arglist>(std::ostream &amp;os, const GpmsaComputerModelOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GPMSAOptions.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00411</filename>
    <class kind="class">QUESO::GPMSAOptions</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SimulationModel.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00412</filename>
    <class kind="class">QUESO::SimulationModel</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SimulationModelOptions.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00413</filename>
    <class kind="class">QUESO::SmOptionsValues</class>
    <class kind="class">QUESO::SimulationModelOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ae093399982cca0d24b89722d8bcd3611</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>abe60e805696859c40dd904460936d08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a82548b23d7b12932dd04c1c407b4aca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a7e95c2e336d5d714d5a600189693dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_P_ETA_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a683bcf5595dac9f028d025cf05c9c30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_ZERO_RELATIVE_SINGULAR_VALUE_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a9db40259b132e5570037d9da1ac02e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_CDF_THRESHOLD_FOR_P_ETA_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a5221a6d561b4c122250a152bebea95bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_A_W_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a73043d742f91582222804df81c7b64d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_B_W_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a04b3a52f036b302507cf7333b4839b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_A_RHO_W_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>af7d82a5688c9de186997b6f5d54d8f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_B_RHO_W_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a127ca970e319251858928e8c78dc312e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_A_ETA_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ade55ff65941f27c73040fb52aa5df605</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_B_ETA_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>aaddf1137fb92a637204f972a0023ab32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_A_S_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a985b7329d133ea83efcf88bce0fa2d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIMULATION_MODEL_B_S_ODV</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>a4e653748e46d797bdfcff9b01a1ab1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5ba220a2c0a3088e2f591da19eed3cfa</anchor>
      <arglist>(std::ostream &amp;os, const SimulationModelOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimulationStorage.h</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>a00414</filename>
    <class kind="class">QUESO::SimulationStorage</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExperimentModel.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00415</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExperimentModelOptions.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00416</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExperimentStorage.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00417</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmExperimentInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00418</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmJointInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00419</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmJointTildeInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00420</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmSimulationInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00421</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmSimulationTildeInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00422</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmTotalInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00423</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmZInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00424</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GcmZTildeInfo.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00425</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GPMSA.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00426</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GpmsaComputerModel.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00427</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GpmsaComputerModelOptions.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00428</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GPMSAOptions.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00429</filename>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_HELP</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>af96761787910077ee1ab29847872ef60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_PRECISION_SHAPE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>acb09f4464432f74a92242c7523112c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_PRECISION_SCALE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a50ebd5441d0d750e5a5b51b9968e6ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_CORRELATION_STRENGTH_ALPHA_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>ae947289dea29455295dc5825cb13b532</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_CORRELATION_STRENGTH_BETA_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a6f173a44ff9de29d42fab8a2e644be6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_DISCREPANCY_PRECISION_SHAPE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a53a537cf137b6f1da84b93ed5f647ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_DISCREPANCY_PRECISION_SCALE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>abdc6832f2813b91c115c6dd8ae9718c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_DISCREPANCY_CORRELATION_STRENGTH_ALPHA_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>a9d9fda161e4d83e4b7696783e6c3744c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_DISCREPANCY_CORRELATION_STRENGTH_BETA_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>ad364905f1f679c4835eea560ccd346b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_DATA_PRECISION_SHAPE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>af3a0a7a89cc80e25f3e3fb00d13ff97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_GPMSA_EMULATOR_DATA_PRECISION_SCALE_ODV</name>
      <anchorfile>a00429.html</anchorfile>
      <anchor>abc3d9b07ace7468b8c4f7ebef0cd2b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad2cbfecce51160c3b71e4f14611201ef</anchor>
      <arglist>(std::ostream &amp;os, const GPMSAOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimulationModel.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00430</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SimulationModelOptions.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00431</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SimulationStorage.C</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>a00432</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>1D1DFunction.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00433</filename>
    <class kind="class">QUESO::Base1D1DFunction</class>
    <class kind="class">QUESO::Generic1D1DFunction</class>
    <class kind="class">QUESO::Constant1D1DFunction</class>
    <class kind="class">QUESO::Linear1D1DFunction</class>
    <class kind="class">QUESO::PiecewiseLinear1D1DFunction</class>
    <class kind="class">QUESO::Quadratic1D1DFunction</class>
    <class kind="class">QUESO::Sampled1D1DFunction</class>
    <class kind="class">QUESO::ScalarTimesFunc1D1DFunction</class>
    <class kind="class">QUESO::FuncTimesFunc1D1DFunction</class>
    <class kind="class">QUESO::FuncPlusFunc1D1DFunction</class>
    <class kind="class">QUESO::LagrangePolynomial1D1DFunction</class>
    <class kind="class">QUESO::LagrangeBasis1D1DFunction</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>double</type>
      <name>SubF1F2Gaussian2dKdeIntegral</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8c82b1fac926f75ad3e18cbd2d6a1b9d</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double scaleValue1, double scaleValue2, const Base1D1DFunction &amp;func1, const Base1D1DFunction &amp;func2, unsigned int quadratureOrder)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>1DQuadrature.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00434</filename>
    <class kind="class">QUESO::Base1DQuadrature</class>
    <class kind="class">QUESO::Generic1DQuadrature</class>
    <class kind="class">QUESO::UniformLegendre1DQuadrature</class>
    <class kind="class">QUESO::GaussianHermite1DQuadrature</class>
    <class kind="class">QUESO::WignerInverseChebyshev1st1DQuadrature</class>
    <class kind="class">QUESO::WignerChebyshev2nd1DQuadrature</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>2dArrayOfStuff.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00435</filename>
    <class kind="class">QUESO::TwoDArray</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayOfOneDGrids.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00436</filename>
    <class kind="class">QUESO::ArrayOfOneDGrids</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayOfOneDTables.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00437</filename>
    <class kind="class">QUESO::ArrayOfOneDTables</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>AsciiTable.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00438</filename>
    <class kind="class">QUESO::AsciiTable</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>CovCond.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00439</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>CovCond</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1f8ccd7acd730666bd114f1f3ed33f82</anchor>
      <arglist>(double condNumber, const V &amp;direction, M &amp;covMatrix, M &amp;precMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fft.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00440</filename>
    <class kind="class">QUESO::Fft</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Miscellaneous.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00441</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>MiscReadDoublesFromString</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac3fab438679d1dc864f8d629881dad2e</anchor>
      <arglist>(const std::string &amp;inputString, std::vector&lt; double &gt; &amp;outputDoubles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscReadWordsFromString</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9e0f636bad9d30e3d0fa1589a61d0567</anchor>
      <arglist>(const std::string &amp;inputString, std::vector&lt; std::string &gt; &amp;outputWords)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscReadStringAndDoubleFromFile</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af0fc61c58d0ca592fa172eeab540d39c</anchor>
      <arglist>(std::ifstream &amp;ifs, std::string &amp;termString, double *termValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscReadCharsAndDoubleFromFile</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a575d3153d82b7df3d78ad5cfbf2b83b7</anchor>
      <arglist>(std::ifstream &amp;ifs, std::string &amp;termString, double *termValue, bool &amp;endOfLineAchieved)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGammar</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4f268914e653262df98af86aeb33285f</anchor>
      <arglist>(double a, double b, const RngBase *rngObject)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGetEllapsedSeconds</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a424bc33f2e6e287fd468408d14b772ee</anchor>
      <arglist>(struct timeval *timeval0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscHammingWindow</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a48c1ad47c8bebad572842726591e9d3f</anchor>
      <arglist>(unsigned int N, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGaussianDensity</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0f94e9b1e8f415c389f180d4a75c5591</anchor>
      <arglist>(double x, double mu, double sigma)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>MiscUintDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2f606febc1ff24dc4b427c68b4bb845e</anchor>
      <arglist>(unsigned int value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscIntDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae9763e7b3ff5f5e2a19bb440f7b7bb4e</anchor>
      <arglist>(int value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscDoubleDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a976de592e2133af50b80f6aad1352165</anchor>
      <arglist>(double value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CheckFilePath</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>abc55c11f68bb99c4eba88030f1164764</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRVY_CheckDir</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a56d7533d2177cf02d3fd761f7a22a873</anchor>
      <arglist>(const char *dirname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MiscCheckForSameValueInAllNodes</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4166a375c5adbea35afaaf20775bc519</anchor>
      <arglist>(T &amp;inputValue, double acceptableTreshold, const MpiComm &amp;comm, const char *whereString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscComputePositionsBetweenMinMax</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a3a6b46538ead03c47f13e60542608e34</anchor>
      <arglist>(V minValues, V maxValues, std::vector&lt; V * &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscCheckTheParallelEnvironment</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a57ad15be98b39ff64e0719305c639c75</anchor>
      <arglist>(const V1 &amp;vec1, const V2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDGrid.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00442</filename>
    <class kind="class">QUESO::BaseOneDGrid</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StdOneDGrid.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00443</filename>
    <class kind="class">QUESO::StdOneDGrid</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StreamUtilities.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00444</filename>
    <class kind="class">QUESO::StreamUtilities</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformOneDGrid.h</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>a00445</filename>
    <class kind="class">QUESO::UniformOneDGrid</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>1D1DFunction.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00446</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>1DQuadrature.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00447</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>2dArrayOfStuff.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00448</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayOfOneDGrids.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00449</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayOfOneDTables.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00450</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a741c4181f77af64b1e82cdce4d203cfa</anchor>
      <arglist>(std::ostream &amp;os, const ArrayOfOneDTables&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsciiTable.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00451</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>abd30e6a15a8d9117611fddd7d06c3eed</anchor>
      <arglist>(std::ostream &amp;os, const AsciiTable&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ComplexFft.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00452</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>CovCond.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00453</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Fft.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00454</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GslAsciiTable.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00455</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>Miscellaneous.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00456</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>template void</type>
      <name>QUESO::MiscCheckTheParallelEnvironment&lt; QUESO::GslVector, QUESO::GslVector &gt;</name>
      <anchorfile>a00456.html</anchorfile>
      <anchor>a1d4ad7eb410db249c0143600c82d07ce</anchor>
      <arglist>(QUESO::GslVector const &amp;, QUESO::GslVector const &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OneDGrid.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00457</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>RealFft.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00458</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StdOneDGrid.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00459</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StreamUtilities.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00460</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformOneDGrid.C</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>a00461</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BayesianJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00462</filename>
    <class kind="class">QUESO::BayesianJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00463</filename>
    <class kind="class">QUESO::BetaJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00464</filename>
    <class kind="class">QUESO::BetaVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00465</filename>
    <class kind="class">QUESO::BetaVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00466</filename>
    <class kind="class">QUESO::ConcatenatedJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00467</filename>
    <class kind="class">QUESO::ConcatenatedVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00468</filename>
    <class kind="class">QUESO::ConcatenatedVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialMatrixCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00469</filename>
    <class kind="class">QUESO::ExponentialMatrixCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialScalarCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00470</filename>
    <class kind="class">QUESO::ExponentialScalarCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>FiniteDistribution.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00471</filename>
    <class kind="class">QUESO::FiniteDistribution</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00472</filename>
    <class kind="class">QUESO::GammaJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00473</filename>
    <class kind="class">QUESO::GammaVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00474</filename>
    <class kind="class">QUESO::GammaVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00475</filename>
    <class kind="class">QUESO::GaussianJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihood.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00476</filename>
    <class kind="class">QUESO::BaseGaussianLikelihood</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodBlockDiagonalCovariance.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00477</filename>
    <class kind="class">QUESO::GaussianLikelihoodBlockDiagonalCovariance</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00478</filename>
    <class kind="class">QUESO::GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodDiagonalCovariance.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00479</filename>
    <class kind="class">QUESO::GaussianLikelihoodDiagonalCovariance</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodFullCovariance.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00480</filename>
    <class kind="class">QUESO::GaussianLikelihoodFullCovariance</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodFullCovarianceRandomCoefficient.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00481</filename>
    <class kind="class">QUESO::GaussianLikelihoodFullCovarianceRandomCoefficient</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodScalarCovariance.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00482</filename>
    <class kind="class">QUESO::GaussianLikelihoodScalarCovariance</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00483</filename>
    <class kind="class">QUESO::GaussianVectorCdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorMdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00484</filename>
    <class kind="class">QUESO::GaussianVectorMdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00485</filename>
    <class kind="class">QUESO::GaussianVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00486</filename>
    <class kind="class">QUESO::GaussianVectorRV</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>ComputeConditionalGaussianVectorRV</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad6d1e060295dcebaf3253c342c2a8746</anchor>
      <arglist>(const V &amp;muVec1, const V &amp;muVec2, const M &amp;sigmaMat11, const M &amp;sigmaMat12, const M &amp;sigmaMat21, const M &amp;sigmaMat22, const V &amp;sampleVec2, V &amp;muVec1_cond_on_2, M &amp;sigmaMat11_cond_on_2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00487</filename>
    <class kind="class">QUESO::GenericJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericMatrixCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00488</filename>
    <class kind="class">QUESO::GenericMatrixCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericScalarCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00489</filename>
    <class kind="class">QUESO::GenericScalarCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00490</filename>
    <class kind="class">QUESO::GenericVectorCdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorMdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00491</filename>
    <class kind="class">QUESO::GenericVectorMdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00492</filename>
    <class kind="class">QUESO::GenericVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00493</filename>
    <class kind="class">QUESO::GenericVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>HessianCovMatricesTKGroup.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00494</filename>
    <class kind="class">QUESO::HessianCovMatricesTKGroup</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfoTheory.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00495</filename>
  </compound>
  <compound kind="file">
    <name>InverseGammaJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00496</filename>
    <class kind="class">QUESO::InverseGammaJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InverseGammaVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00497</filename>
    <class kind="class">QUESO::InverseGammaVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InverseGammaVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00498</filename>
    <class kind="class">QUESO::InverseGammaVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00499</filename>
    <class kind="class">QUESO::InvLogitGaussianJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00500</filename>
    <class kind="class">QUESO::InvLogitGaussianVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00501</filename>
    <class kind="class">QUESO::InvLogitGaussianVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00502</filename>
    <class kind="class">QUESO::JeffreysJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00503</filename>
    <class kind="class">QUESO::JeffreysVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00504</filename>
    <class kind="class">QUESO::JeffreysVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00505</filename>
    <class kind="class">QUESO::BaseJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00506</filename>
    <class kind="class">QUESO::LogNormalJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00507</filename>
    <class kind="class">QUESO::LogNormalVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00508</filename>
    <class kind="class">QUESO::LogNormalVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MarkovChainPositionData.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00509</filename>
    <class kind="class">QUESO::MarkovChainPositionData</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MatrixCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00510</filename>
    <class kind="class">QUESO::BaseMatrixCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MetropolisHastingsSG.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00511</filename>
    <class kind="struct">QUESO::MHRawChainInfoStruct</class>
    <class kind="class">QUESO::MetropolisHastingsSG</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MetropolisHastingsSGOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00512</filename>
    <class kind="class">QUESO::MhOptionsValues</class>
    <class kind="class">QUESO::MetropolisHastingsSGOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_NOTHING_JUST_FOR_TEST_OF_SVN_ID</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>aa2efa0a25e9d9b26b1b824f94d242870</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a75699ceb938d800e2b7f59ede3ea9a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_HELP</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>af4ace4edc26686825692484be6dff911</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a429b42cebbd00d174ed2efac802abaf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>acbcb85de420cccf7be4cef22854687aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>aa78c5ee907c264c2df072765e04f437b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_TOTALLY_MUTE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>acb9f240640622a2d5960ac52187000fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_INITIAL_POSITION_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a33cdb8e98a96faf5965251da49ea1738</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_INITIAL_POSITION_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a27ebaa9c84f210aba1c4c3e5efd88cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_INITIAL_PROPOSAL_COV_MATRIX_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ae1bcc09f86196a9dd9ff246c4f045ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_INITIAL_PROPOSAL_COV_MATRIX_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a7b132e374b4dc6168db874b08f6268be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_LIST_OF_DISABLED_PARAMETERS_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a77e000e95022a4d610836d7bc4972a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a142f5c2c1733ac8304c69ee04ae6566d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>af0e0783c36d4e6c0f791343418518ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_SIZE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a455df8cb3f749964def740f73227205d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_GENERATE_EXTRA_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a27bbd21c541a1a84270ce23b292cd635</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DISPLAY_PERIOD_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ae37cce3b662f1c3b6e84d282c41a51a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_MEASURE_RUN_TIMES_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a980135370984a2685799c2e4fbda6585</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>af23b7b773a696e3392ba2509803f7011</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>abac180095636122dceb5407269fb701e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ac16891b2289a371854fd32cc8fdecaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a1c2ff5442dda1beb21610d94dfaa9a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_RAW_CHAIN_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a268d0e24d268778efa90c9839ac2d613</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_GENERATE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a5d849c1d612df021c7572c8f64e66c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_DISCARDED_PORTION_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>abac2ddea2dbed40cc772ee1dce223a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_LAG_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a4f771b9dc2dab1a0761823c33d957f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a6617ee84d21f7980e0e4095e7d3c2d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>abae51077aec9f525f73d985d3b3e6c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ab91fb04bffb37db43431881b6fdcd33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_FILTERED_CHAIN_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>afe6ab4fa79b1e65d196f3d0964edf829</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DISPLAY_CANDIDATES_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>afd9de97e637ad6bce8c4829f3c9567e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_PUT_OUT_OF_BOUNDS_IN_CHAIN_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>acfa03e1487c443ca6e3cb2f1edee5c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_TK_USE_LOCAL_HESSIAN_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a1f8c00c4abc85b13ac99aa8589ddb63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_TK_USE_NEWTON_COMPONENT_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a53227a25ea286a43bf1079990e6660a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DR_MAX_NUM_EXTRA_STAGES_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a25f2d316e9719add171ab659591132a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DR_LIST_OF_SCALES_FOR_EXTRA_STAGES_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a64c475d35150a5d123a7224c59f542b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DR_DURING_AM_NON_ADAPTIVE_INT_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ab1c7c652caf08c08976fb716c0747136</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_KEEP_INITIAL_MATRIX_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a93d3172ebce0a72149c644a87dd9af85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_INIT_NON_ADAPT_INT_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a21720d090f4803e013d42708851c436c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPT_INTERVAL_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a77c8418223e86f075851bf910a36f91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPTED_MATRICES_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a31b066c43b9db7ca162b06a0d57d9c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPTED_MATRICES_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ac2b0e9a33eb3be7bd6fd8111d8b986b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPTED_MATRICES_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a60696c3d037fd5cb02bdc3f9e12f2106</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPTED_MATRICES_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>ad90cbc865c4aa502656a2fd432519fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ADAPTED_MATRICES_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a98c334e708991b83cb8b1e24296c60c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_ETA_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>acbc124514a57e28382a8e311cfb7b996</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_AM_EPSILON_ODV</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a0e40df88a159b01a6a36b223e12a8cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_ENABLE_BROOKS_GELMAN_CONV_MONITOR</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a613c77a068bcef4aba2d68f03677eaf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_BROOKS_GELMAN_LAG</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a47c0e6fa59a29fa680a23470018b31b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_OUTPUT_LOG_LIKELIHOOD</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a6df9771dfdf87ca76101bf2470c35083</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_OUTPUT_LOG_TARGET</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a40dc463d0485e7434c26a5444734ec8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MH_SG_DO_LOGIT_TRANSFORM</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a4d47468dc288668199bdde3d752b7900</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab4def712856f22b50e34d21ef9093ac1</anchor>
      <arglist>(std::ostream &amp;os, const MetropolisHastingsSGOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSampling.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00513</filename>
    <class kind="struct">QUESO::ExchangeInfoStruct</class>
    <class kind="struct">QUESO::BalancedLinkedChainControlStruct</class>
    <class kind="struct">QUESO::BalancedLinkedChainsPerNodeStruct</class>
    <class kind="struct">QUESO::UnbalancedLinkedChainControlStruct</class>
    <class kind="struct">QUESO::UnbalancedLinkedChainsPerNodeStruct</class>
    <class kind="class">QUESO::MLSampling</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ML_NEW_CODE_2009_12_29</name>
      <anchorfile>a00513.html</anchorfile>
      <anchor>ad6326f75e9ff1aa45eee62528bc0522d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ML_CHECKPOINT_FIXED_AMOUNT_OF_DATA</name>
      <anchorfile>a00513.html</anchorfile>
      <anchor>a6c830698381e4aa1c55b3b418754ae4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSamplingLevelOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00514</filename>
    <class kind="class">QUESO::MLSamplingLevelOptions</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LEVEL_REF_ID</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a68d15eaf394d210effcf584b938206d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>abfa923abaa56e333dc81843723f216e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_HELP</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a68e64f21673bea9342d4eefa5da59f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_CHECKPOINT_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>af704015a5f14cded6c5db571c83b8b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_STOP_AT_END_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a7678f86b927b2cf2412210feb83fad9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ab7ce1ddd0ee04b962c8bdcbdd82f4641</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a3abc4206e3b5575e6f3b848a582b4de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a2a6a56e51fcae25d75e4e2927101dc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_LOAD_BALANCE_ALGORITHM_ID_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a6d489b49b27d06c5b7a84d32e2bb5866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_LOAD_BALANCE_TRESHOLD_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a0876ac02ee5ea386a030bf4ebff62711</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_MIN_EFFECTIVE_SIZE_RATIO_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>aec18427654162ad23820392bcbbdff3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_MAX_EFFECTIVE_SIZE_RATIO_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>aab2e192c83f639b28db48cd1325c679f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_SCALE_COV_MATRIX_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a49cd7dc3037c16cd3e16f1f9669256a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_MIN_REJECTION_RATE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a574579288519b59fa1b95061fb13fe24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_MAX_REJECTION_RATE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a81d863ad126843d9b254114a538a1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_COV_REJECTION_RATE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a4d7492a45d9ebec82d67920f1ffb0498</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_MIN_ACCEPTABLE_ETA_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a7307f24450402725e187c97c1debd7c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_TOTALLY_MUTE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a9d1012583b3b71282c1c75c33a191a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_POSITION_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a63a8268271c1542aed8c40f08b3b83bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_POSITION_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a918e004ed30b6e2832b8ba3adf51cad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_PROPOSAL_COV_MATRIX_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a0be98afc1e4128037c66a7867514a9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_PROPOSAL_COV_MATRIX_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a18efdcdebf465f0403942698b73c6d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_POSITION_USE_PREVIOUS_LEVEL_LIKELIHOOD_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a68ae10eac575a5c61cfaeef119c6a988</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ae013c6f6194b25b5aff516c4713ec754</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ad97a2257f593742369592cae980d9d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_LIST_OF_DISABLED_PARAMETERS_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a440f2ac3006a05c9b3b52edb6d875b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_INITIAL_VALUES_OF_DISABLED_PARAMETERS_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>aa34b77899ca9070516019abbfbebd161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_SIZE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a75cd28cd43f8ada797c48eefba87cd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_GENERATE_EXTRA_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a5a006d0da54da5d55dada91dab3dc1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DISPLAY_PERIOD_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a48fb0cb12f3cb231928e3f61ed524f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_MEASURE_RUN_TIMES_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a158a4398c61213ee5d3037ee8e81b350</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ae1b20b0ef90421eccab6f39dcf7f2539</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ae810d0fb59aa83e791d5d43f3fc01d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a9184408abc4c6cc11328e3f71c5b8c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>abcacf13c7a6dd5e2d5ef8ec237164623</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_RAW_CHAIN_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a4a5cbd3cf6de5ab2b9913aa6610e79d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_GENERATE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a3afd5f4af4051329da3add2f4112c7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_DISCARDED_PORTION_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a7474c3c7894e86c9994a086e7eb6c034</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_LAG_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a820859819bc5ca3c1a924c2113265ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ade0cdafc4390a26e89c31c82bd30d39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a238b4fa1277494fb24da082847695b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>acdc4131edc310e82d31f97ba6e53d7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_FILTERED_CHAIN_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a58d84c4732f54f0b0e948d3457583077</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DISPLAY_CANDIDATES_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>aa2d7745b0e532f8c005622d3ff02b628</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_PUT_OUT_OF_BOUNDS_IN_CHAIN_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ab15c556d88b36e6e230ec6e1e0d73111</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_TK_USE_LOCAL_HESSIAN_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a2d102346b9e51bf71f6714c2eb7a6bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_TK_USE_NEWTON_COMPONENT_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a2027707406e5493bfc0702cb3033ce82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DR_MAX_NUM_EXTRA_STAGES_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>aa5bfeef6f4cf71334313ef04931d90fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DR_LIST_OF_SCALES_FOR_EXTRA_STAGES_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a26735ffd11eee92d59e2b7575e378b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DR_DURING_AM_NON_ADAPTIVE_INT_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a5eae7f902d5e4947bd3423fc90414642</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_KEEP_INITIAL_MATRIX_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a0a7527161362b944fbe56ac7d4560de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_INIT_NON_ADAPT_INT_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a27b8503335df621c186ea19b986ab672</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPT_INTERVAL_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ae49697aa6afd01515cb3f68ab932d606</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPTED_MATRICES_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a9db211b4afa7ee39c65d585e4e32d2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPTED_MATRICES_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a81a53ad0bdd7f7a72be30f20486d6aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPTED_MATRICES_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a58a3b9fb9d4b5590390dd9aa650ed6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPTED_MATRICES_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a638396364b16987b66f56caab789797a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ADAPTED_MATRICES_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a3a58f561cdec39ae52fe90f37f684a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_ETA_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>ac1cfad0fa55ddffdc92bd25e49c174d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_AM_EPSILON_ODV</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a705e000d7df8fde969fb5e2587fceab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_L_DO_LOGIT_TRANSFORM</name>
      <anchorfile>a00514.html</anchorfile>
      <anchor>a206dee4a1eaa1bf5e0ebf41b5353cd42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSamplingOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00515</filename>
    <class kind="class">QUESO::MLSamplingOptions</class>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a7b733ab95e374e35c7f37894dc455b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_RESTART_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a17088af1520e38f78034a6a9d729dff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_RESTART_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a018a972ab4b4e38509e010f4b3223fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_RESTART_CHAIN_SIZE_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a68cd0922499c632ff3ff44abb4df797e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a08071d6c8f72010522ac64f4268b699a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_DATA_OUTPUT_ALLOW_ALL_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a3a9d1ab75ed8fc07b1dcd781455ec296</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_ML_SAMPLING_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a18a664fedd552e2d2ebdac80b4d4f54b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelValidation.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00516</filename>
    <class kind="class">QUESO::ModelValidation</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MonteCarloSG.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00517</filename>
    <class kind="class">QUESO::MonteCarloSG</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MonteCarloSGOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00518</filename>
    <class kind="class">QUESO::McOptionsValues</class>
    <class kind="class">QUESO::MonteCarloSGOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a0c480f57c47ffbb3b11b838ba7734d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_HELP</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a6aa56d8627a4a5f65cabe99bdd560280</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>aa5ec0a1554b6c12eaa270131024b29b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>aa0fd860d2c6fd2693213b91c9bf69fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_PSEQ_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ad65a13367ee1f95b0ddc5fca2f6dbf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_PSEQ_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a773952b5a26845f50d913143236adbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_PSEQ_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a1f174a6cc09ec8585fabb3c5348d489b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_PSEQ_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a207a542a633a248cfa2e24254b9e084b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_PSEQ_COMPUTE_STATS_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ada46f5319f17f130f942366728a385e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_INPUT_FILE_NAME_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a362582367efdc7499fbd8a2153acca82</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_INPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ad7dc9950138b8f479608834c5bb662c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_SIZE_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ae8dc1f788898174d2c827d271d4c72a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DISPLAY_PERIOD_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a7103fc85197b23e5faa62d81c1adbe72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_MEASURE_RUN_TIMES_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a9e6cd4344693c5e404507ba09f968b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_OUTPUT_PERIOD_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a402f0d84030c8ad88a785f92f438990f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a1bd85693eba20c77000b09c9ecb2f15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_OUTPUT_FILE_TYPE_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a379ba13c2a2603fd2deee44a0b38cabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>ac3a2979aa6cf1bd4cb42e68e88b12e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_MOC_SG_QSEQ_COMPUTE_STATS_ODV</name>
      <anchorfile>a00518.html</anchorfile>
      <anchor>a4a9b193e19440e6778b2994e651df7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1e37d289bad8dc2aa2600ea78d1a6d9f</anchor>
      <arglist>(std::ostream &amp;os, const MonteCarloSGOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoweredJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00519</filename>
    <class kind="class">QUESO::PoweredJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledScalarCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00520</filename>
    <class kind="class">QUESO::SampledScalarCdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledVectorCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00521</filename>
    <class kind="class">QUESO::SampledVectorCdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledVectorMdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00522</filename>
    <class kind="class">QUESO::SampledVectorMdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00523</filename>
    <class kind="class">QUESO::BaseScalarCdf</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>double</type>
      <name>horizontalDistance</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a389e9373827829b35f2bf36df32d0ef1</anchor>
      <arglist>(const BaseScalarCdf&lt; T &gt; &amp;cdf1, const BaseScalarCdf&lt; T &gt; &amp;cdf2, double epsilon)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScalarCovarianceFunction.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00524</filename>
    <class kind="class">QUESO::BaseScalarCovarianceFunction</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarGaussianRandomField.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00525</filename>
    <class kind="class">QUESO::ScalarGaussianRandomField</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScaledCovMatrixTKGroup.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00526</filename>
    <class kind="class">QUESO::ScaledCovMatrixTKGroup</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SequentialVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00527</filename>
    <class kind="class">QUESO::SequentialVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalForwardProblem.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00528</filename>
    <class kind="class">QUESO::StatisticalForwardProblem</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalForwardProblemOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00529</filename>
    <class kind="class">QUESO::SfpOptionsValues</class>
    <class kind="class">QUESO::StatisticalForwardProblemOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a3b6f63fc486729005e96f1381c53c465</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_HELP</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aeca5e34bed34d91387a1aceaff79efce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_COMPUTE_SOLUTION_ODV</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a8ee85ee13d632a1e54c269c68af1a271</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_COMPUTE_COVARIANCES_ODV</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aa28405a39c7f3ee8c1cf3446ce315e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_COMPUTE_CORRELATIONS_ODV</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aa0c31541814dd70982b6158e9c397ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>a671a3fb41ecb82838bd80d96d20f906b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SFP_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00529.html</anchorfile>
      <anchor>aacce4c79e6074eb5766f43705a605193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a185311186813492aebbb75fdf9943611</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalForwardProblemOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StatisticalInverseProblem.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00530</filename>
    <class kind="class">QUESO::StatisticalInverseProblem</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalInverseProblemOptions.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00531</filename>
    <class kind="class">QUESO::SipOptionsValues</class>
    <class kind="class">QUESO::StatisticalInverseProblemOptions</class>
    <namespace>boost</namespace>
    <namespace>boost::program_options</namespace>
    <namespace>QUESO</namespace>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_HELP</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a584b63c19c1d893b4c6f29ee7e562fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_FILENAME_FOR_NO_FILE</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>ac78631f46bad3db4e949f3b7ea34fb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_COMPUTE_SOLUTION_ODV</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a391844c7f349197c10bc3b38a95f5c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_DATA_OUTPUT_FILE_NAME_ODV</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a19f3d5cf3650ba583bb8ebf60e41eb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_DATA_OUTPUT_ALLOWED_SET_ODV</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a8abf6a2917933f5f1f0bd1e81299d506</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_SEEDWITHMAPESTIMATOR</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a8dcfe0e1bbb581c3cbc14cb0619a5fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UQ_SIP_USEOPTIMIZERMONITOR</name>
      <anchorfile>a00531.html</anchorfile>
      <anchor>a52aa91a5c9fc330ce1163c27457ad42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a408c51750e38ef3c04031a801f572e8b</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalInverseProblemOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StdScalarCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00532</filename>
    <class kind="class">QUESO::StdScalarCdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TKGroup.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00533</filename>
    <class kind="class">QUESO::BaseTKGroup</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedScaledCovMatrixTKGroup.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00534</filename>
    <class kind="class">QUESO::TransformedScaledCovMatrixTKGroup</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00535</filename>
    <class kind="class">QUESO::UniformJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00536</filename>
    <class kind="class">QUESO::UniformVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00537</filename>
    <class kind="class">QUESO::UniformVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ValidationCycle.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00538</filename>
    <class kind="class">QUESO::ValidationCycle</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorCdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00539</filename>
    <class kind="class">QUESO::BaseVectorCdf</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>horizontalDistances</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa34cd1eb7f035b5e6f8d8c090f02d65f</anchor>
      <arglist>(const BaseVectorCdf&lt; V, M &gt; &amp;cdf1, const BaseVectorCdf&lt; V, M &gt; &amp;cdf2, const V &amp;epsilonVec, V &amp;distances)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorGaussianRandomField.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00540</filename>
    <class kind="class">QUESO::VectorGaussianRandomField</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorMdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00541</filename>
    <class kind="class">QUESO::BaseVectorMdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00542</filename>
    <class kind="class">QUESO::BaseVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00543</filename>
    <class kind="class">QUESO::BaseVectorRV</class>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrMatricesBetweenVectorRvs</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4b9472b3a017ccaffbea8cc69b96afac</anchor>
      <arglist>(const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, const BaseVectorRV&lt; Q_V, Q_M &gt; &amp;qoiRv, unsigned int localNumSamples, P_M &amp;pqCovMatrix, P_M &amp;pqCorrMatrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WignerJointPdf.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00544</filename>
    <class kind="class">QUESO::WignerJointPdf</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>WignerVectorRealizer.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00545</filename>
    <class kind="class">QUESO::WignerVectorRealizer</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>WignerVectorRV.h</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>a00546</filename>
    <class kind="class">QUESO::WignerVectorRV</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BayesianJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00547</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00548</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00549</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>BetaVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00550</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00551</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00552</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ConcatenatedVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00553</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialMatrixCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00554</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ExponentialScalarCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00555</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>FiniteDistribution.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00556</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00557</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00558</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GammaVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00559</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00560</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihood.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00561</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodBlockDiagonalCovariance.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00562</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00563</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodDiagonalCovariance.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00564</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodFullCovariance.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00565</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodFullCovarianceRandomCoefficient.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00566</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianLikelihoodScalarCovariance.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00567</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00568</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorMdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00569</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00570</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00571</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>template void</type>
      <name>QUESO::ComputeConditionalGaussianVectorRV&lt; QUESO::GslVector, QUESO::GslMatrix &gt;</name>
      <anchorfile>a00571.html</anchorfile>
      <anchor>aef336afbfa12684a82e50d2efba7acc7</anchor>
      <arglist>(QUESO::GslVector const &amp;, QUESO::GslVector const &amp;, QUESO::GslMatrix const &amp;, QUESO::GslMatrix const &amp;, QUESO::GslMatrix const &amp;, QUESO::GslMatrix const &amp;, QUESO::GslVector const &amp;, QUESO::GslVector &amp;, QUESO::GslMatrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00572</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericMatrixCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00573</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericScalarCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00574</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00575</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorMdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00576</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00577</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>GenericVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00578</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>HessianCovMatricesTKGroup.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00579</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InfoTheory.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00580</filename>
  </compound>
  <compound kind="file">
    <name>InverseGammaJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00581</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InverseGammaVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00582</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InverseGammaVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00583</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00584</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00585</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InvLogitGaussianVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00586</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00587</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00588</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00589</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>JointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00590</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00591</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00592</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00593</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MarkovChainPositionData.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00594</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MatrixCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00595</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MetropolisHastingsSG.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00596</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MetropolisHastingsSGOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00597</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad0f8ae88609dd887902228b90c6d93a9</anchor>
      <arglist>(std::ostream &amp;os, const MhOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSampling.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00598</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8da6c5c5bdc3addfa97ccad5eebbfd7c</anchor>
      <arglist>(std::ostream &amp;os, const MLSampling&lt; P_V, P_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSamplingLevelOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00599</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8cdcc176eced9c45125c485efae86591</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingLevelOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MLSamplingOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00600</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab426563b1a39f2f5c2196bb500e869b4</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ModelValidation.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00601</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MonteCarloSG.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00602</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>MonteCarloSGOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00603</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa362a9d6ffd4eaa8752ae4fb40126622</anchor>
      <arglist>(std::ostream &amp;os, const McOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoweredJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00604</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledScalarCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00605</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledVectorCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00606</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SampledVectorMdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00607</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00608</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarCovarianceFunction.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00609</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScalarGaussianRandomField.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00610</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ScaledCovMatrixTKGroup.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00611</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SequentialVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00612</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalForwardProblem.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00613</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalForwardProblemOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00614</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a410f3b3b0461295df1db7ee6d68801f1</anchor>
      <arglist>(std::ostream &amp;os, const SfpOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StatisticalInverseProblem.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00615</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalInverseProblemOptions.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00616</filename>
    <namespace>QUESO</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae7c284129de1e1c899462f0125b25b85</anchor>
      <arglist>(std::ostream &amp;os, const SipOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StdScalarCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00617</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TKGroup.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00618</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedScaledCovMatrixTKGroup.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00619</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00620</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00621</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>UniformVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00622</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>ValidationCycle.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00623</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorCdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00624</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorGaussianRandomField.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00625</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorMdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00626</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00627</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>VectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00628</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>WignerJointPdf.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00629</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>WignerVectorRealizer.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00630</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>WignerVectorRV.C</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>a00631</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateBase.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00632</filename>
    <class kind="class">QUESO::InterpolationSurrogateData</class>
    <class kind="class">QUESO::InterpolationSurrogateBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateBuilder.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00633</filename>
    <class kind="class">QUESO::InterpolationSurrogateBuilder</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateData.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00634</filename>
    <class kind="class">QUESO::InterpolationSurrogateData</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateDataSet.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00635</filename>
    <class kind="class">QUESO::InterpolationSurrogateDataSet</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateHelper.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00636</filename>
    <class kind="class">QUESO::InterpolationSurrogateHelper</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateIOASCII.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00637</filename>
    <class kind="class">QUESO::InterpolationSurrogateIOASCII</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateIOBase.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00638</filename>
    <class kind="class">QUESO::InterpolationSurrogateIOBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LinearLagrangeInterpolationSurrogate.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00639</filename>
    <class kind="class">QUESO::LinearLagrangeInterpolationSurrogate</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SurrogateBase.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00640</filename>
    <class kind="class">QUESO::SurrogateBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>SurrogateBuilderBase.h</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>a00641</filename>
    <class kind="class">QUESO::SurrogateBuilderBase</class>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateBase.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00642</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateBuilder.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00643</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateData.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00644</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateDataSet.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00645</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateHelper.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00646</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateIOASCII.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00647</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>InterpolationSurrogateIOBase.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00648</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="file">
    <name>LinearLagrangeInterpolationSurrogate.C</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>a00649</filename>
    <namespace>QUESO</namespace>
  </compound>
  <compound kind="page">
    <name>About2</name>
    <title></title>
    <filename>a00002</filename>
  </compound>
  <compound kind="page">
    <name>Acknowledgments</name>
    <title></title>
    <filename>a00004</filename>
  </compound>
  <compound kind="page">
    <name>LicenseLGPL</name>
    <title></title>
    <filename>a00006</filename>
  </compound>
  <compound kind="page">
    <name>NOOP</name>
    <title></title>
    <filename>a00008</filename>
  </compound>
  <compound kind="class">
    <name>ANNbd_shrink</name>
    <filename>a00010.html</filename>
    <base>ANNkd_node</base>
    <member kind="function">
      <type></type>
      <name>ANNbd_shrink</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5a237183dfd0646b2c90aa2bb282ba71</anchor>
      <arglist>(int nb, ANNorthHSArray bds, ANNkd_ptr ic=NULL, ANNkd_ptr oc=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNbd_shrink</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a1dd5b9b46f66329ed409cd4b508a27cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStats</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a37a635b661ebb1b18ec6ab68df92a2b4</anchor>
      <arglist>(int dim, ANNkdStats &amp;st, ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a41b772faa781609ff39da6a269c16662</anchor>
      <arglist>(int level, ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a51d412cbad1b7823437adf97050d8880</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_search</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a56bedc3fbf48f37c82aa6ea5228cc97e</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_pri_search</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb5b5c04e63c394e650ae3fc7e195989</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_FR_search</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a87afc7f96e0203b7d5149ca3aec65d57</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ANNkd_node</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a139e0eeb1036bacaf653425372976b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_bnds</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa39fd79dab4163b3ff8a0af60fec9742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNorthHSArray</type>
      <name>bnds</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af37a99b5d5b1c460e31ea5b9ca994e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNkd_ptr</type>
      <name>child</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6b50ec4569620af69946e62106eeb5a7</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNbd_tree</name>
    <filename>a00011.html</filename>
    <base>ANNkd_tree</base>
    <member kind="function">
      <type></type>
      <name>ANNbd_tree</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6f947fa8ce26e0ccae9dd1b7651a5e1f</anchor>
      <arglist>(int n, int dd, int bs=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNbd_tree</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>affc85f82bf003672cb9b05176617fee8</anchor>
      <arglist>(ANNpointArray pa, int n, int dd, int bs=1, ANNsplitRule split=ANN_KD_SUGGEST, ANNshrinkRule shrink=ANN_BD_SUGGEST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNbd_tree</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8c68b938a359d6c307284d7bcf7fe273</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNkd_tree</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a554ac3f6c790dfa2268008580bcb9734</anchor>
      <arglist>(int n=0, int dd=0, int bs=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNkd_tree</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aee9529e128732f61702c5b22f8090a9a</anchor>
      <arglist>(ANNpointArray pa, int n, int dd, int bs=1, ANNsplitRule split=ANN_KD_SUGGEST)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNkd_tree</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a132d8b31ff7b223555d54a2db28d8861</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNkd_tree</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a0f6d39d75e2df3682035503d6f318d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annkSearch</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a2a0fa2889c23a34773dc054c7769b3c6</anchor>
      <arglist>(ANNpoint q, int k, ANNidxArray nn_idx, ANNdistArray dd, double eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annkPriSearch</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5a30304ca338faa9e6c61b10dd7ee940</anchor>
      <arglist>(ANNpoint q, int k, ANNidxArray nn_idx, ANNdistArray dd, double eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annkFRSearch</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9f98ea5b23ad8957fbea661014d25889</anchor>
      <arglist>(ANNpoint q, ANNdist sqRad, int k, ANNidxArray nn_idx=NULL, ANNdistArray dd=NULL, double eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>theDim</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a200c6e8c2d9ea1d9afbdec893c41edb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nPoints</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7acce8e5f6bbbe1e3c9e7f503e70d19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNpointArray</type>
      <name>thePoints</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a927be6420bd73db85ad8e356b462ec1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Print</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1e56bec899aabf89e689be0efb919792</anchor>
      <arglist>(ANNbool with_pts, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Dump</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a25679827d1b863997fd3d8054116d2de</anchor>
      <arglist>(ANNbool with_pts, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStats</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab77cd72cc0f98d3ba5b2c546e3bfc460</anchor>
      <arglist>(ANNkdStats &amp;st)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ANNpointSet</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a22d90676e746e4d4d45215a879068d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>SkeletonTree</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af531a6a84d19b64a74fabb718e9c12f0</anchor>
      <arglist>(int n, int dd, int bs, ANNpointArray pa=NULL, ANNidxArray pi=NULL)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a75bce877c86884daa690d4a508816391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n_pts</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5e2b9b8c72550fee6f0b83b2497aff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>bkt_size</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4195961b40483502523de0147085061a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ANNpointArray</type>
      <name>pts</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1cfebcb6bc0c5799ca63742be94252e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ANNidxArray</type>
      <name>pidx</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab6e9412675e56af6e6cebcc012dadd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ANNkd_ptr</type>
      <name>root</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a260fdbf0352880655eba84b271d30351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ANNpoint</type>
      <name>bnd_box_lo</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a67b75c59ccbeba75df32e3d1ea6575ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ANNpoint</type>
      <name>bnd_box_hi</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a58438fdbae2c04ee3bcd6ec507fb59d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNbruteForce</name>
    <filename>a00012.html</filename>
    <base>ANNpointSet</base>
    <member kind="function">
      <type></type>
      <name>ANNbruteForce</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adf86620260f8a08784a745fde28e67a1</anchor>
      <arglist>(ANNpointArray pa, int n, int dd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNbruteForce</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa04ee5206b8376ec166d94a9ebc22bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>annkSearch</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac18a8d4dd4550a8336228d0d219cbc18</anchor>
      <arglist>(ANNpoint q, int k, ANNidxArray nn_idx, ANNdistArray dd, double eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>annkFRSearch</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2b72f0687a5fc325471213b1b42f932f</anchor>
      <arglist>(ANNpoint q, ANNdist sqRad, int k=0, ANNidxArray nn_idx=NULL, ANNdistArray dd=NULL, double eps=0.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>theDim</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad7894b12b925b0c3bbeb57d5ba260285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nPoints</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>acbf6eef7ce9c6999435c62f678afaba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNpointArray</type>
      <name>thePoints</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a97a436f7288964a2f7cb84ce3d056350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa17b6400fe3b3ee95a5a7a670f17ae83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_pts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4bf36c30c1a49faf23c878cd253ae868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNpointArray</type>
      <name>pts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a162583a33b71ec98ebc29a51fa594fba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNkd_leaf</name>
    <filename>a00013.html</filename>
    <base>ANNkd_node</base>
    <member kind="function">
      <type></type>
      <name>ANNkd_leaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a2513d2985690e26f172ceba59e322000</anchor>
      <arglist>(int n, ANNidxArray b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNkd_leaf</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a82b27c86f7e8a6f3463a43ac0abc8f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStats</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a27557f4787ce323b217d9beb5682a398</anchor>
      <arglist>(int dim, ANNkdStats &amp;st, ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a09e1e8657d4c1ec36d95d267ec1cc4f8</anchor>
      <arglist>(int level, ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3a6befdd493ce50335e3628990ab8761</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_search</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a13d55cd2d91f633d3d7399b99957c7bc</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_pri_search</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aba79385b2679ff780852aa7c94bdc824</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_FR_search</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a044c215180c49ee7d8a1b179dd634c49</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n_pts</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a307ffe37115741d22daf9f16a0987e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNidxArray</type>
      <name>bkt</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a2bc1d4e300394495f80a61a50661b9f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNkd_node</name>
    <filename>a00014.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ann_search</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a54c5e89ee9037207e715d66b5554b47a</anchor>
      <arglist>(ANNdist)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ann_pri_search</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a4241fcc04521c2b43aaa0c9069ec01a6</anchor>
      <arglist>(ANNdist)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ann_FR_search</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a11fe71e8339a86a149ab556586777f86</anchor>
      <arglist>(ANNdist)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getStats</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8e18026bd3a10d3b2fed0f8dbbfd1bcf</anchor>
      <arglist>(int dim, ANNkdStats &amp;st, ANNorthRect &amp;bnd_box)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ab76fe2fbdfa4affa3ffce96675a1c887</anchor>
      <arglist>(int level, ostream &amp;out)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a10845c3a2512d3e0ecbba6fd3af62350</anchor>
      <arglist>(ostream &amp;out)=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ANNkd_tree</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>afdac734f21b6c8d14f49d59f374f872e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNkd_split</name>
    <filename>a00015.html</filename>
    <base>ANNkd_node</base>
    <member kind="function">
      <type></type>
      <name>ANNkd_split</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a20032632ce21c3574dadfef039dd6c30</anchor>
      <arglist>(int cd, ANNcoord cv, ANNcoord lv, ANNcoord hv, ANNkd_ptr lc=NULL, ANNkd_ptr hc=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNkd_split</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4038876ab034461f5eb766f9c3ebf5a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStats</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4befafed1d673e4882ae9b03d75b89d6</anchor>
      <arglist>(int dim, ANNkdStats &amp;st, ANNorthRect &amp;bnd_box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9f5fe9eb74ee0fc3f8cb337fb22ba888</anchor>
      <arglist>(int level, ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aff4d64cf3125c6a5e3a9f62a211e5f5b</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_search</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4c2010a54f354a4705aba48e39139932</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_pri_search</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5f7e86bcfb277cd9735c30a35dff3bd8</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ann_FR_search</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a913f1e47949c47e70893c3d8f2308a6c</anchor>
      <arglist>(ANNdist)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>cut_dim</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a85362ffdd4e4df2b0ccc366a9dc12457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNcoord</type>
      <name>cut_val</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adb0cdab0c058619602f9324d404cf337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNcoord</type>
      <name>cd_bnds</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad3daeeeedf0c611720cdbff42ffa798f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ANNkd_ptr</type>
      <name>child</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5d88db36ab0a9fbe5efce5a8890f3685</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNkd_tree</name>
    <filename>a00016.html</filename>
    <base>ANNpointSet</base>
  </compound>
  <compound kind="class">
    <name>ANNkdStats</name>
    <filename>a00017.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7ebff910ff7fa893e8528989b0091b11</anchor>
      <arglist>(int d=0, int n=0, int bs=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNkdStats</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abe2d418f36b4c0df3c35537f5c6ea83b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abec3668063ce9eebd2e134e665abe290</anchor>
      <arglist>(const ANNkdStats &amp;st)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2077dca3152bf466206e579633552631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_pts</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4b4b906e4f960004fa059eb15be9fa42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bkt_size</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>afa6109669ead4a488861b85bbb5a1298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_lf</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a27d983ec07e7e961d61fd26db4a0b84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_tl</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a66fecafc9fc96b70b454504accbeaff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_spl</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa8163564d280c1ae86079aafd7954cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n_shr</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1c502a8489754676991facb606a649e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>depth</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>acc4bc70f06a2b1819668cc8f7295f1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>sum_ar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a943634a11b1d087a9165b12dd40c6b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>avg_ar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8563e16c4dcab2da8c873c9f609dfec1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNmin_k</name>
    <filename>a00018.html</filename>
    <class kind="struct">ANNmin_k::mk_node</class>
    <member kind="function">
      <type></type>
      <name>ANNmin_k</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ae60a1c172b6fea16e1f9c5c197bad776</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNmin_k</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a78ebcf0a92814c60f62c490e42fc9d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PQKkey</type>
      <name>ANNmin_key</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac0e8cd2e80832836567b343273c6ca38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PQKkey</type>
      <name>max_key</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a4b6a2185bf54f0516fd0631931a64e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PQKkey</type>
      <name>ith_smallest_key</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>afef9c9c95a7563b33d1c98bbcf359700</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>PQKinfo</type>
      <name>ith_smallest_info</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5afb7172ba783e16ff52a31b78000890</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa3143d11f9b71be93723f4775adb1a2f</anchor>
      <arglist>(PQKkey kv, PQKinfo inf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>k</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1f2f5b88a57d7b868ab63a45c745f265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac07beee6f18302edc35ffbb9515a6869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>mk_node *</type>
      <name>mk</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af8c9379a3ff2f0f4c9cc28a8cca49f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ANNmin_k::mk_node</name>
    <filename>a00170.html</filename>
    <member kind="variable">
      <type>PQKkey</type>
      <name>key</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aeb5a67eddffcfb350267436f3aa70c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQKinfo</type>
      <name>info</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>afe402f315aab9d022c2db6ba1bf39e43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNorthHalfSpace</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type></type>
      <name>ANNorthHalfSpace</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab3a59b8f671cfbfc2df2556561aa5f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNorthHalfSpace</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a0ac18c1b127c023629319e0286ed07c2</anchor>
      <arglist>(int cdd, ANNcoord cvv, int sdd)</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>in</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a3371f8d5df162ae6bdcc337a1f916a5b</anchor>
      <arglist>(ANNpoint q) const </arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>out</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a43889114febbc41859d5c44f2f220f7e</anchor>
      <arglist>(ANNpoint q) const </arglist>
    </member>
    <member kind="function">
      <type>ANNdist</type>
      <name>dist</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7d9c5dce86a7d5ec81d7c3743568eadf</anchor>
      <arglist>(ANNpoint q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerBound</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a15ede74d9dd72edba9f70813d16f8e8e</anchor>
      <arglist>(int d, ANNpoint p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperBound</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a5815d92d74139a858853a50fa2af916f</anchor>
      <arglist>(int d, ANNpoint p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>abd63063b5627aeb80428942438c653bc</anchor>
      <arglist>(ANNpoint &amp;q)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cd</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a67e9aeae5ad346ef5f60006c57f2e5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNcoord</type>
      <name>cv</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ae82db8d5c6e7a811fd4f3d9cf62fa5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sd</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6c82e0ac63314e6051cd0117da94b553</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNorthRect</name>
    <filename>a00020.html</filename>
    <member kind="function">
      <type></type>
      <name>ANNorthRect</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac86848d598da232b8bb8090bd0031709</anchor>
      <arglist>(int dd, ANNcoord l=0, ANNcoord h=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNorthRect</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a72c07c1a8c6e0678beda1c5c4c6181ce</anchor>
      <arglist>(int dd, const ANNorthRect &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNorthRect</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7613b1a0dde31435d04c2003eac0cb3c</anchor>
      <arglist>(int dd, ANNpoint l, ANNpoint h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNorthRect</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad742c51c91601dbf517a0e59356e96b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>inside</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a11201db5ee69e87633d5a6e38ef60111</anchor>
      <arglist>(int dim, ANNpoint p)</arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>lo</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af8c0d718f4c7b98b2e437235da2c9de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ANNpoint</type>
      <name>hi</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4183b43fb488ab030f6f5ed2e81e3578</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNpointSet</name>
    <filename>a00021.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>annkSearch</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>acbbdd0587a0bcd655a1b8d353fde0800</anchor>
      <arglist>(ANNpoint q, int k, ANNidxArray nn_idx, ANNdistArray dd, double eps=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>annkFRSearch</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aab83304c25c29458433b06457a5eb944</anchor>
      <arglist>(ANNpoint q, ANNdist sqRad, int k=0, ANNidxArray nn_idx=NULL, ANNdistArray dd=NULL, double eps=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>theDim</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af5c31c17581ec593d31ceeb12adb1728</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>nPoints</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a15b2fefca5fecd901ac637dfad13251b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ANNpointArray</type>
      <name>thePoints</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab791b3d9247afc32521ddcb61f27f6a2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNpr_queue</name>
    <filename>a00022.html</filename>
    <class kind="struct">ANNpr_queue::pq_node</class>
    <member kind="function">
      <type></type>
      <name>ANNpr_queue</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a796142149290820b2e3f54f9da927059</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ANNpr_queue</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a04cb7e4585b6ab68693eb0c2dd2d9e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>empty</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a82924b7522162467cd0251ce128947c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ANNbool</type>
      <name>non_empty</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2ae6efba5c56255cfba2b256c7620f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aeee23855dc7d85497315316469fff47a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ace0ac53aabbcaba22d209e3e1d987db6</anchor>
      <arglist>(PQkey kv, PQinfo inf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extr_min</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a9d03698bdbe68ac6245edf74952958e4</anchor>
      <arglist>(PQkey &amp;kv, PQinfo &amp;inf)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aa0fad9a0df1cfb72f4cf85217dfe6742</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7938a5f4f4e59fa8188409750e739fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pq_node *</type>
      <name>pq</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a253013fd1d0d6eee66d47bc14959abbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ANNpr_queue::pq_node</name>
    <filename>a00183.html</filename>
    <member kind="variable">
      <type>PQkey</type>
      <name>key</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a320dd10cf722157d3b335f84807a7bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PQinfo</type>
      <name>info</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a2d68afd877b07688ca0d92a458089f59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ANNsampStat</name>
    <filename>a00023.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3bd02812439e763a28a538554c5cbc41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ANNsampStat</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a9f19db1ce9dfe4c28e24aa5165948254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a2213787291e70f24c873e2483c3ea0da</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>samples</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4ba7393a26ec5760b4e5efbc2fd6cf50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a160bb296a7529384af88731b45b2cfcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stdDev</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa5f55b125a8f8b510ede9b92d394ff71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a6b9978f9a76c46b3b0794e5887eb6cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ad42511f02ba75bc3c1021724ba11d2ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>n</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a214c592fbbdf98714583c74501b8a637</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>sum</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a41c4fd9c20bb36f3ce57fd00e517d1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>sum2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7270d792a062a06dea51370f51b074f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>minVal</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab2872786f4a4d6a38ebfb9586abe9147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>maxVal</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa7a6f8d44ecd769972ca3f2ba99cc3ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RngBoost</name>
    <filename>a00187.html</filename>
  </compound>
  <compound kind="class">
    <name>RngGsl</name>
    <filename>a00189.html</filename>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>a00650.html</filename>
    <namespace>boost::program_options</namespace>
  </compound>
  <compound kind="namespace">
    <name>boost::program_options</name>
    <filename>a00651.html</filename>
  </compound>
  <compound kind="namespace">
    <name>QUESO</name>
    <filename>a00652.html</filename>
    <class kind="class">QUESO::ArrayOfSequences</class>
    <class kind="class">QUESO::BoxSubset</class>
    <class kind="class">QUESO::ConcatenationSubset</class>
    <class kind="class">QUESO::ConstantScalarFunction</class>
    <class kind="class">QUESO::ConstantVectorFunction</class>
    <class kind="class">QUESO::DiscreteSubset</class>
    <class kind="class">QUESO::GenericScalarFunction</class>
    <class kind="class">QUESO::GenericVectorFunction</class>
    <class kind="class">QUESO::IntersectionSubset</class>
    <class kind="class">QUESO::BaseScalarFunction</class>
    <class kind="class">QUESO::ScalarFunctionSynchronizer</class>
    <class kind="class">QUESO::ScalarSequence</class>
    <class kind="class">QUESO::SequenceOfVectors</class>
    <class kind="class">QUESO::BaseVectorFunction</class>
    <class kind="class">QUESO::VectorFunctionSynchronizer</class>
    <class kind="class">QUESO::BaseVectorSequence</class>
    <class kind="class">QUESO::VectorSpace</class>
    <class kind="class">QUESO::VectorSet</class>
    <class kind="class">QUESO::VectorSubset</class>
    <class kind="class">QUESO::BaseInputOptionsParser</class>
    <class kind="class">QUESO::BasicPdfsBase</class>
    <class kind="class">QUESO::BasicPdfsBoost</class>
    <class kind="class">QUESO::BasicPdfsGsl</class>
    <class kind="class">QUESO::BoostInputOptionsParser</class>
    <class kind="class">QUESO::DistArray</class>
    <class kind="struct">QUESO::FilePtrSetStruct</class>
    <class kind="class">QUESO::BaseEnvironment</class>
    <class kind="class">QUESO::EmptyEnvironment</class>
    <class kind="class">QUESO::FullEnvironment</class>
    <class kind="class">QUESO::EnvOptionsValues</class>
    <class kind="class">QUESO::EnvironmentOptions</class>
    <class kind="class">QUESO::LogicError</class>
    <class kind="class">QUESO::NotImplemented</class>
    <class kind="class">QUESO::FileError</class>
    <class kind="class">QUESO::FunctionBase</class>
    <class kind="class">QUESO::FunctionOperatorBuilder</class>
    <class kind="class">QUESO::GslBlockMatrix</class>
    <class kind="class">QUESO::GslMatrix</class>
    <class kind="class">QUESO::GslOptimizer</class>
    <class kind="class">QUESO::GslVector</class>
    <class kind="class">QUESO::InfiniteDimensionalGaussian</class>
    <class kind="class">QUESO::InfiniteDimensionalLikelihoodBase</class>
    <class kind="class">QUESO::InfiniteDimensionalMCMCSamplerOptions</class>
    <class kind="class">QUESO::InfiniteDimensionalMeasureBase</class>
    <class kind="class">QUESO::Map</class>
    <class kind="class">QUESO::Matrix</class>
    <class kind="struct">QUESO::data_type</class>
    <class kind="class">QUESO::DataType</class>
    <class kind="class">QUESO::StandardType</class>
    <class kind="class">QUESO::MpiComm</class>
    <class kind="class">QUESO::OperatorBase</class>
    <class kind="class">QUESO::BaseOptimizer</class>
    <class kind="class">QUESO::OptimizerMonitor</class>
    <class kind="class">QUESO::RngBase</class>
    <class kind="class">QUESO::RngBoost</class>
    <class kind="class">QUESO::RngGsl</class>
    <class kind="class">QUESO::Vector</class>
    <class kind="class">QUESO::ExperimentModel</class>
    <class kind="class">QUESO::EmOptionsValues</class>
    <class kind="class">QUESO::ExperimentModelOptions</class>
    <class kind="class">QUESO::ExperimentStorage</class>
    <class kind="class">QUESO::GcmExperimentInfo</class>
    <class kind="class">QUESO::GcmJointInfo</class>
    <class kind="class">QUESO::GcmJointTildeInfo</class>
    <class kind="class">QUESO::GcmSimulationInfo</class>
    <class kind="class">QUESO::GcmSimulationTildeInfo</class>
    <class kind="class">QUESO::GcmTotalInfo</class>
    <class kind="class">QUESO::GcmZInfo</class>
    <class kind="class">QUESO::GcmZTildeInfo</class>
    <class kind="class">QUESO::GPMSAEmulator</class>
    <class kind="class">QUESO::GPMSAFactory</class>
    <class kind="class">QUESO::GpmsaComputerModel</class>
    <class kind="class">QUESO::GcmOptionsValues</class>
    <class kind="class">QUESO::GpmsaComputerModelOptions</class>
    <class kind="class">QUESO::GPMSAOptions</class>
    <class kind="class">QUESO::SimulationModel</class>
    <class kind="class">QUESO::SmOptionsValues</class>
    <class kind="class">QUESO::SimulationModelOptions</class>
    <class kind="class">QUESO::SimulationStorage</class>
    <class kind="class">QUESO::Base1D1DFunction</class>
    <class kind="class">QUESO::Generic1D1DFunction</class>
    <class kind="class">QUESO::Constant1D1DFunction</class>
    <class kind="class">QUESO::Linear1D1DFunction</class>
    <class kind="class">QUESO::PiecewiseLinear1D1DFunction</class>
    <class kind="class">QUESO::Quadratic1D1DFunction</class>
    <class kind="class">QUESO::Sampled1D1DFunction</class>
    <class kind="class">QUESO::ScalarTimesFunc1D1DFunction</class>
    <class kind="class">QUESO::FuncTimesFunc1D1DFunction</class>
    <class kind="class">QUESO::FuncPlusFunc1D1DFunction</class>
    <class kind="class">QUESO::LagrangePolynomial1D1DFunction</class>
    <class kind="class">QUESO::LagrangeBasis1D1DFunction</class>
    <class kind="class">QUESO::Base1DQuadrature</class>
    <class kind="class">QUESO::Generic1DQuadrature</class>
    <class kind="class">QUESO::UniformLegendre1DQuadrature</class>
    <class kind="class">QUESO::GaussianHermite1DQuadrature</class>
    <class kind="class">QUESO::WignerInverseChebyshev1st1DQuadrature</class>
    <class kind="class">QUESO::WignerChebyshev2nd1DQuadrature</class>
    <class kind="class">QUESO::TwoDArray</class>
    <class kind="class">QUESO::ArrayOfOneDGrids</class>
    <class kind="class">QUESO::ArrayOfOneDTables</class>
    <class kind="class">QUESO::AsciiTable</class>
    <class kind="class">QUESO::Fft</class>
    <class kind="class">QUESO::BaseOneDGrid</class>
    <class kind="class">QUESO::StdOneDGrid</class>
    <class kind="class">QUESO::StreamUtilities</class>
    <class kind="class">QUESO::UniformOneDGrid</class>
    <class kind="class">QUESO::BayesianJointPdf</class>
    <class kind="class">QUESO::BetaJointPdf</class>
    <class kind="class">QUESO::BetaVectorRealizer</class>
    <class kind="class">QUESO::BetaVectorRV</class>
    <class kind="class">QUESO::ConcatenatedJointPdf</class>
    <class kind="class">QUESO::ConcatenatedVectorRealizer</class>
    <class kind="class">QUESO::ConcatenatedVectorRV</class>
    <class kind="class">QUESO::ExponentialMatrixCovarianceFunction</class>
    <class kind="class">QUESO::ExponentialScalarCovarianceFunction</class>
    <class kind="class">QUESO::FiniteDistribution</class>
    <class kind="class">QUESO::GammaJointPdf</class>
    <class kind="class">QUESO::GammaVectorRealizer</class>
    <class kind="class">QUESO::GammaVectorRV</class>
    <class kind="class">QUESO::GaussianJointPdf</class>
    <class kind="class">QUESO::BaseGaussianLikelihood</class>
    <class kind="class">QUESO::GaussianLikelihoodBlockDiagonalCovariance</class>
    <class kind="class">QUESO::GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients</class>
    <class kind="class">QUESO::GaussianLikelihoodDiagonalCovariance</class>
    <class kind="class">QUESO::GaussianLikelihoodFullCovariance</class>
    <class kind="class">QUESO::GaussianLikelihoodFullCovarianceRandomCoefficient</class>
    <class kind="class">QUESO::GaussianLikelihoodScalarCovariance</class>
    <class kind="class">QUESO::GaussianVectorCdf</class>
    <class kind="class">QUESO::GaussianVectorMdf</class>
    <class kind="class">QUESO::GaussianVectorRealizer</class>
    <class kind="class">QUESO::GaussianVectorRV</class>
    <class kind="class">QUESO::GenericJointPdf</class>
    <class kind="class">QUESO::GenericMatrixCovarianceFunction</class>
    <class kind="class">QUESO::GenericScalarCovarianceFunction</class>
    <class kind="class">QUESO::GenericVectorCdf</class>
    <class kind="class">QUESO::GenericVectorMdf</class>
    <class kind="class">QUESO::GenericVectorRealizer</class>
    <class kind="class">QUESO::GenericVectorRV</class>
    <class kind="class">QUESO::HessianCovMatricesTKGroup</class>
    <class kind="class">QUESO::InverseGammaJointPdf</class>
    <class kind="class">QUESO::InverseGammaVectorRealizer</class>
    <class kind="class">QUESO::InverseGammaVectorRV</class>
    <class kind="class">QUESO::InvLogitGaussianJointPdf</class>
    <class kind="class">QUESO::InvLogitGaussianVectorRealizer</class>
    <class kind="class">QUESO::InvLogitGaussianVectorRV</class>
    <class kind="class">QUESO::JeffreysJointPdf</class>
    <class kind="class">QUESO::JeffreysVectorRealizer</class>
    <class kind="class">QUESO::JeffreysVectorRV</class>
    <class kind="class">QUESO::BaseJointPdf</class>
    <class kind="class">QUESO::LogNormalJointPdf</class>
    <class kind="class">QUESO::LogNormalVectorRealizer</class>
    <class kind="class">QUESO::LogNormalVectorRV</class>
    <class kind="class">QUESO::MarkovChainPositionData</class>
    <class kind="class">QUESO::BaseMatrixCovarianceFunction</class>
    <class kind="struct">QUESO::MHRawChainInfoStruct</class>
    <class kind="class">QUESO::MetropolisHastingsSG</class>
    <class kind="class">QUESO::MhOptionsValues</class>
    <class kind="class">QUESO::MetropolisHastingsSGOptions</class>
    <class kind="struct">QUESO::ExchangeInfoStruct</class>
    <class kind="struct">QUESO::BalancedLinkedChainControlStruct</class>
    <class kind="struct">QUESO::BalancedLinkedChainsPerNodeStruct</class>
    <class kind="struct">QUESO::UnbalancedLinkedChainControlStruct</class>
    <class kind="struct">QUESO::UnbalancedLinkedChainsPerNodeStruct</class>
    <class kind="class">QUESO::MLSampling</class>
    <class kind="class">QUESO::MLSamplingLevelOptions</class>
    <class kind="class">QUESO::MLSamplingOptions</class>
    <class kind="class">QUESO::ModelValidation</class>
    <class kind="class">QUESO::MonteCarloSG</class>
    <class kind="class">QUESO::McOptionsValues</class>
    <class kind="class">QUESO::MonteCarloSGOptions</class>
    <class kind="class">QUESO::PoweredJointPdf</class>
    <class kind="class">QUESO::SampledScalarCdf</class>
    <class kind="class">QUESO::SampledVectorCdf</class>
    <class kind="class">QUESO::SampledVectorMdf</class>
    <class kind="class">QUESO::BaseScalarCdf</class>
    <class kind="class">QUESO::BaseScalarCovarianceFunction</class>
    <class kind="class">QUESO::ScalarGaussianRandomField</class>
    <class kind="class">QUESO::ScaledCovMatrixTKGroup</class>
    <class kind="class">QUESO::SequentialVectorRealizer</class>
    <class kind="class">QUESO::StatisticalForwardProblem</class>
    <class kind="class">QUESO::SfpOptionsValues</class>
    <class kind="class">QUESO::StatisticalForwardProblemOptions</class>
    <class kind="class">QUESO::StatisticalInverseProblem</class>
    <class kind="class">QUESO::SipOptionsValues</class>
    <class kind="class">QUESO::StatisticalInverseProblemOptions</class>
    <class kind="class">QUESO::StdScalarCdf</class>
    <class kind="class">QUESO::BaseTKGroup</class>
    <class kind="class">QUESO::TransformedScaledCovMatrixTKGroup</class>
    <class kind="class">QUESO::UniformJointPdf</class>
    <class kind="class">QUESO::UniformVectorRealizer</class>
    <class kind="class">QUESO::UniformVectorRV</class>
    <class kind="class">QUESO::ValidationCycle</class>
    <class kind="class">QUESO::BaseVectorCdf</class>
    <class kind="class">QUESO::VectorGaussianRandomField</class>
    <class kind="class">QUESO::BaseVectorMdf</class>
    <class kind="class">QUESO::BaseVectorRealizer</class>
    <class kind="class">QUESO::BaseVectorRV</class>
    <class kind="class">QUESO::WignerJointPdf</class>
    <class kind="class">QUESO::WignerVectorRealizer</class>
    <class kind="class">QUESO::WignerVectorRV</class>
    <class kind="class">QUESO::InterpolationSurrogateData</class>
    <class kind="class">QUESO::InterpolationSurrogateBase</class>
    <class kind="class">QUESO::InterpolationSurrogateBuilder</class>
    <class kind="class">QUESO::InterpolationSurrogateDataSet</class>
    <class kind="class">QUESO::InterpolationSurrogateHelper</class>
    <class kind="class">QUESO::InterpolationSurrogateIOASCII</class>
    <class kind="class">QUESO::InterpolationSurrogateIOBase</class>
    <class kind="class">QUESO::LinearLagrangeInterpolationSurrogate</class>
    <class kind="class">QUESO::SurrogateBase</class>
    <class kind="class">QUESO::SurrogateBuilderBase</class>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Comm</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa3aeb31f2c1693b8f0d9403675d5b805</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Group</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab0b3b3f6c0a21b084ea4e021bf96429e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Datatype</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a974e147ad875ce654b48aade7a1c39de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Op</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a75bb589f75213c4ff7d02a6b7da5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>RawType_MPI_Status</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a89d6670b5a300a7fbbab7c0839c1534c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VectorSet&lt; V, M &gt; *</type>
      <name>InstantiateIntersection</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa79046437ab085c5487ae16e9a0baeec</anchor>
      <arglist>(const VectorSet&lt; V, M &gt; &amp;domain1, const VectorSet&lt; V, M &gt; &amp;domain2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeSubGaussian2dKde</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af865210b84a63c53796aff42989c4af7</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double scaleValue1, double scaleValue2, const std::vector&lt; T &gt; &amp;evaluationPositions1, const std::vector&lt; T &gt; &amp;evaluationPositions2, std::vector&lt; double &gt; &amp;densityValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeUnifiedGaussian2dKde</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af7a1e5f83b5acc46b51bc87eb3dc9b28</anchor>
      <arglist>(bool useOnlyInter0Comm, const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double unifiedScaleValue1, double unifiedScaleValue2, const std::vector&lt; T &gt; &amp;unifiedEvaluationPositions1, const std::vector&lt; T &gt; &amp;unifiedEvaluationPositions2, std::vector&lt; double &gt; &amp;unifiedDensityValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrBetweenScalarSequences</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>add6823a7271447445f532bf5ce73e9b8</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;subPSeq, const ScalarSequence&lt; T &gt; &amp;subQSeq, unsigned int subNumSamples, T &amp;covValue, T &amp;corrValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrMatricesBetweenVectorSequences</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae194d12af9b08b130faf542b9b9ffe9b</anchor>
      <arglist>(const BaseVectorSequence&lt; P_V, P_M &gt; &amp;subPSeq, const BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;subQSeq, unsigned int subNumSamples, P_M &amp;pqCovMatrix, P_M &amp;pqCorrMatrix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyWorldfullRank</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5af97e1f9320b7787efc744ef76be297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queso_terminate_handler</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a97e263e01a0ff9fad14de6a8840b007e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>QUESO_version_print</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae2e4805bfcc226b2ceb17c8a8dbb1297</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>QUESO_get_numeric_version</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a61ed284ac8a5002856025bf21955b215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae007c2d003b9f75b31b073ececd3120a</anchor>
      <arglist>(std::ostream &amp;os, const BaseEnvironment &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a19108ba91686fa96e00f6f47bed7c67f</anchor>
      <arglist>(std::ostream &amp;os, const EnvironmentOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aee9cd88f39e5f81acf1cbc121a2d85f9</anchor>
      <arglist>(std::ostream &amp;os, const GslBlockMatrix &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1fa0d79f37a4fccc4c307456d29c4bfa</anchor>
      <arglist>(double a, const GslMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a87c02837d212969d66ae52ac73d0e301</anchor>
      <arglist>(const GslMatrix &amp;mat, const GslVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a511d0179f61e084b7574c97affcbd723</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator+</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a299d5db0d04a1d1a943b292585d01ad9</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>operator-</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a07502ec763e41daf33325dfbda9b0102</anchor>
      <arglist>(const GslMatrix &amp;m1, const GslMatrix &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>matrixProduct</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aea04e232d5d3dd76349a85bb8acf9e17</anchor>
      <arglist>(const GslVector &amp;v1, const GslVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>leftDiagScaling</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0d18267f571a86516c0d9960b1a0f1c9</anchor>
      <arglist>(const GslVector &amp;vec, const GslMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>rightDiagScaling</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2c87d8c1ab55355226086522f9fb7f83</anchor>
      <arglist>(const GslMatrix &amp;mat, const GslVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>acf137d0e0d62509c7abc70f1f0f799ef</anchor>
      <arglist>(std::ostream &amp;os, const GslMatrix &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator/</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a583c7692c136ba44beb81f031d8d55fc</anchor>
      <arglist>(double a, const GslVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator/</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac34d69017fbfb253ed76d20ef53c6f81</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac6209b9b8dde0c23a8d7a239eabcc6b5</anchor>
      <arglist>(double a, const GslVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator*</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>adc8f40b553602f8f0e9668d30af42ebe</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scalarProduct</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a159769395a413f58b974587d5f43bbc7</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator+</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4b74ebe52de00d2ea6affde322a158bc</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>operator-</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae873227c9725013266467750e1fbad72</anchor>
      <arglist>(const GslVector &amp;x, const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a18841f416975b3d80dfefa99a9ad0c15</anchor>
      <arglist>(const GslVector &amp;lhs, const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a25bb97988816bba6f17d35884da60512</anchor>
      <arglist>(std::ostream &amp;os, const GslVector &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a6d2735a4b1afcd970c75c1cf1d1719a5</anchor>
      <arglist>(char, MPI_CHAR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa1aad530c6c4930aa2dcfe769555b5bd</anchor>
      <arglist>(int, MPI_INT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae9b7a00f87ad6c515b815d4ca9711b2d</anchor>
      <arglist>(unsigned int, MPI_UNSIGNED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STANDARD_TYPE</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa27d0db158322d9d2e37440ff4b201f2</anchor>
      <arglist>(double, MPI_DOUBLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::vector&lt; double, std::allocator&lt; double &gt; &gt; &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa1384304b07b9fbc90cc872548b28fa3</anchor>
      <arglist>(std::string &amp;name, std::vector&lt; double, std::allocator&lt; double &gt; &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5b797675e032523d9a3b0c522cd1dd7f</anchor>
      <arglist>(std::ostream &amp;os, const BoostInputOptionsParser &amp;parser)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::registerOption&lt; std::string &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a044ed57198a1b71d1784755667e912dc</anchor>
      <arglist>(std::string, std::string, std::string)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::string &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1ba0c5d92f78e2c7327c2ef47175695c</anchor>
      <arglist>(std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>BoostInputOptionsParser::getOption&lt; std::vector&lt; unsigned int, std::allocator&lt; unsigned int &gt; &gt; &gt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9ab8dd79e1b1e7ed8ed2e5c9e92b41a6</anchor>
      <arglist>(std::string &amp;, std::vector&lt; unsigned int, std::allocator&lt; unsigned int &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9be40334de3ec5c8894bbe0780bf954c</anchor>
      <arglist>(std::ostream &amp;os, const EnvOptionsValues &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>c_evaluate</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a41729b1987bfaf3172e9ea79913876dd</anchor>
      <arglist>(const gsl_vector *x, void *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>c_evaluate_derivative</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9e69e6940dbc0ea35bbb5eb085163177</anchor>
      <arglist>(const gsl_vector *x, void *context, gsl_vector *derivative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>c_evaluate_with_derivative</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aadca5d879e57d8f597a440c33950256e</anchor>
      <arglist>(const gsl_vector *x, void *context, double *f, gsl_vector *derivative)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad119a84a6c4ad9039abb1ac87fa0583f</anchor>
      <arglist>(std::ostream &amp;os, const InfiniteDimensionalMCMCSamplerOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8fd1509f4bb4b47bf494146cf6a63443</anchor>
      <arglist>(std::ostream &amp;os, const ExperimentModelOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2a37574e418c22634c66f8aaa4a54c0a</anchor>
      <arglist>(std::ostream &amp;os, const GpmsaComputerModelOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5ba220a2c0a3088e2f591da19eed3cfa</anchor>
      <arglist>(std::ostream &amp;os, const SimulationModelOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad2cbfecce51160c3b71e4f14611201ef</anchor>
      <arglist>(std::ostream &amp;os, const GPMSAOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>SubF1F2Gaussian2dKdeIntegral</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8c82b1fac926f75ad3e18cbd2d6a1b9d</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;scalarSeq1, const ScalarSequence&lt; T &gt; &amp;scalarSeq2, unsigned int initialPos, double scaleValue1, double scaleValue2, const Base1D1DFunction &amp;func1, const Base1D1DFunction &amp;func2, unsigned int quadratureOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CovCond</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1f8ccd7acd730666bd114f1f3ed33f82</anchor>
      <arglist>(double condNumber, const V &amp;direction, M &amp;covMatrix, M &amp;precMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscReadDoublesFromString</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac3fab438679d1dc864f8d629881dad2e</anchor>
      <arglist>(const std::string &amp;inputString, std::vector&lt; double &gt; &amp;outputDoubles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscReadWordsFromString</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a9e0f636bad9d30e3d0fa1589a61d0567</anchor>
      <arglist>(const std::string &amp;inputString, std::vector&lt; std::string &gt; &amp;outputWords)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscReadStringAndDoubleFromFile</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>af0fc61c58d0ca592fa172eeab540d39c</anchor>
      <arglist>(std::ifstream &amp;ifs, std::string &amp;termString, double *termValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscReadCharsAndDoubleFromFile</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a575d3153d82b7df3d78ad5cfbf2b83b7</anchor>
      <arglist>(std::ifstream &amp;ifs, std::string &amp;termString, double *termValue, bool &amp;endOfLineAchieved)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGammar</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4f268914e653262df98af86aeb33285f</anchor>
      <arglist>(double a, double b, const RngBase *rngObject)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGetEllapsedSeconds</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a424bc33f2e6e287fd468408d14b772ee</anchor>
      <arglist>(struct timeval *timeval0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscHammingWindow</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a48c1ad47c8bebad572842726591e9d3f</anchor>
      <arglist>(unsigned int N, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscGaussianDensity</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0f94e9b1e8f415c389f180d4a75c5591</anchor>
      <arglist>(double x, double mu, double sigma)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>MiscUintDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a2f606febc1ff24dc4b427c68b4bb845e</anchor>
      <arglist>(unsigned int value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MiscIntDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae9763e7b3ff5f5e2a19bb440f7b7bb4e</anchor>
      <arglist>(int value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>MiscDoubleDebugMessage</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a976de592e2133af50b80f6aad1352165</anchor>
      <arglist>(double value, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CheckFilePath</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>abc55c11f68bb99c4eba88030f1164764</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GRVY_CheckDir</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a56d7533d2177cf02d3fd761f7a22a873</anchor>
      <arglist>(const char *dirname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>MiscCheckForSameValueInAllNodes</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4166a375c5adbea35afaaf20775bc519</anchor>
      <arglist>(T &amp;inputValue, double acceptableTreshold, const MpiComm &amp;comm, const char *whereString)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscComputePositionsBetweenMinMax</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a3a6b46538ead03c47f13e60542608e34</anchor>
      <arglist>(V minValues, V maxValues, std::vector&lt; V * &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MiscCheckTheParallelEnvironment</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a57ad15be98b39ff64e0719305c639c75</anchor>
      <arglist>(const V1 &amp;vec1, const V2 &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a741c4181f77af64b1e82cdce4d203cfa</anchor>
      <arglist>(std::ostream &amp;os, const ArrayOfOneDTables&lt; V, M &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>abd30e6a15a8d9117611fddd7d06c3eed</anchor>
      <arglist>(std::ostream &amp;os, const AsciiTable&lt; V, M &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeConditionalGaussianVectorRV</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad6d1e060295dcebaf3253c342c2a8746</anchor>
      <arglist>(const V &amp;muVec1, const V &amp;muVec2, const M &amp;sigmaMat11, const M &amp;sigmaMat12, const M &amp;sigmaMat21, const M &amp;sigmaMat22, const V &amp;sampleVec2, V &amp;muVec1_cond_on_2, M &amp;sigmaMat11_cond_on_2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab4def712856f22b50e34d21ef9093ac1</anchor>
      <arglist>(std::ostream &amp;os, const MetropolisHastingsSGOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a1e37d289bad8dc2aa2600ea78d1a6d9f</anchor>
      <arglist>(std::ostream &amp;os, const MonteCarloSGOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>horizontalDistance</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a389e9373827829b35f2bf36df32d0ef1</anchor>
      <arglist>(const BaseScalarCdf&lt; T &gt; &amp;cdf1, const BaseScalarCdf&lt; T &gt; &amp;cdf2, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a185311186813492aebbb75fdf9943611</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalForwardProblemOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a408c51750e38ef3c04031a801f572e8b</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalInverseProblemOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>horizontalDistances</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa34cd1eb7f035b5e6f8d8c090f02d65f</anchor>
      <arglist>(const BaseVectorCdf&lt; V, M &gt; &amp;cdf1, const BaseVectorCdf&lt; V, M &gt; &amp;cdf2, const V &amp;epsilonVec, V &amp;distances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComputeCovCorrMatricesBetweenVectorRvs</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a4b9472b3a017ccaffbea8cc69b96afac</anchor>
      <arglist>(const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, const BaseVectorRV&lt; Q_V, Q_M &gt; &amp;qoiRv, unsigned int localNumSamples, P_M &amp;pqCovMatrix, P_M &amp;pqCorrMatrix)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ad0f8ae88609dd887902228b90c6d93a9</anchor>
      <arglist>(std::ostream &amp;os, const MhOptionsValues &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8da6c5c5bdc3addfa97ccad5eebbfd7c</anchor>
      <arglist>(std::ostream &amp;os, const MLSampling&lt; P_V, P_M &gt; &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8cdcc176eced9c45125c485efae86591</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingLevelOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab426563b1a39f2f5c2196bb500e869b4</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingOptions &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aa362a9d6ffd4eaa8752ae4fb40126622</anchor>
      <arglist>(std::ostream &amp;os, const McOptionsValues &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a410f3b3b0461295df1db7ee6d68801f1</anchor>
      <arglist>(std::ostream &amp;os, const SfpOptionsValues &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae7c284129de1e1c899462f0125b25b85</anchor>
      <arglist>(std::ostream &amp;os, const SipOptionsValues &amp;obj)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_UNAVAILABLE_RANK</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7d4679800a430ae8e473c1c7bc0bfb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_OK_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a8e909502900aecf24cedba022ea84471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INCOMPLETE_IMPLEMENTATION_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a5332d3ac9b246e40779ba01f19a3f0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_PARAMETER_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a063c49e4743815cf95cde8425906b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_OBSERVABLE_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7184f2baf44df52d2c24409d9385c7b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_QOI_SPEC_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a62fa6d4e5314c2054707ab73c97204ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_INTERNAL_RESULT_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>afd6363699eae2710081ad1642a03131e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_INTERNAL_STATE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ae093c8262be9961cc7297a84347c0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_FAILED_TO_OPEN_FILE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>aaab9e69ed66f6902eb9b42879a52fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_MATRIX_IS_NOT_POS_DEFINITE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a677863cd32092584175760250f39e8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_FAILED_READING_FILE_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ab2cce05a6208cb239ef640a4ba6e5327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_INVALID_SPACE_COMPONENT_ID_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a0b5084868d81746fc7f2c0665b219812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UQ_MATRIX_SVD_FAILED_RC</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>a7502f36b36f6ba457d2cf5004f7a7c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::terminate_handler</type>
      <name>old_terminate_handler</name>
      <anchorfile>a00652.html</anchorfile>
      <anchor>ac54b755ffb94b8896563c43fec9a6a4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ArrayOfSequences</name>
    <filename>a00026.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorSequence</base>
    <member kind="function">
      <type></type>
      <name>ArrayOfSequences</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8b4625170975168c1cb3ee34946e564b</anchor>
      <arglist>(const VectorSpace&lt; V, M &gt; &amp;vectorSpace, unsigned int subSequenceSize, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayOfSequences</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8632bf1a4b6cd4447694a7108a2689a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subSequenceSize</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a007d00d2398007b9bac82ed23eedb1e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeSequence</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a3067aa6afb3a4fd6f30dc753bbceaf9e</anchor>
      <arglist>(unsigned int newSubSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetValues</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9267060ca0e57a124d9f8ba64e60027c</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePositions</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a81f3ee91830b977945fa152901d4cd8e</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionValues</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae75a2eedab5e8d3fc0638f578eba35ab</anchor>
      <arglist>(unsigned int posId, V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionValues</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a20e1732527bc5c466abf79b827407d54</anchor>
      <arglist>(unsigned int posId, const V &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGaussian</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9168423928360ee9dd3d3521f5539892</anchor>
      <arglist>(const V &amp;meanVec, const V &amp;stdDevVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a478f81e5a47e06074577b46b2f8fdfd1</anchor>
      <arglist>(const V &amp;aVec, const V &amp;bVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mean</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae9d785ccc1cbf94447efd2dae6467c3d</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;meanVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedMean</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aff464566fefc76edb13ac6f6f8f2bd31</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMeanVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleVariance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a7bce5c84299185882c0bb7c6d61bce6d</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;samVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedSampleVariance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a51ad92656e8b2e437982660fabb67ba3</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;samVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>populationVariance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a5bde372f275a51cd25c883604586d6dd</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;popVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCovariance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ac6439fcb719bad4810cfe3c020f73486</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, unsigned int lag, V &amp;covVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaDef</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a057921bf605783c85def57f71cc2101e</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int lag, V &amp;corrVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aa0468a432b6ee77a810357d0ef3b8690</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::vector&lt; unsigned int &gt; &amp;lags, std::vector&lt; V * &gt; &amp;corrVecs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a078e43442f5b12f7a886ace29af0aec0</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int numSum, V &amp;autoCorrsSumVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minMax</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af318beb944a58dcb7b36a645f84edd3f</anchor>
      <arglist>(unsigned int initialPos, V &amp;minVec, V &amp;maxVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>histogram</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2beb77e521581b8c28d1fe0fe71018c6</anchor>
      <arglist>(unsigned int initialPos, const V &amp;minVec, const V &amp;maxVec, std::vector&lt; V * &gt; &amp;centersForAllBins, std::vector&lt; V * &gt; &amp;quanttsForAllBins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interQuantileRange</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6cd1021725aa1d7e50034f482904660a</anchor>
      <arglist>(unsigned int initialPos, V &amp;iqrs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalesForKDE</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae746fcec9567a5ef3c46f5559c90dee7</anchor>
      <arglist>(unsigned int initialPos, const V &amp;iqrs, unsigned int kdeDimension, V &amp;scales) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gaussianKDE</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ade11b2ce02c1b7501a1c465dcfe63a1d</anchor>
      <arglist>(const V &amp;evaluationParamVec, V &amp;densityVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gaussianKDE</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a221a49bf0e054276007dde487dbedfe6</anchor>
      <arglist>(unsigned int initialPos, const V &amp;scales, const std::vector&lt; V * &gt; &amp;evaluationParamVecs, std::vector&lt; V * &gt; &amp;densityVecs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeContents</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a4b1248fe9601ec598797071210760687</anchor>
      <arglist>(std::ofstream &amp;ofsvar) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedWriteContents</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a20727ea1cc87e2cf81802b7e07eae35f</anchor>
      <arglist>(std::ofstream &amp;ofsvar) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedWriteContents</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af4ab2f575230715be16fff5ae9bb4759</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedReadContents</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a3fbe0f679fa8828e27dadb89a9fe3eaa</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const unsigned int subSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a643996eaf9db7e40a423c06ae5cb881a</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;idsOfUniquePositions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a7c95d24764af395fdff5c9d0c987e694</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractScalarSeq</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab529b77aca8e169b1b769051e7de8c3d</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, ScalarSequence&lt; double &gt; &amp;scalarSeq) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorSequence</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a42a447ef253acf28ccb9a20706665b54</anchor>
      <arglist>(const VectorSpace&lt; V, M &gt; &amp;vectorSpace, unsigned int subSequenceSize, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorSequence</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2e86f2e6dc72338301fcc6898e6f87d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unifiedSequenceSize</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a188dc4632db5b93c01e8bc69bf631f4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vectorSizeLocal</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2fefedf9e5b90f22881103b3f92555f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>vectorSizeGlobal</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aac107ca7ba8ce666f8f994e8bbe922a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>vectorSpace</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af9a4dd979a2fa8dee85bb07793b59ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a48f6fe02cf77f4233d3bcdfef3870f19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0a2f78cd12e0f136f7801f7d0175b849</anchor>
      <arglist>(const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aae0804eacc51b37e84b1bd329ce1711c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>subMinPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a1b2c4cb7623e0034e4cd66f6443f2fdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedMinPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5d330cec5b2c7d9d7eb8079bed4a07ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>subMaxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a152da47e6633bcac5f32b588b98d6f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedMaxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a277e760600eb5aa64da9561634a19d63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>subMeanPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aba7a42fcab55a24264ff80e12d7da2de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedMeanPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a64ad551265df354e8c4ccff0d14cb883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>subMedianPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a679cf7f46c588ed4ba75beeb8fe8ae2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedMedianPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>acdb70319baecc3985e56b9e85502e3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>subSampleVariancePlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a9de650586582d258eb977444d83286a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedSampleVariancePlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a34a8b31757c6b728feefcf396d62c12f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>subBoxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5c5ede038fbdb296e3913bc39142b7ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>unifiedBoxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a69757707519d6d10b454c36ee624fecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteStoredVectors</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5609e02046ba555f0eebe49c6c231faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a50419477cd593478815aa52af58695a8</anchor>
      <arglist>(const BaseVectorSequence&lt; V, M &gt; &amp;src, unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>subPositionsOfMaximum</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a971e9e1a87e4eb47b4910348a6b437d5</anchor>
      <arglist>(const ScalarSequence&lt; double &gt; &amp;subCorrespondingScalarValues, BaseVectorSequence&lt; V, M &gt; &amp;subPositionsOfMaximum)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unifiedPositionsOfMaximum</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4269482101b2bcdb1975543f8191ab4c</anchor>
      <arglist>(const ScalarSequence&lt; double &gt; &amp;subCorrespondingScalarValues, BaseVectorSequence&lt; V, M &gt; &amp;unifiedPositionsOfMaximum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGaussian</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa1081248d23a2b18307962993892eb4c</anchor>
      <arglist>(const V &amp;meanVec, const V &amp;stdDevVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a96d44e7dd53a077a4c7be73f008b351e</anchor>
      <arglist>(const V &amp;aVec, const V &amp;bVec)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subMeanExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab36f3e2511108259c272d8a148452505</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;meanVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedMeanExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6ee252d07395644a9175aabf2bad7aed</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMeanVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subMedianExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a80caa77a7258c3ae44b6320846cfe29d</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;medianVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedMedianExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab3b300eb093fe8d726996db5726e59e4</anchor>
      <arglist>(unsigned int initialPos, unsigned int localNumPos, V &amp;unifiedMedianVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subSampleVarianceExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6a786862951dfae45a9daebc9d81e676</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;samVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedSampleVarianceExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>abc759076a4c5d9e1586a6d93629778ff</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;unifiedMeanVec, V &amp;unifiedSamVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subPopulationVariance</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af21f1923841372684ae9e5812767832d</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;popVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedPopulationVariance</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ad9e165f7a0d57e2fa45e7b3926dac1a2</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;unifiedMeanVec, V &amp;unifiedPopVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subMinMaxExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a14fd8d5c3ff3fb2f7eb3f4b9e7131d0c</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;minVec, V &amp;maxVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedMinMaxExtra</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2d6cd9b93580715762318b51edbd9463</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMinVec, V &amp;unifiedMaxVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subHistogram</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a66c6af1f9a509720264d121b408a45f3</anchor>
      <arglist>(unsigned int initialPos, const V &amp;minVec, const V &amp;maxVec, std::vector&lt; V * &gt; &amp;centersForAllBins, std::vector&lt; V * &gt; &amp;quanttsForAllBins) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedHistogram</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a04653bd3bd8b9c29ae6d03a2eb0b3779</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedMinVec, const V &amp;unifiedMaxVec, std::vector&lt; V * &gt; &amp;unifiedCentersForAllBins, std::vector&lt; V * &gt; &amp;unifiedQuanttsForAllBins) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subInterQuantileRange</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a62cb96f153a8608ef1727265a734aacb</anchor>
      <arglist>(unsigned int initialPos, V &amp;iqrVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedInterQuantileRange</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a49b50dfef9bf3475eb681855268c050d</anchor>
      <arglist>(unsigned int initialPos, V &amp;unifiedIqrVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subScalesForKde</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af3210c9073cedfcd8dfe79ed323975a2</anchor>
      <arglist>(unsigned int initialPos, const V &amp;iqrVec, unsigned int kdeDimension, V &amp;scaleVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedScalesForKde</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a68eae0b37fc934391ce7af2c370fd585</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedIqrVec, unsigned int kdeDimension, V &amp;unifiedScaleVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subGaussian1dKde</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0fec2746f326acad09b406ad8efe1cfc</anchor>
      <arglist>(unsigned int initialPos, const V &amp;scaleVec, const std::vector&lt; V * &gt; &amp;evaluationParamVecs, std::vector&lt; V * &gt; &amp;densityVecs) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedGaussian1dKde</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa799ae2fde5edc96939990925d7be9ac</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedScaleVec, const std::vector&lt; V * &gt; &amp;unifiedEvaluationParamVecs, std::vector&lt; V * &gt; &amp;unifiedDensityVecs) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subWriteContents</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa59738c6df15b1b369b90f0d025fb6f2</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subWriteContents</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a7226d1093a7ab07792410414237f08da</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, std::ofstream &amp;ofsvar, const std::string &amp;fileType) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFilterParams</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8e34f6205e26eab1e9cbe457dbd376bc</anchor>
      <arglist>(std::ofstream *passedOfs, unsigned int &amp;initialPos, unsigned int &amp;spacing)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>estimateConvBrooksGelman</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a7f70b1762b6ba91a8f619403453cf2b2</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos) const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractRawData</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a615df4add2396b94f5a4be3a5eb971fb</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, std::vector&lt; double &gt; &amp;rawData) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistArray&lt; ScalarSequence&lt; double &gt; * &gt;</type>
      <name>m_scalarSequences</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1f8047145ca75081c303bbbab5881119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a35629a6937e22752e3b252e84457e791</anchor>
      <arglist>(const BaseVectorSequence&lt; V, M &gt; &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8e8824d2a63c5a43bcc6473e3a0491e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_vectorSpace</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4bd171e39ed050ff105c808336f35198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3c379b2f7c20a2a1dd083ea43fca1494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Fft&lt; double &gt; *</type>
      <name>m_fftObj</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>add593820ac53e4adccb3002ba0becfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_subMinPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab4be9e46882547032a1b738b6fafc2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_unifiedMinPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8401f459127618bbdcb0826ddb69b550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_subMaxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a1f24826fd2ca206a6e2662ade55dc5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_unifiedMaxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5abbf8a1b56ffd00f00a065ff1af1e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_subMeanPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aea341eac0220157a44f373e1377e0ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_unifiedMeanPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0bb5f2fa3d8369412b8cf5f6795b95b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_subMedianPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a99ab57b8cb62b14eedd606b9d2e75672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_unifiedMedianPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ac723ac11f629ba07915f7520b36e4138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_subSampleVariancePlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a25dc9797633cb4b23b7330c5d3de9dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_unifiedSampleVariancePlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab6fa4daa233c386ea96718cf6cac603b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>m_subBoxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a8fa117289936a6b0cd83dd55aaf55047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>m_unifiedBoxPlain</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a13e15d877a0826605eb62fd65244761a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BoxSubset</name>
    <filename>a00057.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::VectorSubset</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ae5490757cf0504fbe31681bf0b291e93</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxSubset</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a87bd3b29193a18a68a7be3b9469491c0</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const V &amp;minValues, const V &amp;maxValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxSubset</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9e78b65ed80f2d11d1161a2fcfbb543d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a16fff2b1f133ddd750008680c6831dd0</anchor>
      <arglist>(const V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>minValues</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a57d3ba7df60a38abc4c161ff78f4a567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>maxValues</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a47616371623019a8c6399d5b3661d25b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSubset</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a68256de927befecd2694f873dead247a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSubset</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a274c03af88db6d0c183c1b3acfa0d6bd</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, double volume)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSubset</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a428561193ebdb3a4cce0bca42656815b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>vectorSpace</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>afc859b5206bc056c66893c854c191959</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSet</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a50aa48fa7da79a12c5fbd97e011a66f1</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, double volume)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VectorSet</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aa8887f7545631fbbb6165a503f690884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aa0ed80853d166754ba6ed83e63e737aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>prefix</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aedcd4b0f502af4c6e6df863c13cddfec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3266f16e2672f5f3c929f22df085e545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_minValues</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a633a4fbfa03590b38e4d2b192f3cc2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_maxValues</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ad234b8d38a236fb5c0d1353302c3e2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSpace&lt; V, M &gt; *</type>
      <name>m_vectorSpace</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a8d1bfbac8c601b407c0a6a7af0904e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a77f3b57109bc1d89b4111f47458df770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a472995c02b59c8f3cd77230b39535cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_volume</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>acd5cdcdbcbbce29daec684437f511e9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConcatenationSubset</name>
    <filename>a00061.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::VectorSubset</base>
    <member kind="function">
      <type></type>
      <name>ConcatenationSubset</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a40e562bd1f4f050b46316751ed2fd068</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const VectorSet&lt; V, M &gt; &amp;set1, const VectorSet&lt; V, M &gt; &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatenationSubset</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a102c4976236346467b86ea632bb0f658</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, double volume, const std::vector&lt; const VectorSet&lt; V, M &gt; * &gt; &amp;sets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcatenationSubset</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>acfed3d69fbce44b59e6f3f0c7c9ad93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a6d69cad4ff5b5a622357bb27ac5678a0</anchor>
      <arglist>(const V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae574a1733853d2a0df31ca83dd083061</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const VectorSet&lt; V, M &gt; * &gt;</type>
      <name>m_sets</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ab318a754dbb4b2a8be6f5d94a6e4c2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConstantScalarFunction</name>
    <filename>a00063.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseScalarFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstantScalarFunction</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a678cb62f30857415abcb1f0a18ad9a9b</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, double constantValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstantScalarFunction</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ab64b8406ba428ac948013bd5458d6410</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a36f58555d9d88c4785297bf72fb5a9f1</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>acf0fb2fe0c7dbe30bec6782c94e2a9e3</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseScalarFunction</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a68ab7c82be7eba7bd5d51ce8d85c65f0</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseScalarFunction</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6f96de783e174cfe84682766f5957969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>domainSet</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ad0937628825249dd36ded3ce0c7959ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_constantValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a97eaa01d6fadadbe6f8e6c484b2f5f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>adf44141aeb765d97613286f88f235f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6e81dc902aca6a546877da99b2f4a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_domainSet</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab81be32259b9764250660a035439fda8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConstantVectorFunction</name>
    <filename>a00064.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorFunction</base>
    <member kind="function">
      <type></type>
      <name>ConstantVectorFunction</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a71f9a54dfabba7ae9b8c0f5f90b3d528</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;domainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet, const Q_V &amp;constantImageVector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstantVectorFunction</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3be303448d27a3a98910f575a8a9876c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a22d15ef82a6284e234364a9f5c176a89</anchor>
      <arglist>(const P_V &amp;domainVector, const P_V *domainDirection, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorFunction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6f819f1f9adcf13e9ed4a35542aeff20</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;domainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorFunction</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a25e2bf49649abce43b9390d7cfd04164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>domainSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>af77b709d473f253e5c56aa620d5f3cb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; Q_V, Q_M &gt; &amp;</type>
      <name>imageSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa3a070a86f7099f53a669f1aab547619</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Q_V *</type>
      <name>m_constantImageVector</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7d2befbf254e81916fc1e39ffaebd756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>abb5487a1874515b698a3d5ee82490881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aacf92c70a9f6d0a951943aa708b7cfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>m_domainSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a485d4d016534371775bb2b00b5a9f4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_imageSet</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a442585224e86695e302757c0fad17913</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::DiscreteSubset</name>
    <filename>a00067.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::VectorSubset</base>
    <member kind="function">
      <type></type>
      <name>DiscreteSubset</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4fa2c637451907495db05227d0a03be3</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const std::vector&lt; V * &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DiscreteSubset</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a25e1e72e0dccf88a12d3a736957a1f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a08781b67f177ffd3e64b25df12a51958</anchor>
      <arglist>(const V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae4ead967806ac7c1a7502f4a07f3e05a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_elements</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6ef373d25c4813c2eb85b3b2ee50e705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericScalarFunction</name>
    <filename>a00117.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseScalarFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericScalarFunction</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a4619abc294e9703b564b4c034211f078</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, double(*valueRoutinePtr)(const V &amp;domainVector, const V *domainDirection, const void *routinesDataPtr, V *gradVector, M *hessianMatrix, V *hessianEffect), const void *routinesDataPtr, bool routineIsForLn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericScalarFunction</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ae88df82626c01d80179d6380c5c3dcf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a8629ec7c184b58254b147294e52e8c4c</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0e93bae1ceb42049353e798a8866fd77</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_valueRoutinePtr</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a9feaa5ee6ceb321fde56c5dd4dc48f2f</anchor>
      <arglist>)(const V &amp;domainVector, const V *domainDirection, const void *routinesDataPtr, V *gradVector, M *hessianMatrix, V *hessianEffect)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routinesDataPtr</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a46b2964caebcd2e22f913f86798bdf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_routineIsForLn</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a22e044d791d578453734356587bd7e65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericVectorFunction</name>
    <filename>a00119.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <base>QUESO::BaseVectorFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericVectorFunction</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a7225557182bd694de55618dff4322d3a</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;domainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet, void(*routinePtr)(const P_V &amp;domainVector, const P_V *domainDirection, const void *functionDataPtr, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects), const void *functionDataPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericVectorFunction</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ab125a1b6d18f7912e70d19bd80f72175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>afcc099493262b90cdace65f24bb6b98d</anchor>
      <arglist>(const P_V &amp;domainVector, const P_V *domainDirection, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>m_routinePtr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a1671b1c8c0d4eed14d203823af685a09</anchor>
      <arglist>)(const P_V &amp;domainVector, const P_V *domainDirection, const void *functionDataPtr, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a85df3216795107b164913ad339f0f813</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::IntersectionSubset</name>
    <filename>a00144.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::VectorSubset</base>
    <member kind="function">
      <type></type>
      <name>IntersectionSubset</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4a0924e5e8d6089f04a3b4012cf1cd51</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, double volume, const VectorSet&lt; V, M &gt; &amp;set1, const VectorSet&lt; V, M &gt; &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntersectionSubset</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7c087a2532980355186f25f7b3c12594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6484888d9232f6ba88865b7a8f45d323</anchor>
      <arglist>(const V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ae82d30c62afbd72bc09435888d0c6cbd</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_set1</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a0b7b665d6b283d3cfe154f4b52f2b7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_set2</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>adb82477167bf58ce2a9fb79e0bbccb96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseScalarFunction</name>
    <filename>a00041.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aad8957ecbc4e155cbc4c40a1c21135d7</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>acf2f92adac2df2a0d750dc62cd3a4d0a</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ScalarFunctionSynchronizer</name>
    <filename>a00194.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>ScalarFunctionSynchronizer</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ab016c60ae0ab70f4406fefeb50405acf</anchor>
      <arglist>(const BaseScalarFunction&lt; V, M &gt; &amp;inputFunction, const V &amp;auxVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScalarFunctionSynchronizer</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a6ce2562f5d0ad7fe0d4e63dbe5a0e9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>domainSet</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a4618272a8d897dc064a42510039cefcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>callFunction</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>adcdc70486ac64c11d0e505c4fb590a6b</anchor>
      <arglist>(const V *vecValues, const V *vecDirection, V *gradVector, M *hessianMatrix, V *hessianEffect, double *extraOutput1, double *extraOutput2) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aa77a3d3b53267ef7c731836faaa082fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; V, M &gt; &amp;</type>
      <name>m_scalarFunction</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a6b24acdd3185e57cae74e6d5aedb90bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BayesianJointPdf&lt; V, M &gt; *</type>
      <name>m_bayesianJointPdfPtr</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a0e17d294521cd22b297374ae2ff7f463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const V &amp;</type>
      <name>m_auxVec</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>adbd43aee6de557012924f3e18660a4f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ScalarSequence</name>
    <filename>a00196.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>seqScalarPositionIteratorTypedef</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8366353bde8e82708560867520596d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>seqScalarPositionConstIteratorTypedef</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a1a43b88ee86997e3cc9c4f686ac3a359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarSequence</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af7084e62a902ffefc8a49e317ac45e7c</anchor>
      <arglist>(const BaseEnvironment &amp;env, unsigned int subSequenceSize, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScalarSequence</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a533bf74759fe60daffa8ee97a5cd6692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarSequence&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a373b449ab87369d1cabd380bcb73c052</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a3db5b2ad778478ee3ba02a1509b79b40</anchor>
      <arglist>(unsigned int posId) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a697cc582a5d27f69590daded53948003</anchor>
      <arglist>(unsigned int posId)</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a78095426a715b7a735919044927f49fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad3e65b63cff35a52d5d78bf9ae6bfa8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a198b72423333bc5aa1722b830b64a263</anchor>
      <arglist>(const std::string &amp;newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa5449ca2f03f5e6025d35804bee19ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subSequenceSize</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a0288ea295eedc216a1617b3286f6f3a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unifiedSequenceSize</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a52829afc95e5c36e9db44f40854153b0</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeSequence</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2aa8d77c39927060227275b12b6d3dd0</anchor>
      <arglist>(unsigned int newSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetValues</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>adbddbb64d7fa4853deecb92dfa28b19f</anchor>
      <arglist>(unsigned int initialPos, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePositions</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a1606584d26bf9f876a4bc4e20839a201</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnifiedContentsAtProc0Only</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab8802412461496eb72f6c1267507c28c</anchor>
      <arglist>(bool useOnlyInter0Comm, std::vector&lt; T &gt; &amp;outputVec) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>subMinPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab0ae335d0a9a17a3f3873eae13deaba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unifiedMinPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a3a0a65ce7ab1474962e644624ae3631d</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>subMaxPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae4689059a4d99dffd386422f1c1aa4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unifiedMaxPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a70dd5db8c036d364ac56e3cb9c2c7d04</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>subMeanPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ac900d747f3a7ccbb9f033ae361606ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unifiedMeanPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a6edde80a7c76afe6b67cd0a55434da1b</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>subMedianPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a5713136cc3128cb51b16b2111cbb1226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unifiedMedianPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a9cc312cf7071927bac5d16b2f948d13f</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>subSampleVariancePlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a328cd162a455a7c3f6836c5f50502a08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>unifiedSampleVariancePlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a65ce41a3d29fa1cc1ae5d230dd0daf43</anchor>
      <arglist>(bool useOnlyInter0Comm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteStoredScalars</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab3ca8a505e862abfc5e0f39b46b124c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGaussian</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a117f63a50e67106777e0fea36a62d994</anchor>
      <arglist>(const T &amp;mean, const T &amp;stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniform</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a08f24dc39a24beabcdbea61d8dc0756f</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subUniformlySampledCdf</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a58405305f35483e422012f986eb06aa1</anchor>
      <arglist>(unsigned int numIntervals, T &amp;minDomainValue, T &amp;maxDomainValue, std::vector&lt; T &gt; &amp;cdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedUniformlySampledCdf</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a91a609779409ef7e43f2baa5a21932c0</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int numIntervals, T &amp;unifiedMinDomainValue, T &amp;unifiedMaxDomainValue, std::vector&lt; T &gt; &amp;unifiedCdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subBasicCdf</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af8278c90236353ce45ea47740cc375d5</anchor>
      <arglist>(unsigned int numIntervals, UniformOneDGrid&lt; T &gt; *&amp;gridValues, std::vector&lt; T &gt; &amp;cdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWeightCdf</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa9af6912c34c5623f35318c61d23f5f2</anchor>
      <arglist>(unsigned int numIntervals, std::vector&lt; T &gt; &amp;gridValues, std::vector&lt; T &gt; &amp;cdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWeightCdf</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a699acef7aabf58d9633eef02ebfd7110</anchor>
      <arglist>(unsigned int numIntervals, UniformOneDGrid&lt; T &gt; *&amp;gridValues, std::vector&lt; T &gt; &amp;cdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subMeanExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a65e9208ee2d0443ad28b29141297153c</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedMeanExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab0b289927919fe9d3a4446ce3433c137</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int localNumPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subMedianExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a512b168f530aeb607c8a86d4f8b7b889</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedMedianExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad0a44d5268efa8d6a15baa30cd1f93ca</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int localNumPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subSampleVarianceExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a96aa7ad157eb648ffd65f99008609200</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const T &amp;meanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedSampleVarianceExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a132654b8d4d733f77c37b868c9c9684a</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int localNumPos, const T &amp;unifiedMeanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subSampleStd</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a602553eda9cecc0bd1cdaf7d6616be9f</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const T &amp;meanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedSampleStd</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a7eebeb697f3da4e4650334c120526e80</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int localNumPos, const T &amp;unifiedMeanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subPopulationVariance</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a997bf4ce6fc322d71c509f8d622ad538</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const T &amp;meanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedPopulationVariance</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a268e170c975200b6f96068f892982fe9</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int numPos, const T &amp;unifiedMeanValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>autoCovariance</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae923359502fc1caf5802cd42d5ad646a</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const T &amp;meanValue, unsigned int lag) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>autoCorrViaDef</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a9de3f6734bfc399e527c867d961446c9</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int lag) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a16c4cde46b40e10dd306bbb95e832469</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int maxLag, std::vector&lt; T &gt; &amp;autoCorrs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>abc8219f5b9459ff7ffb0a8ae9fa317de</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int numSum, T &amp;autoCorrsSum) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subMinMaxExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aee81b99614cc5836be198c0cf20879a5</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, T &amp;minValue, T &amp;maxValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedMinMaxExtra</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a6d63ff25462ff1366608bd37fe59165a</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int numPos, T &amp;unifiedMinValue, T &amp;unifiedMaxValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subHistogram</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a80e9aa5156dfaedbdc5ecd0fee6acb9f</anchor>
      <arglist>(unsigned int initialPos, const T &amp;minHorizontalValue, const T &amp;maxHorizontalValue, std::vector&lt; T &gt; &amp;centers, std::vector&lt; unsigned int &gt; &amp;bins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedHistogram</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a805023aa45f97a89c19a5f5d0cc7db34</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, const T &amp;unifiedMinHorizontalValue, const T &amp;unifiedMaxHorizontalValue, std::vector&lt; T &gt; &amp;unifiedCenters, std::vector&lt; unsigned int &gt; &amp;unifiedBins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subBasicHistogram</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aff0ffa9ef443c766c5ee0e36457c0c2d</anchor>
      <arglist>(unsigned int initialPos, const T &amp;minHorizontalValue, const T &amp;maxHorizontalValue, UniformOneDGrid&lt; T &gt; *&amp;gridValues, std::vector&lt; unsigned int &gt; &amp;bins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWeightHistogram</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a23e38a89b7dba988b244f05a8b454cd8</anchor>
      <arglist>(unsigned int initialPos, const T &amp;minHorizontalValue, const T &amp;maxHorizontalValue, UniformOneDGrid&lt; T &gt; *&amp;gridValues, std::vector&lt; unsigned int &gt; &amp;bins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWeightHistogram</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af586092d2550315ffbb7627779ab6eab</anchor>
      <arglist>(unsigned int initialPos, const T &amp;minHorizontalValue, const T &amp;maxHorizontalValue, std::vector&lt; T &gt; &amp;gridValues, std::vector&lt; unsigned int &gt; &amp;bins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subSort</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a4991e998cb5058457978b22ed1c90eb4</anchor>
      <arglist>(unsigned int initialPos, ScalarSequence&lt; T &gt; &amp;sortedSequence) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedSort</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8a77f546238c4b419d926a0c76613cd8</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, ScalarSequence&lt; T &gt; &amp;unifiedSortedSequence) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subInterQuantileRange</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a0bde4bf373cbe6d6245b1ef8693e6053</anchor>
      <arglist>(unsigned int initialPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedInterQuantileRange</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8cc1ea6318342927b392cd8fd52696bb</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subScaleForKde</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a4d71b54cc40395677bb744d8b540dad5</anchor>
      <arglist>(unsigned int initialPos, const T &amp;iqrValue, unsigned int kdeDimension) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedScaleForKde</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a9d0d278d0f3e7c5d3ad84d415b1fd212</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, const T &amp;unifiedIqrValue, unsigned int kdeDimension) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subGaussian1dKde</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af16ce4767da1bfe61f40652d3fb6d418</anchor>
      <arglist>(unsigned int initialPos, double scaleValue, const std::vector&lt; T &gt; &amp;evaluationPositions, std::vector&lt; double &gt; &amp;densityValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedGaussian1dKde</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a7009705f4e50e898ef698e041f100bf2</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, double unifiedScaleValue, const std::vector&lt; T &gt; &amp;unifiedEvaluationPositions, std::vector&lt; double &gt; &amp;unifiedDensityValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filter</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aaf386a04a0cebd7f88c5b7694a5fd3d1</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>brooksGelmanConvMeasure</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>adc59a20ebed60e16e930dc9859c365ce</anchor>
      <arglist>(bool useOnlyInter0Comm, unsigned int initialPos, unsigned int spacing) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a75cdd556cc417e35a6b9f7aff86896ae</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;src, unsigned int srcInitialPos, unsigned int srcNumPos)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>subPositionsOfMaximum</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aea60fb016374a3f35445ce444e599518</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;subCorrespondingScalarValues, ScalarSequence&lt; T &gt; &amp;subPositionsOfMaximum)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>unifiedPositionsOfMaximum</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>afef5af747fb011877b656b0e417b850b</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;subCorrespondingScalarValues, ScalarSequence&lt; T &gt; &amp;unifiedPositionsOfMaximum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aa162c8bbca4e0dedca894828c57e1fa7</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a955a765fcd93e63165f6497bacd9dbb4</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, std::ofstream &amp;ofs, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedWriteContents</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2f832dd5eda37df06eb52650ab8ce733</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedReadContents</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a6aaf13eda57e55b709d247cfd1ab22bc</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const unsigned int subSequenceSize)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2c160c4e19bb6007e5def4615695741d</anchor>
      <arglist>(const ScalarSequence&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeUnifiedMatlabHeader</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab55bfaf75dd3e9fbf920334ee326d6a1</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeSubMatlabHeader</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>affe18709303e8ffe0d6c074830c88442</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeTxtHeader</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ab077b9ecb40d0c56a4dc0ab19a8b76c2</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractScalarSeq</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a194418ec240f5d7f5614e203157181ae</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, ScalarSequence&lt; T &gt; &amp;scalarSeq) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractRawData</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a998c8f01c49c06076f2ce97a51d4ab2c</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, std::vector&lt; double &gt; &amp;rawData) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::vector&lt; T &gt; &amp;</type>
      <name>rawData</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a4bb2d2b4fddee3fe0fdefd9be068eaea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>subSort</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae0cf4dcb27543caefc38e921968cdb6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parallelMerge</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>aedb57153660cf539fc0ca3737a1c4f7b</anchor>
      <arglist>(std::vector&lt; T &gt; &amp;sortedBuffer, const std::vector&lt; T &gt; &amp;leafData, unsigned int treeLevel) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a71618cd6351b29361b437af68447a4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8568f3ceb7cef2c4e3cf6dbf52d43cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T &gt;</type>
      <name>m_seq</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ae616036fd2e62fb69df167814545e893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_subMinPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a3e85805e8fe276feccc90faf652e6b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_unifiedMinPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>af43ad51e7996567d34078c7a39e1ca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_subMaxPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ad2b2f7ab227f0be4e9b9a12cb0b76676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_unifiedMaxPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a47ae40e7381ca7407e447052bd2c2469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_subMeanPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a2e4e2bb4fb0a4ea3d10498601345d4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_unifiedMeanPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a8a3c141c138c215c8b3672b2efb32108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_subMedianPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a7f9efb259fff49756428a925a80fadad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_unifiedMedianPlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a68f724b0ff9d94f17e8ce37467a0b4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_subSampleVariancePlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a50930b9c1b76c7860c2613676d2b58c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T *</type>
      <name>m_unifiedSampleVariancePlain</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>acf018e219da854046c5127a39ddf8442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SequenceOfVectors</name>
    <filename>a00199.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorSequence</base>
    <member kind="typedef">
      <type>std::vector&lt; const V * &gt;::const_iterator</type>
      <name>seqVectorPositionConstIteratorTypedef</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a32cf32ccc0f85d14f227dc13399d2e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; const V * &gt;::iterator</type>
      <name>seqVectorPositionIteratorTypedef</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac33b1b9b3f22325b49618a6591dce818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequenceOfVectors</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad21c05cd3ffeda23a00c4d49922f5328</anchor>
      <arglist>(const VectorSpace&lt; V, M &gt; &amp;vectorSpace, unsigned int subSequenceSize, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequenceOfVectors</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad859bd4cb69f5614854a39a9b615f0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SequenceOfVectors&lt; V, M &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a039ec936b424d16166dd842511891c4e</anchor>
      <arglist>(const SequenceOfVectors&lt; V, M &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subSequenceSize</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a0224bd3e961d86af5d2886301c0c2b86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeSequence</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a751e8d4c3791271c7100395312f37c7b</anchor>
      <arglist>(unsigned int newSubSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetValues</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a75e0f11bb3abdf5cd691ba8769ca7222</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePositions</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a1455ec3ab1b63006a8fe85a8c169c649</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPositionValues</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9c46159287cb508791ea29282cd488ff</anchor>
      <arglist>(unsigned int posId, V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositionValues</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a822aecb4ddeb8da89683f6c3a1ce11c1</anchor>
      <arglist>(unsigned int posId, const V &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subUniformlySampledCdf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a959dd10649b28ac896d5e21eab08cfcc</anchor>
      <arglist>(const V &amp;numEvaluationPointsVec, ArrayOfOneDGrids&lt; V, M &gt; &amp;cdfGrids, ArrayOfOneDTables&lt; V, M &gt; &amp;cdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedUniformlySampledCdf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a1dcb5756aa9007bb95cbc528115ac692</anchor>
      <arglist>(const V &amp;numEvaluationPointsVec, ArrayOfOneDGrids&lt; V, M &gt; &amp;unifiedCdfGrids, ArrayOfOneDTables&lt; V, M &gt; &amp;unifiedCdfValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subMeanExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a422147ff61e955c29f62447bf0b4d29c</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;meanVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedMeanExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aba06456dee4124f8a3b9de07e0ce2163</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMeanVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subMedianExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ab2ebb58b191d40323da456b82fad2dc6</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;medianVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedMedianExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a98ea24cb28d79de06ce89c12dfbc3d61</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMedianVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subSampleVarianceExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad21147b7594224e8de732f8b3b631fc3</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;samVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedSampleVarianceExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a10fe04c3cb095aca5c55e5a2d4400e44</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;unifiedMeanVec, V &amp;unifiedSamVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subSampleStd</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aab6366ba47a9513aa240bf600930367f</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;stdVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedSampleStd</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a3cdf3e5902d9e543b67a5e1656d33eaa</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;unifiedMeanVec, V &amp;unifiedStdVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subPopulationVariance</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ae6041aecbc1abb2f4e0981914dd5c0ca</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, V &amp;popVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedPopulationVariance</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a8d4648246e0c0f5df4b38a1eb8e90e04</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;unifiedMeanVec, V &amp;unifiedPopVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCovariance</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a190622cf14733c11b48d153f98ee1525</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, unsigned int lag, V &amp;covVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaDef</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a5f49d2dcabf21016d3c210ffa5f12462</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int lag, V &amp;corrVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac4f7e6626d4c18b89003e442e91281ea</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::vector&lt; unsigned int &gt; &amp;lags, std::vector&lt; V * &gt; &amp;corrVecs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aea06bdd27167a184fb4bf80f85c8fcff</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int numSum, V &amp;autoCorrsSumVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subMinMaxExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a00bb55607fc38bfd59d65bb53d31fe6f</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;minVec, V &amp;maxVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedMinMaxExtra</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad7abbd1b4895135796d24206edff778d</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, V &amp;unifiedMinVec, V &amp;unifiedMaxVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subHistogram</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a175f159aae54514b666c0f845997d8b3</anchor>
      <arglist>(unsigned int initialPos, const V &amp;minVec, const V &amp;maxVec, std::vector&lt; V * &gt; &amp;centersForAllBins, std::vector&lt; V * &gt; &amp;quanttsForAllBins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedHistogram</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a8ef8ac8a2b2af3a24fa4c6d2b309b463</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedMinVec, const V &amp;unifiedMaxVec, std::vector&lt; V * &gt; &amp;unifiedCentersForAllBins, std::vector&lt; V * &gt; &amp;unifiedQuanttsForAllBins) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subInterQuantileRange</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a86985625ab899ea03ecf4bc56538ea49</anchor>
      <arglist>(unsigned int initialPos, V &amp;iqrVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedInterQuantileRange</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ab4f95ccde1110f4138a9bfebb4eca822</anchor>
      <arglist>(unsigned int initialPos, V &amp;unifiedIqrVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subScalesForKde</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>afd08d0c5c360636708f530dec8c67e38</anchor>
      <arglist>(unsigned int initialPos, const V &amp;iqrVec, unsigned int kdeDimension, V &amp;scaleVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedScalesForKde</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a88ac94235c0c7ab1858fcd54fd40d087</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedIqrVec, unsigned int kdeDimension, V &amp;unifiedScaleVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subGaussian1dKde</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a71c2d67969c2992c3c8a532734ddfcce</anchor>
      <arglist>(unsigned int initialPos, const V &amp;scaleVec, const std::vector&lt; V * &gt; &amp;evalParamVecs, std::vector&lt; V * &gt; &amp;densityVecs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedGaussian1dKde</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a5605b0c15ee53f7fb1bfc89e08cf1fa7</anchor>
      <arglist>(unsigned int initialPos, const V &amp;unifiedScaleVec, const std::vector&lt; V * &gt; &amp;unifiedEvalParamVecs, std::vector&lt; V * &gt; &amp;unifiedDensityVecs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ab4342629e89ee72896cb844c54f821f3</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a8bca3ab2c20f0b67ee2a32f970cc8ce8</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, FilePtrSetStruct &amp;filePtrSet, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a589a4141ec53e032dd2ad2aa6e223f70</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, std::ofstream &amp;ofs, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedWriteContents</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a19f46ad2f88402913e7ed1357ae6b6a8</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unifiedReadContents</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af463a5a9b5cf846b73fb5c54f59d574b</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const unsigned int subSequenceSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a8094ca3dd6addf572728a88a987168ab</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;idsOfUniquePositions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filter</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa826dc4cbb2607d2bc54144998d9fa01</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateConvBrooksGelman</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aac49d62310d6db805e2075dd886b417a</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractScalarSeq</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac977b3b26a6af2ae727671f1246262fd</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, ScalarSequence&lt; double &gt; &amp;scalarSeq) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a00d63e1e5dbece07d596da43fcc0ac6a</anchor>
      <arglist>(const SequenceOfVectors&lt; V, M &gt; &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extractRawData</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a217e1f9a9d1a6fe8117c25d37fcbae23</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, std::vector&lt; double &gt; &amp;rawData) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeSubMatlabHeader</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a0642f0e66ef87411727a85759b09b966</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize, double vectorSizeLocal) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeUnifiedMatlabHeader</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac0f7171d956c25404ef274e632608dd9</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize, double vectorSizeLocal) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>writeTxtHeader</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a615d796f05be2a8f4ecd686860cf5523</anchor>
      <arglist>(std::ofstream &amp;ofs, double sequenceSize, double vectorSizeLocal) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const V * &gt;</type>
      <name>m_seq</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ae83e7c53439265667809256d0d302e5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorFunction</name>
    <filename>a00044.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compute</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7ecf6f9270dfd96812074c7ab4badd6e</anchor>
      <arglist>(const P_V &amp;domainVector, const P_V *domainDirection, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::VectorFunctionSynchronizer</name>
    <filename>a00228.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VectorFunctionSynchronizer</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a6ca588264a0c67e89a272d84099d8ec4</anchor>
      <arglist>(const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;inputFunction, const P_V &amp;auxPVec, const Q_V &amp;auxQVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorFunctionSynchronizer</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>af36b7e764244331c8b64ac53a16f5d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>domainSet</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a221738d8cac4be1e0516489d1520f92e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFunction</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2b6003017f08403e8c6c006027dbe240</anchor>
      <arglist>(const P_V *vecValues, const P_V *vecDirection, Q_V *imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a36c2a9e1a2d317dddb5cf51b68e5c659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_vectorFunction</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>abde0efa4a6ab11898d8b0b0853d0971a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const P_V &amp;</type>
      <name>m_auxPVec</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>af93da0ecec2b078ddacc8135f81cd996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Q_V &amp;</type>
      <name>m_auxQVec</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a4fc0f69d67bfcfc200484bb741a2b75d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorSequence</name>
    <filename>a00048.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>subSequenceSize</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afd6278702d40bdf1044697bbd6ad1957</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resizeSequence</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>adc238af7f6e8af2402ab791de7d60af5</anchor>
      <arglist>(unsigned int newSubSequenceSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetValues</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab007ea121708b1b1a63553433b428413</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>erasePositions</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2b41ed436f95a1816a811fc368adaf79</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getPositionValues</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a656d47a18b401d6d914b0daf2dea88b0</anchor>
      <arglist>(unsigned int posId, V &amp;vec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPositionValues</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5bcce98b68e0e24c05136e7a3bb50c12</anchor>
      <arglist>(unsigned int posId, const V &amp;vec)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>autoCovariance</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3a831c06c8ede53b84ce72fac3f018c0</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const V &amp;meanVec, unsigned int lag, V &amp;covVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>autoCorrViaDef</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ab4d322b34c43ad47df9a76582a0693d0</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int lag, V &amp;corrVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a709a63b678508c47bedd416ece5342ef</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, const std::vector&lt; unsigned int &gt; &amp;lags, std::vector&lt; V * &gt; &amp;corrVecs) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>autoCorrViaFft</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af9f2478ed4112aa615caef21bf26ab35</anchor>
      <arglist>(unsigned int initialPos, unsigned int numPos, unsigned int numSum, V &amp;autoCorrsSumVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedWriteContents</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3987ee6d026842e4ddaeaf0bc850ef83</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unifiedReadContents</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>afcb5935b592ab2e7ee39d23b08bcce62</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const unsigned int subSequenceSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>select</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4ff00d9659c59653844b78410571f3fe</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;idsOfUniquePositions)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>filter</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>adfb88fdbaa1c6b2b040ef888633619ef</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>extractScalarSeq</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0ec0f2595d606723d0b069e1632cc348</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, ScalarSequence&lt; double &gt; &amp;scalarSeq) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>extractRawData</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aae5259810d72d393328369d8d4087d5d</anchor>
      <arglist>(unsigned int initialPos, unsigned int spacing, unsigned int numPos, unsigned int paramId, std::vector&lt; double &gt; &amp;rawData) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::VectorSpace</name>
    <filename>a00231.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::VectorSet</base>
    <member kind="function">
      <type>GslVector *</type>
      <name>newVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a64856b952d372cb25d0f10853635104a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GslVector *</type>
      <name>newVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a840fde1ad7e947821dffd3d5ad164509</anchor>
      <arglist>(double value) const</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix *</type>
      <name>newMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ae28843e8ea7cd8b51aaea3318f6651eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix *</type>
      <name>newDiagMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aea4fbf9ced060c790c4f100a7604c271</anchor>
      <arglist>(double diagValue) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>af4603e4342db319c34fe236b9e057f0e</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, unsigned int dimGlobalValue, const std::vector&lt; std::string &gt; *componentsNamesVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa0677ad2c58ce91321d07f377ffe39f4</anchor>
      <arglist>(const VectorSpace&lt; V, M &gt; &amp;aux)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorSpace</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a0e543a391950b82f1107b1bd589ebd72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa74cd0d1a8b3d599f799ef4aa2ebcfc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Map &amp;</type>
      <name>map</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ac2f40e646c62513ea9a6819b82e8ba24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numOfProcsForStorage</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a67b0c3620662116f5a346fdaa5faf38e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>dimLocal</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a5829a1f4f996f8307c840b705144d666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>dimGlobal</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>acd4359dc120905c22ca1064e33787239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>globalIdOfFirstComponent</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a6cfb48f3058abca35b23c65147217f64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>zeroVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a92e963bb5cab3eecd290dfe4b8f03b04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>newVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a6fc1d08dfe902e83a011ea6a81aff439</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>newVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>abc859a81265641b1f8676851fd2ab6bd</anchor>
      <arglist>(double value) const </arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>newVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a7492fbcc76598ba956e45005ba7cd9cc</anchor>
      <arglist>(const V &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>M *</type>
      <name>newMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a8277f132ea382a7f49aa4a6ab7cbea1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>M *</type>
      <name>newDiagMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a9f4ad174b63fbc0626070e0f38745e1e</anchor>
      <arglist>(const V &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>M *</type>
      <name>newDiagMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>afe36d0db933c49cb4508b83dd17d33b6</anchor>
      <arglist>(double diagValue) const </arglist>
    </member>
    <member kind="function">
      <type>M *</type>
      <name>newProposalMatrix</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab1e7c7ce9aedb494fb2a6fb1fac6a46b</anchor>
      <arglist>(const V *varVec, const V *auxVec) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>vectorSpace</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab8bb323280e36a42ac04623b42369da5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab31d8677d0199e10e1aac9526e2b41e8</anchor>
      <arglist>(const V &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>const DistArray&lt; std::string &gt; *</type>
      <name>componentsNamesArray</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a89284638a11e1449149f471a563bb72c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; *</type>
      <name>componentsNamesVec</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa315ff4efb4be69a64e341e3ebddca56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>localComponentName</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a57c65df3fa6afbcd5c019e8892f53e44</anchor>
      <arglist>(unsigned int localComponentId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printComponentsNames</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>adcae173f0230ef737ea592c34cad1d09</anchor>
      <arglist>(std::ostream &amp;os, bool printHorizontally) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a3a1fe3c1833380e2a0b19d35494cb635</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Map *</type>
      <name>newMap</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a9549041aa8525c198155e9ba530e5aa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Map *</type>
      <name>newMap</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ac8a3fcaa8d2891c2ca32733dc5a56008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_dimGlobal</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ad3efef4a407fdc5c98fded11f2f2444e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Map *</type>
      <name>m_map</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a752194a4dc937db4db4df2a3b207d3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_dimLocal</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa6db91aca8a1f79e27d2f472528850bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistArray&lt; std::string &gt; *</type>
      <name>m_componentsNamesArray</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a6bcd9c13374cda32f043a93e171aeabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistArray&lt; std::string &gt; *</type>
      <name>m_componentsNamesVec</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a28b5617b4b30cea1e02e4cb01fd067d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_emptyComponentName</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a7cc6bfad9eb4031dbe763728f0c25a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_zeroVector</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a0faa184316e08edb286a1bd0a5059b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VectorSpace</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab64f81dae5d122ec818fe96ea404f93c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::VectorSet</name>
    <filename>a00230.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>vectorSpace</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a923421590baf5bf93cf066e528f927dc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab59fe6ca67647f58920681e05165a9d0</anchor>
      <arglist>(const V &amp;vec) const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>VectorSet</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab337553a180d670cc7a5b170387d2b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a913fb68533da1e2243882bd63fd2c211</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3d864293f52b81804f146952a4f3676b</anchor>
      <arglist>(std::ostream &amp;os, const VectorSet&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::VectorSubset</name>
    <filename>a00232.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::VectorSet</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>aa3f018d2afdf73dbe5fa7041dee47e0d</anchor>
      <arglist>(const V &amp;vec) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a62ba8816790e495f7d2302afeaecb436</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseInputOptionsParser</name>
    <filename>a00034.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseInputOptionsParser</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a6221c1fa63072271320083ff0734b680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseInputOptionsParser</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a26f3af2bd82a27bf735cc15af0c08cad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BasicPdfsBase</name>
    <filename>a00049.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicPdfsBase</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>acf3bfe40802cd488d9d01077a7d15e55</anchor>
      <arglist>(int worldRank)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicPdfsBase</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a4e0421cd14da7b04d4242318c7de5ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>betaPdfActualValue</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a7a4df6a4b2147eeca4efb22db0ae1b8b</anchor>
      <arglist>(double x, double alpha, double beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>gammaPdfActualValue</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ae5c0c0a14b0f5b89f64e0cd9c0a1b9fd</anchor>
      <arglist>(double x, double a, double b) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_worldRank</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a67e06f7bb30579581db1a7b9b3507d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BasicPdfsBase</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a2ca589bc1e025d7e84a0b029b4c610a1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BasicPdfsBoost</name>
    <filename>a00050.html</filename>
    <base>QUESO::BasicPdfsBase</base>
    <member kind="function">
      <type></type>
      <name>BasicPdfsBoost</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a6409e117dda8033c960db50f8293a385</anchor>
      <arglist>(int worldRank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicPdfsBoost</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a0d1bc5ab5bdffb0870031746ebe37a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>betaPdfActualValue</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1fb018d87021cb4af85289102c7fddcb</anchor>
      <arglist>(double x, double alpha, double beta) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gammaPdfActualValue</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aabf856ea8be88e4fda2b378e91eee922</anchor>
      <arglist>(double x, double a, double b) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BasicPdfsBoost</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a7ba56f194cdce87c7ef247457a5ed4a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BasicPdfsGsl</name>
    <filename>a00051.html</filename>
    <base>QUESO::BasicPdfsBase</base>
    <member kind="function">
      <type></type>
      <name>BasicPdfsGsl</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>acfb4ea894ec318fe99c6afa5fe86b8fe</anchor>
      <arglist>(int worldRank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicPdfsGsl</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a477e6898a9ed8204f5d9d36dc0b6bf3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>betaPdfActualValue</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>aaae1aaf761e7129c7f158a06e3ecdfc1</anchor>
      <arglist>(double x, double alpha, double beta) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gammaPdfActualValue</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6bb250677b5c8c94bd3f690a58efaade</anchor>
      <arglist>(double x, double a, double b) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BasicPdfsGsl</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a3df72eb1474638a1bb364524ff397c4d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BoostInputOptionsParser</name>
    <filename>a00056.html</filename>
    <base>QUESO::BaseInputOptionsParser</base>
    <member kind="function">
      <type></type>
      <name>BoostInputOptionsParser</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ac052b61a4073ffcfbb9f23661c8ad59e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoostInputOptionsParser</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ab800fbdd51b9f9d9f70ae39de4ff23e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoostInputOptionsParser</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aed9b4f740edb64ec66ac1f0b9c59aa0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanInputFile</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a144aff755573bf83e09838a56fcd3019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOption</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ad909cd012af0bfbfb5afb6a417e5d108</anchor>
      <arglist>(std::string name, T defaultValue, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerOption</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a528f2ed6aab4c630eb46e956af5dcc76</anchor>
      <arglist>(std::string name, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOption</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a772fb7333f7b2d9c4858d73125f62ef4</anchor>
      <arglist>(std::string &amp;name, T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOption</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a10ff35c3fb3ccf0d9dd05a35af0fa5d5</anchor>
      <arglist>(std::string &amp;name, std::set&lt; unsigned int, std::less&lt; unsigned int &gt;, std::allocator&lt; unsigned int &gt; &gt; &amp;value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>m_filename</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a4fc03761a65b68560cca3f1a660b2567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPtr&lt; boost::program_options::options_description &gt;::Type</type>
      <name>m_optionsDescription</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a4f8eff2f2a0a3a6b022999835f194d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPtr&lt; boost::program_options::variables_map &gt;::Type</type>
      <name>m_optionsMap</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a93f34247badabcd897e3f43d39fddc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_scannedInputFile</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>adddd328ea776462f23d9d3e5c731ae32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a10039331fc41f11a277b4ea9f2f0e511</anchor>
      <arglist>(std::ostream &amp;os, const BoostInputOptionsParser &amp;parser)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::DistArray</name>
    <filename>a00068.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>DistArray</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a408055a81ec9f83f4eb9b71f1951451c</anchor>
      <arglist>(const Map &amp;inputMap, const int inputRowSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistArray</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0e4de6b524fed444be71ee26349a907b</anchor>
      <arglist>(const DistArray&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistArray</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8091b856529984e5c307e37e5438bfa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DistArray&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a6ec9bfcdf00351c8fb9b18dfeab59026</anchor>
      <arglist>(const DistArray&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a910410bb8104a49f71a8a14700d4681a</anchor>
      <arglist>(int localElementId, int colId)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a44dad0d61e798227cf34528969c2096a</anchor>
      <arglist>(int localElementId, int colId) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>GlobalLength</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a74e491ed573af8b81f701e2ca136206e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyLength</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af4a798f5defa6a37dfc82175c7f92f83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>RowSize</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ac20dd88a7b36e19948c39b8f1a1ab805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DistArray</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a54e6413babda861c8bf5213888c9b9f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a415ab5d9ac5074d71497e1ab4c9460f8</anchor>
      <arglist>(const DistArray&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Map</type>
      <name>m_Map</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aeb1c8299dc302d01ae2fbdafb82b7b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_rowSize</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a663f89dc740471dafcf8b526c255d385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; T &gt; &gt;</type>
      <name>m_elements</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af1cfbc37cbe9b608d2c2174811e1987c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad9d1da6bb1947b03a01cf1fd43bc5780</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae1dba6a1558a662e92cb3a823f379fda</anchor>
      <arglist>(std::ostream &amp;os, const DistArray&lt; T &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::FilePtrSetStruct</name>
    <filename>a00081.html</filename>
    <member kind="function">
      <type></type>
      <name>FilePtrSetStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a2f8c1b44d5958fcc6716aecde4cad403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FilePtrSetStruct</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a61639fac9716c69ceebe1750aeebe786</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::ofstream *</type>
      <name>ofsVar</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a354cb0a6659254aa38ba38986ccf5c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ifstream *</type>
      <name>ifsVar</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a1faa6ed0771368358c29a492edf764ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseEnvironment</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>BaseEnvironment</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abe241b184e27083baaeee01116105472</anchor>
      <arglist>(const char *passedOptionsInputFileName, EnvOptionsValues *alternativeOptionsValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseEnvironment</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a769c44dce792c1c11f58031604e44504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fullEnvIsReady</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0d01d2b909218edb38f19f908efac82f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>worldRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a78b57112bbd0e6dd0e8afec00b40ffa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fullRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a84a239e42ae443cf71db6e03e8159620</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MpiComm &amp;</type>
      <name>fullComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0b0779b41ff304058856e97e1d16b4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RawType_MPI_Group</type>
      <name>subGroup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6427d9f94e145748d0d27e5c62f511fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a172d52f993f1322ed45aaddf71518dbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MpiComm &amp;</type>
      <name>subComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>affe39f53e3d5d678842413370af09145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MpiComm &amp;</type>
      <name>selfComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a824458f0d045db251d982ad4c75a4b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inter0Rank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae106b5bb8a80b655b88b3a26b1e7c185</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MpiComm &amp;</type>
      <name>inter0Comm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a689e4d140c74d495d97eb498714a4b82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ofstream *</type>
      <name>subDisplayFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8a0064746ae8dddfece4229b9ad374d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>subDisplayFileName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0c4361613213ab1412248f99e046281d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numSubEnvironments</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac0345f57e31ef7833e379ed972bd094d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subId</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6ae3174897a9b3a4c85fa18da5d4c16f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>subIdString</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a73f7849acdd5d5ba15a3094fe18f258f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTheParallelEnvironment</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abc9978b83f01e6bf570e5ed283728094</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>optionsInputFileName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa0e3ccfe00e6f51dbe6dd6b9b6f65183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptionsInputFileAccessState</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7f1b585899bdf7ae4f6f41d2bb93f1e6</anchor>
      <arglist>(bool newState) const </arglist>
    </member>
    <member kind="function">
      <type>boost::program_options::variables_map &amp;</type>
      <name>allOptionsMap</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7c7492248b855f65c79294daca67c9d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanInputFileForMyOptions</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6d68df6066b32820ccdf22d4fab2ace0</anchor>
      <arglist>(const boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>displayVerbosity</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1fe5f244fc0316a0ab3e37463f108b96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>syncVerbosity</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a70df256cd4d968e426175a38269c04d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>checkingLevel</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a83c1c036f81651792a74975f2da23ae1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RngBase *</type>
      <name>rngObject</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afc1f1258b770ac8e27cf308bbcd6a296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSeed</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a32c3363d45d178108acca21f819a4dbf</anchor>
      <arglist>(int newSeedOption)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seed</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>addc0bff38872578f48d6fcd2f32ad08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BasicPdfsBase *</type>
      <name>basicPdfs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af106da59f188ba0dbf4f93da3fcd8ca5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>platformName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2ce73b968a255fd32b91e9aab9d06a8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>identifyingString</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a52e4108f22c92968be4ff4af0dfc4eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIdentifyingString</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af82cb112f8904bef58a5676e9c9f5a2b</anchor>
      <arglist>(const std::string &amp;newString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThereInputFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a56aa5626cb7aae203d72c57679ba0683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>struct timeval</type>
      <name>timevalBegin</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1adcf7ca2d95e75a29360bcfe091cd65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openOutputFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab8fe853074f12ea34e18724119a2fc75</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds, bool writeOver, FilePtrSetStruct &amp;filePtrSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openUnifiedOutputFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad4dd93dbcb8d2f9ef79af9afaec00aa5</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, bool writeOver, FilePtrSetStruct &amp;filePtrSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openInputFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8a3f76733a31991a1ed9a942feb2dc3c</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds, FilePtrSetStruct &amp;filePtrSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openUnifiedInputFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acc1fb3152068b25e84845a0d6d203bcf</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, FilePtrSetStruct &amp;filePtrSet) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ab712bff194ddd91459d4ea8715c77e8b</anchor>
      <arglist>(FilePtrSetStruct &amp;filePtrSet, const std::string &amp;fileType) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionalCircumstance</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>abb2a6a8de19058957f856341fce2440e</anchor>
      <arglist>(bool value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exceptionalCircumstance</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af0bc451b18302cfd5ee747c321e1c6e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>adba5fa84e671bb56eb001ec596729a4e</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_fullEnvIsReady</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a62020b48a3506aa067d1c94c461cb11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_worldRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a464cab923ada0e14c6e3a4000c2ea385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MpiComm *</type>
      <name>m_fullComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8e80c9067b0875c419f1b9ecccbdb46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_fullRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0bfa53f6bdaec0a6aa3dc00ee2c0101f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_fullCommSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad5be3e52676db90de1321bc94233c15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RawType_MPI_Group</type>
      <name>m_fullGroup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad455ca08c81b8d953e9a8d2bb14d03c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_optionsInputFileName</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a37195909442a817980e1cf8392b9e63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_optionsInputFileAccessState</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a48ea9a77af61344a313dfd7390b414b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::program_options::options_description *</type>
      <name>m_allOptionsDesc</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4dea510cfdd559ca96d851e55de1b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::program_options::variables_map *</type>
      <name>m_allOptionsMap</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9930b4a2fddd76196d2de047ecaac679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_subId</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2aea4a26ea39e72300f7c32594c26012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_subIdString</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a19243150a58181cbdaf58b1bacd90009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RawType_MPI_Group</type>
      <name>m_subGroup</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a6669dac8fb884d4eb3278625f0e8d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MpiComm *</type>
      <name>m_subComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac8d7b6062d9a58ef1a36eb95753498b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_subRank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acecae0962d56bae97b6476c7514b428f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_subCommSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4c7b8104e4bb3f1456aa2d85b4dc9a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MpiComm *</type>
      <name>m_selfComm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a8f1159427c10aa4dfee51936d46103da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RawType_MPI_Group</type>
      <name>m_inter0Group</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aed2620ad6e42a86f2a5057a5cdcf99f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MpiComm *</type>
      <name>m_inter0Comm</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5107d456b4267a20f3f48222e52f0c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_inter0Rank</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1feb61fba41bc96f4913892df85e6853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_inter0CommSize</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ad7a98e45d9c0379a78ee7937f83f3ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ofstream *</type>
      <name>m_subDisplayFile</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a52b4275aa8ee85994dd304d9fe95c9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RngBase *</type>
      <name>m_rngObject</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5e80f48ab043b532ee9d4864cd363574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BasicPdfsBase *</type>
      <name>m_basicPdfs</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a43b3045235a87236f0adc7df3427adc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>struct timeval</type>
      <name>m_timevalBegin</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7b2842a4eb78bcae522cf4f9a5634279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_exceptionalCircumstance</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a2a58407f6c1affeb73ce5fb33c541412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EnvOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>afe26d66495d10fc0547ccd710a30c59a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::EmptyEnvironment</name>
    <filename>a00070.html</filename>
    <base>QUESO::BaseEnvironment</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ad0288468a86fe8c57dad077b0370c7c2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EmptyEnvironment</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>af8857bb000f93307e2dbfbca222c9849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmptyEnvironment</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a542ab8f5d7c744da1655fb8024a8835d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FullEnvironment</name>
    <filename>a00083.html</filename>
    <base>QUESO::BaseEnvironment</base>
    <member kind="function">
      <type></type>
      <name>FullEnvironment</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6d9cbfd299f6be53e3883758c0fc1b0b</anchor>
      <arglist>(const char *passedOptionsInputFileName, const char *prefix, EnvOptionsValues *alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FullEnvironment</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a664220a7e2b32242f3d58bfe51d316d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3433b6293fc094095aca2e5ebce5a099</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readOptionsInputFile</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a41eadd931012db5a422f5ec13adb7816</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::EnvOptionsValues</name>
    <filename>a00072.html</filename>
    <member kind="function">
      <type></type>
      <name>EnvOptionsValues</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8abe66cfbf369f75ae702e3e12bd55e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnvOptionsValues</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a627c9d0b21e42cc57e9bbca8d67a8051</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnvOptionsValues</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1b3fefd17eeb624dd8ffab50e3d7852e</anchor>
      <arglist>(const EnvOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnvOptionsValues</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a0cbafe6611bafbaf169772088f8652c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EnvOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a46925c34598844234c1a59f15165b141</anchor>
      <arglist>(const EnvOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a573457e88db7d8f5d741795a27aaf050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2a0d46853f0a45f399aa1259d3540225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numSubEnvironments</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a0a53bbc1544a519eb50faddcfae0cedd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_subDisplayFileName</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae92ff6d68751d90fd6fbb7de98e66ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_subDisplayAllowAll</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a942d62cb804c174e1de76cc776368924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_subDisplayAllowInter0</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae7b34ee974716034ae21a2c39891b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_subDisplayAllowedSet</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afd2f167d8f568df84b3efe5df4430ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_displayVerbosity</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aacf4ef43ac39a6118ca3e9bb7f0f8414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_syncVerbosity</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a572ccae8dda30e5161c427d94d83fe34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_checkingLevel</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8c6ef31adcc7909b75a83cf30e698b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rngType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a01502ec46080bf43c99d55646e6a1b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_seed</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>adf0629a19e30b4f907b2e5fc90c9830a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_platformName</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aaecd649e9d424572e66db71533af1913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_identifyingString</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4d704b461389c12e658e1e5e811ccb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numDebugParams</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab03e99e270e681196428683a3ad0de63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_debugParams</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aef18abb5a1cf76c527b03342e2c2e8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a894118967a4d4a7e8d649124df853f25</anchor>
      <arglist>(const EnvOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a47b26b7c1fb5b40549320f80c07edfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aef4a56d0e7bdea4ef4a00db28e8525e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a26b1852fa6bc448f49b250b83ecdb2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_numSubEnvironments</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a9811f05703fcabe0a77ef903bf03e204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayFileName</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1f99d37ef7e4794b0872fd2e93efe12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowAll</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae3a11b234511f44073ad00084b27f5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowInter0</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a3524ecd74c361fea230c02146caea0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowedSet</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa40b17d3a353aad9263fd01950e574e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_displayVerbosity</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa7c6124965de6f047167d522dba27873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_syncVerbosity</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a366971d76ae58b20a9383009699bf27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_checkingLevel</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a23529f6bca32f2a9a5b95ae5bd35e64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rngType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afe4905fa4ef1c153d6a330de5c801670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_seed</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4ed878d8665ba85795590a5f053f5e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_platformName</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab2cbf82b916986d01fcfd867defdac1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_identifyingString</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a7d2fd0d59664c056b95252cf81723d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a86872eb4a81513dc64c4c3cb3b5c9c54</anchor>
      <arglist>(std::ostream &amp;os, const EnvOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::EnvironmentOptions</name>
    <filename>a00071.html</filename>
    <member kind="function">
      <type></type>
      <name>EnvironmentOptions</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a95407566e0b300fe1160713ba67d8291</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnvironmentOptions</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a9dbc6e4ec7bf564d81554782858bd53d</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const EnvOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EnvironmentOptions</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac24ba491b4136c675b1ed26ab2ef06e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0748c6bd893d2ac90cd68d50b5abe211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aeb14f206c9bae6f9f0a5c0a46e306ec6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>EnvOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a97de0e8029b2d567643ab2b1b6ba2b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a54c7a1faff073b212d67552ff5ff1e3a</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a62009a0ec72058e3ab4724a6a4102ede</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>afe57e2cd6bb9e71df65fe6d133371478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aca57a4ae24af2c2d1437f6a4d51de6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac27a465cb5378cc9b080f049f0663d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a5db2dbd99ef52563cb42c348ee53ea47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_numSubEnvironments</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a681529984ebb07b3a2b6684cd3416917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayFileName</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a500c18cec1f5a1f5d89fec2705ef9106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowAll</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a3ebc67b0780a7c5632461154099ea54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowInter0</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>acf680dfdb7d9d91d0154a65d973359a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_subDisplayAllowedSet</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aaf46a8974310e00a7569c004736a0f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_displayVerbosity</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a4f89e406c541712444f057a871a9c721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_syncVerbosity</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a009eab8a08fe215cd9a6efe81010037d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_checkingLevel</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>acd9571003814792e4214aab6969cc397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rngType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>afe9a3368caa5bcc6466bb958a43221bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_seed</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>af5e8b8eee6336e047956e262a42e9996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_platformName</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a7f53c8be62f5b0b32d01f412f6e1f24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_identifyingString</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a20ec38c1f5b7f1b288c7a0151c646e1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LogicError</name>
    <filename>a00158.html</filename>
    <member kind="function">
      <type></type>
      <name>LogicError</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a9c59a149f2c8ef10d7946f843b1b5d40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::NotImplemented</name>
    <filename>a00178.html</filename>
    <member kind="function">
      <type></type>
      <name>NotImplemented</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>aea10d6f15b473c4b9dcb865834c1af23</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FileError</name>
    <filename>a00080.html</filename>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3832f21b43e99c46bc29ee904e8dedfc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FunctionBase</name>
    <filename>a00086.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0a6135d94fa022bd3775d712fc23e32b</anchor>
      <arglist>(double scale, const FunctionBase &amp;rhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwise_mult</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af3ccfeaae0a8e918d9ce422b9c18c7ca</anchor>
      <arglist>(const FunctionBase &amp;f1, const FunctionBase &amp;f2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a542ed1bd28072fd53fcd7a49d8f2f77b</anchor>
      <arglist>(double scale)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>zero</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a9b07ff14bb5e2511afb555dcbcbfe83b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L2_norm</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0aaac902156559c64708cd41497bff2d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; FunctionBase &gt;</type>
      <name>zero_clone</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a238b9b8fc5cd901cac7e8df3018bd170</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>save_function</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa7e4f6011f7787ad9e01fab3260fa798</anchor>
      <arglist>(const std::string &amp;filename, double time) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBase</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adf2e807076f9630fe281485527e443f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionBase</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a387bb45998e02219a06a1d3a8280f7ad</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FunctionOperatorBuilder</name>
    <filename>a00087.html</filename>
    <member kind="function">
      <type></type>
      <name>FunctionOperatorBuilder</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a3db017ee660ec6640e599b43271821c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FunctionOperatorBuilder</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4b9df10fdd2ea3ee094075866641b008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>family</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a577f6065af0aefd7aa74595c6b00ef38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>order</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a433752867d11bca3f3bd7015e1a23e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>num_req_eigenpairs</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a41ced477ecceabab7828ead4bd3e75aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GslBlockMatrix</name>
    <filename>a00128.html</filename>
    <base protection="private">QUESO::Matrix</base>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>numRowsLocal</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a37c63ed8b18585d58c626f49c0849ca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>numRowsGlobal</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aff3ceb080aeb936e36d9eb7cab2b8068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>numCols</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>adf40ac42a23c600f46444e5a317b2f9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>chol</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4e059f020a04c07d252118596d1a47f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zeroLower</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7ddb5948caf244e1063b21c430b4721b</anchor>
      <arglist>(bool includeDiagonal=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>zeroUpper</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a9490f3cefc7f10d701fe5cd45f297396</anchor>
      <arglist>(bool includeDiagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>getBlock</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a7a433366209d4cf0fb1263ef32da5f14</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numBlocks</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8ea5bd6e4fce76de0e3e600a100abe7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertMultiply</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a11c63edfed75a238b6da7eb460e7e526</anchor>
      <arglist>(const GslVector &amp;b, GslVector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslBlockMatrix</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae26a24fb91a867d2f6dbb2d8cfe64ab5</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;blockSizes, const GslVector &amp;v, double diagValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GslBlockMatrix</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a8eb3681f069c0b650c5dc62629ed277d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa752584b62c19653b35c50874ff402c2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; VectorSpace&lt; GslVector, GslMatrix &gt; * &gt;</type>
      <name>m_vectorSpaces</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ae304c18d5cc424cde85df541babdcbbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; GslMatrix * &gt;</type>
      <name>m_blocks</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aaccb4dc96cb37bcad77b310bb45caedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a247fb0fc0b87fecdee054bb4660b68e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Map &amp;</type>
      <name>m_map</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>adb42d344c0b2859c3b4a4f5a3dd7875f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_printHorizontally</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aebf5e44b149cf1454b2e12995d9f8b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_inDebugMode</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a3384d3fc1a1058fce9191b0d74653911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a324053bbe984f4549f7b31f0d1aae8b1</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matrix</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a161398a2cf0c9a626651f59f5bd9ae59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a1eefeca9f35200e8275fb0fdfa0c8684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Map &amp;</type>
      <name>map</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae01c72255466cd95201bb4c7f07e1b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numOfProcsForStorage</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a7d7310149ecf33ca68c5ef7a815093db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintHorizontally</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a1f48b60a98b211770f92d42441f51c35</anchor>
      <arglist>(bool value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPrintHorizontally</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4b6bdbf50356e19e845d6134ce435ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInDebugMode</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a0fa94aaee496541e72d527b98af57bae</anchor>
      <arglist>(bool value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInDebugMode</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ad714793ba87347d88f19b79231405182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>base_copy</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a643225869ea7f8371aa638619b8c8990</anchor>
      <arglist>(const Matrix &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GslMatrix</name>
    <filename>a00129.html</filename>
    <base>QUESO::Matrix</base>
    <member kind="function">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a393780d154e02c6ff2ae8e6282335cbf</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map, unsigned int numCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6fd94d46f9c241bac85829eb74079104</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map, double diagValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aada96f50a59a8f9058a1842b0037b510</anchor>
      <arglist>(const GslVector &amp;v, double diagValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a786b09f19e4b2a2f8b43d3e5351eb692</anchor>
      <arglist>(const GslVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad588205a8bb02d4285abec2088f46d54</anchor>
      <arglist>(const GslMatrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a37ff1a0ad9e84629c1d1cda4df1dcae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5763769cb3844db2b1c00da0541f02ce</anchor>
      <arglist>(const GslMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a50d643ef1b66a9ae881a1324db819c7f</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a877138bc19abbfa1a7e34483390a6b01</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a1b7b1c34495dc6bdcac9e77b95c0bfe0</anchor>
      <arglist>(const GslMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a31fb35bf5eeafc45c0dfd7ec447f3a71</anchor>
      <arglist>(const GslMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a59bc160e7bea9f1fe562e082fc21887f</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab7e30d986fdc44262d05269a20b60203</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numRowsLocal</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab5ec937a9fd439eef1a87e12c0dbccb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numRowsGlobal</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac97f38374fae17c60dd508f0a246496a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numCols</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad5005f168fe030468e834776afb1859b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3ba4b92584badaac17274ce9aadb2651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rank</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a244f52561496792a9fb564d5a4f0f7b0</anchor>
      <arglist>(double absoluteZeroThreshold, double relativeZeroThreshold) const </arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>transpose</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af5507bf0618d3bcc57abc13110c2630d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>inverse</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a275b4bec91c45ffce825d59c4db444de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ae2bc9b0563ea232d7ccd06be45047517</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnDeterminant</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>afe7d8716005fb950cd4c2bf16e0cee93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normFrob</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3bf3826b5a8d5a9b8b8f43e34de4465a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normMax</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a048b3dd7324555448cebd7225fc179c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>chol</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6b623c4d564b327adf2a51138ad91372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>svd</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a969f83e4d889e7d627055dae52968573</anchor>
      <arglist>(GslMatrix &amp;matU, GslVector &amp;vecS, GslMatrix &amp;matVt) const </arglist>
    </member>
    <member kind="function">
      <type>const GslMatrix &amp;</type>
      <name>svdMatU</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9a568cbcdc9e69b05e1b76941b9eeb2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GslMatrix &amp;</type>
      <name>svdMatV</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5d0b3ae61abb3fb09a4e653983514d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>svdSolve</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ad4e17207209e41e4c91eefd31af4733c</anchor>
      <arglist>(const GslVector &amp;rhsVec, GslVector &amp;solVec) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>svdSolve</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8aac01c8c24ce3c0701d3b3504b37107</anchor>
      <arglist>(const GslMatrix &amp;rhsMat, GslMatrix &amp;solMat) const </arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>multiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a842b097716372288ef1dc0616bde9bec</anchor>
      <arglist>(const GslVector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>invertMultiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a2eea3056f561ffeaee754b71cfcfa27e</anchor>
      <arglist>(const GslVector &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertMultiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac70cff611af683b8a5079c6bfe0474ef</anchor>
      <arglist>(const GslVector &amp;b, GslVector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>GslMatrix</type>
      <name>invertMultiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acf38c265edb9aa769c997e39dc2a0fc6</anchor>
      <arglist>(const GslMatrix &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertMultiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9ab3664d29cdb20ff46ba05b9f993e4f</anchor>
      <arglist>(const GslMatrix &amp;B, GslMatrix &amp;X) const </arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>invertMultiplyForceLU</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a1d2137ffe34ee2261d970db896d10ebd</anchor>
      <arglist>(const GslVector &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertMultiplyForceLU</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3e454b9f2e3d7852cefccd6e84b4d9f2</anchor>
      <arglist>(const GslVector &amp;b, GslVector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getColumn</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a66db756823b03b5a66814c6868317669</anchor>
      <arglist>(const unsigned int column_num, GslVector &amp;column) const </arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>getColumn</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a75ab1a16a4e40491f764eb95da2318ef</anchor>
      <arglist>(const unsigned int column_num) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acec53efb5d0e70233a5acc326734493e</anchor>
      <arglist>(const unsigned int column_num, const GslVector &amp;column)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRow</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a94d2c6ffbc17b02403dd407600aed9fe</anchor>
      <arglist>(const unsigned int row_num, GslVector &amp;row) const </arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>getRow</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0fdd155a0c71945fa6592f6b02876ea6</anchor>
      <arglist>(const unsigned int row_num) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRow</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acc28c25e1d3c43809be718d5b0c01d29</anchor>
      <arglist>(const unsigned int row_num, const GslVector &amp;row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a70dda1ec31c9cc876f7e4bb43e33555b</anchor>
      <arglist>(GslVector &amp;eigenValues, GslMatrix *eigenVectors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>largestEigen</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>adebe56d583e87e7298a0a9a374b19818</anchor>
      <arglist>(double &amp;eigenValue, GslVector &amp;eigenVector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>smallestEigen</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0b0e65021705e04772259a91071af5d5</anchor>
      <arglist>(double &amp;eigenValue, GslVector &amp;eigenVector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSet</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0456a2b3d53081597d51cc5668c4336d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSet</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a820e4d7c9022bf1daacb3ce1d1c1e9f5</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const GslMatrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwExtract</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab02526ac204bf3d996151f7268404f0c</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, GslMatrix &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroLower</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a16df37ab8ed83c20524bc846307af3da</anchor>
      <arglist>(bool includeDiagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroUpper</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a339544c96dcdc176cc629fc326762832</anchor>
      <arglist>(bool includeDiagonal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterSmallValues</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af2bb35fbe48b5313002e472f8d1dbe03</anchor>
      <arglist>(double thresholdValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterLargeValues</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a49966d9d3c41d7f5b4ea8b3d9150e96f</anchor>
      <arglist>(double thresholdValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithTranspose</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ae1ab7bd92040d7b65b67a33958f00ad1</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const GslMatrix &amp;mat, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksDiagonally</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9c182fc0a4ed7a6f6c41bf6b1460bf59</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; const GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksDiagonally</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0f37abb7334bc739f509d8ff6fc382f1</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksHorizontally</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a66a9da48f05e3ef4ce386cedcc25fa39</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; const GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksHorizontally</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab08b0373565e9c5ffdf7f3b97d2a05c0</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksVertically</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a872a7a51e6efe08c64eee627572e2505</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; const GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithBlocksVertically</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>adc6102e609373e99b699a666bc3c0aae</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const std::vector&lt; GslMatrix * &gt; &amp;matrices, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithTensorProduct</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a41705955dad11afcf59b9cf0c38c14c6</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const GslMatrix &amp;mat1, const GslMatrix &amp;mat2, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithTensorProduct</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ace504579eee66b2b65adeb1506468bb9</anchor>
      <arglist>(unsigned int rowId, unsigned int colId, const GslMatrix &amp;mat1, const GslVector &amp;vec2, bool checkForExactNumRowsMatching, bool checkForExactNumColsMatching)</arglist>
    </member>
    <member kind="function">
      <type>gsl_matrix *</type>
      <name>data</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4457fa070f872987233806347c61e6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mpiSum</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9f310ef75cc6d10127f76ea066f58a4d</anchor>
      <arglist>(const MpiComm &amp;comm, GslMatrix &amp;M_global) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matlabLinearInterpExtrap</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a640bd42b08a74ce6e7cd662133cbcb60</anchor>
      <arglist>(const GslVector &amp;x1Vec, const GslMatrix &amp;y1Mat, const GslVector &amp;x2Vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4f5f3689f1c013fa9042ea0177d8b020</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a14c2e7e069603e6906046063d1e6ad13</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subReadContents</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6a042dc6a13fab4b1929a5222ac700f8</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GslMatrix</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af84a9a1a8ff36c5000831f5348551b1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a63a17ab71da636c9177cd1c3a04faf61</anchor>
      <arglist>(const GslMatrix &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>resetLU</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab55ec308530e4135a719181a6351840c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acbf8b79dce54e51cc699810305ae7964</anchor>
      <arglist>(const GslVector &amp;x, GslVector &amp;y) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>internalSvd</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a971c0fcee50b741419f4f2322329647f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gsl_matrix *</type>
      <name>m_mat</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a2cac0bd065e280a06445f944d5f3e3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gsl_matrix *</type>
      <name>m_LU</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ada9c659bda4c71273af34e79eba4ec81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslMatrix *</type>
      <name>m_inverse</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a153dc687fc0ce5f5ff1a5600df6ba914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Map *</type>
      <name>m_svdColMap</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a0457658d209ab7ac93fd82171e96afa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslMatrix *</type>
      <name>m_svdUmat</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a764128029cce1c35d7371c6a7faf4161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslVector *</type>
      <name>m_svdSvec</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a9c2d46159d01da442aba68fbeecb2dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslMatrix *</type>
      <name>m_svdVmat</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a13355e2467b03cf8ff514659802794e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslMatrix *</type>
      <name>m_svdVTmat</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5aca6b693035268ddcd679affc465d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_determinant</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8be32859eb361fe9865d6df3a31aa579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_lnDeterminant</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a22b386a1106b9a583edea11bccf15cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gsl_permutation *</type>
      <name>m_permutation</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a673277a250dca216e0e414110f63a9af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_signum</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a591c6afd472ae02dd79e3a109ded4d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isSingular</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>aa83274d327bb4e668bdeec51e2466c4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GslOptimizer</name>
    <filename>a00130.html</filename>
    <base>QUESO::BaseOptimizer</base>
    <member kind="enumeration">
      <type></type>
      <name>SolverType</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLETCHER_REEVES_CG</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da3950334c1352fb43bb8a958eddecc02b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POLAK_RIBIERE_CG</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da7d90b15361e281d745487c36f01dc6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BFGS</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da8a5cdd5a28aed5e30cafae6b012e1b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BFGS2</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da4ab3b504011efd319080c2ccd4031bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STEEPEST_DESCENT</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524dabcdff97e10f5f051909f21fb9ea9f90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NELDER_MEAD</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da3ac74c968e31fe93d22cc8967cc88f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NELDER_MEAD2</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524da362ff010c21a34b5bb42df8a7d901d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NELDER_MEAD2_RAND</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a46b48df880796034a4b9ac51c7e6524dab2cb93a7092e8670c59ce7d4381936b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslOptimizer</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ad10295a3103150b1549466ac97c820e6</anchor>
      <arglist>(const BaseScalarFunction&lt; GslVector, GslMatrix &gt; &amp;objectiveFunction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GslOptimizer</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a00e5600214b09df0b8ff0477a787b162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>minimize</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a47c46f655dc8513385f2678b780a5e5e</anchor>
      <arglist>(OptimizerMonitor *monitor=NULL)</arglist>
    </member>
    <member kind="function">
      <type>const BaseScalarFunction&lt; GslVector, GslMatrix &gt; &amp;</type>
      <name>objectiveFunction</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af5e20b7ecaf01bc59b1a3f2ddec7d990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialPoint</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a4dd79ad241e96f5e937b534b50f64b32</anchor>
      <arglist>(const GslVector &amp;intialPoint)</arglist>
    </member>
    <member kind="function">
      <type>const GslVector &amp;</type>
      <name>minimizer</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ab0d1ebc450eaa46f36a2d37a04ee8c20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_type</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>af44200fe3ca000860324501222d90aed</anchor>
      <arglist>(SolverType solver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_solver_type</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a643bd0c4ccd554ed65e88048a368b4e8</anchor>
      <arglist>(std::string &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>SolverType</type>
      <name>string_to_enum</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aa5ee10f794e134732d97f0f2f734ff84</anchor>
      <arglist>(std::string &amp;solver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_step_size</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a3a264289748b987fed2f99db5177ae7e</anchor>
      <arglist>(const GslVector &amp;step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_step_size</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ab417b878cf5c0aa1fb45d7161adced8e</anchor>
      <arglist>(double step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line_tol</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aaa8c1ccb10189638d4993b32a808b4ea</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseOptimizer</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a06ee4af69d1dcdcb6c5fc64337cfed16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseOptimizer</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ad0d3914f16c9539125fdf18f72e06c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxIterations</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>afee64fa553e2115c11e483409c005463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTolerance</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a31e322b52129baacf03e19278e0375f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFiniteDifferenceStepSize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a5e527eab75fab7fa43f741494fdb9f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>ae01578ed2d1ba7e92ba4f5a51347aec2</anchor>
      <arglist>(unsigned int maxIterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a236511ca3bacfd63664d018a1b8265d8</anchor>
      <arglist>(double tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFiniteDifferenceStepSize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a7f93afc910029b6a722ef3d855cd2daf</anchor>
      <arglist>(double h)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>solver_needs_gradient</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aac15d1985e8232bb8de8dca37e15d671</anchor>
      <arglist>(SolverType solver)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>minimize_with_gradient</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a96afabe144a7e159102c85a5dafcd53f</anchor>
      <arglist>(unsigned int dim, OptimizerMonitor *monitor)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>minimize_no_gradient</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ad8160dd4579b0b3944c5c16afbe8573a</anchor>
      <arglist>(unsigned int dim, OptimizerMonitor *monitor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; GslVector, GslMatrix &gt; &amp;</type>
      <name>m_objectiveFunction</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>afe0e221ebed93a455711f9f26806b1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslVector *</type>
      <name>m_initialPoint</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a62623a622a6975c372b51ffb25d2dec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslVector *</type>
      <name>m_minimizer</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a76cd70956b96167ba85df9daf6b5b7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SolverType</type>
      <name>m_solver_type</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac6eb4b0086b3a6ead2764bad2b2a6a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GslVector</type>
      <name>m_fstep_size</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aadd94f873c5ec1a38ca44ccceb23e239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_fdfstep_size</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aa71aad9b4bc0d60b4ad7ecca275db1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_line_tol</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ae45ebe43d2bf29dd31f8b60c2517280d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_maxIterations</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a9f491dcc7bc4388ee8b8ff567caf4550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_tolerance</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a383e5c3d09fd907658f7558f14a57c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_finiteDifferenceStepSize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a52d7dc0a76af37c36c5e3f8d01c8ab21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GslVector</name>
    <filename>a00131.html</filename>
    <base>QUESO::Vector</base>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad4d0487806dd59f44a828ee228ba17b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matlabDiff</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aa4f5280c13c99ef028e7838887818c79</anchor>
      <arglist>(unsigned int firstPositionToStoreDiff, double valueForRemainderPosition, GslVector &amp;outputVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matlabLinearInterpExtrap</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6f463b2409b210989f45bb7c17cee3f7</anchor>
      <arglist>(const GslVector &amp;x1Vec, const GslVector &amp;y1Vec, const GslVector &amp;x2Vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mpiBcast</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aaa5bdbc03ef0ab86bad4b86b556a48d3</anchor>
      <arglist>(int srcRank, const MpiComm &amp;bcastComm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mpiAllReduce</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>acfd7f057bdb82b601086e6b56281659d</anchor>
      <arglist>(RawType_MPI_Op mpiOperation, const MpiComm &amp;opComm, GslVector &amp;resultVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mpiAllQuantile</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a9c12f5d34643aa5d46f59570955339ab</anchor>
      <arglist>(double probability, const MpiComm &amp;opComm, GslVector &amp;resultVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ab222530a760b07f6c22eafe92585d8c5</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subReadContents</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae0047a01f01b4aaf3c67b716f4408932</anchor>
      <arglist>(const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds)</arglist>
    </member>
    <member kind="function">
      <type>gsl_vector *</type>
      <name>data</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6a668d6e6cdf69e3004e07742d066036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a0319d261c759e8f85c3f76e2ce66d350</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a80d9652ddfbd1ef87fd4ec4ab4e32231</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map, double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a982952f763dc79ad6405d9897ca76697</anchor>
      <arglist>(const BaseEnvironment &amp;env, double d1, double d2, const Map &amp;map)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae60c02165e940629b14910cf9dd43d86</anchor>
      <arglist>(const GslVector &amp;v, double start, double end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6c5eb0ce11a314a4b8af2ed75fc75b30</anchor>
      <arglist>(const GslVector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a0bc3734631b7dc54adbfa1ec967f2463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aec9896bae67226f0f0d030d0de603956</anchor>
      <arglist>(const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>abc5068be9af5256983cb2c5ecdcf8229</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a254b8ce11020280e7af0eea9b7626b4e</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ac0046d85fddd8e9dbbebd19d1b61a9bd</anchor>
      <arglist>(const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a53644e0b71d5bff6117c5634bba66fe1</anchor>
      <arglist>(const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae736e2bfbeb9f14a78f33cbbaa6acb19</anchor>
      <arglist>(const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>GslVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ac1df668b8aa9a5e1a482ab85a1b0692d</anchor>
      <arglist>(const GslVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSet</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a706d70a875a0e0c0f091e794c8baece5</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetGaussian</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a10ad46b42ea27ee0085d89b4e09b075f</anchor>
      <arglist>(double mean, double stdDev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetGaussian</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a1f13ee9d573dbab8f8efdba30fe840f2</anchor>
      <arglist>(const GslVector &amp;meanVec, const GslVector &amp;stdDevVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetUniform</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a020583cdb101420d2ac34d8cd5c4c270</anchor>
      <arglist>(const GslVector &amp;aVec, const GslVector &amp;bVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetBeta</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aa04f6e813bb7533f50b85eba3da269d5</anchor>
      <arglist>(const GslVector &amp;alpha, const GslVector &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetGamma</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ac8f6033638a8d99aa28e68cfe8ead8d3</anchor>
      <arglist>(const GslVector &amp;a, const GslVector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetInverseGamma</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a7609032ec133374fefeeb3aad12df093</anchor>
      <arglist>(const GslVector &amp;alpha, const GslVector &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetConcatenated</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6bd9c99a7de9a9203f9f12d36c1e24b6</anchor>
      <arglist>(const GslVector &amp;v1, const GslVector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSetConcatenated</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a498269f6ee2cfa975ebf4082ea5ad1a8</anchor>
      <arglist>(const std::vector&lt; const GslVector * &gt; &amp;vecs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSet</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ab41a8babfcfd0589e23155979ad90ecb</anchor>
      <arglist>(unsigned int initialPos, const GslVector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwExtract</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>abddb8cf9c1a8e596b1c7f02fbad26464</anchor>
      <arglist>(unsigned int initialPos, GslVector &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwInvert</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a55254ab9351f6ef2217aa167bb9dcbd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cwSqrt</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6b820b96b5b7e8a1af21c4f260a0dade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a5fa9fb9a84749ea69919e6bc4a5ee9f9</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a10150c873dc75f642bda5d3dd09140f1</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sizeLocal</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ace6fb1739b7cf6456b3dcde84c766fb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sizeGlobal</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aaaf58e9e980ce006ea4d2b7f69eb6111</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxValue</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad25b83a4bbb41d40a38b674df03e5d37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinValue</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a77a9a42edfc1e1500ed8a31373245b9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxValueIndex</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>af27edfee48c38ffcead1bded550da0fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinValueIndex</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>acb36ad4f7a2185a7abadf6b2261d1ab4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMaxValueAndIndex</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae77a2147d9185b1fd9b55b836cba7496</anchor>
      <arglist>(double &amp;value, int &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMinValueAndIndex</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a22094d1f67f612646f280a700f85c542</anchor>
      <arglist>(double &amp;value, int &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>GslVector</type>
      <name>abs</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a2e1d40289945c31fdf688fef8e9ea726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2Sq</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a185bf2c6caa7da0b3418e0c8d1014fdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a3634fbeeda1a009cf14e3da4e56fc663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm1</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a53702fecb316dbf31a3f9b156111d500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>normInf</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a46a3eabd6732f12ae8326764e3ef9921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumOfComponents</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad3fc6178cfa5c590e8bb241b791014f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae0998a793ae43c6ac83fdc92c826f4b2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atLeastOneComponentSmallerThan</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a5b08e4ba8665bb5849da74ac42928741</anchor>
      <arglist>(const GslVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atLeastOneComponentBiggerThan</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ad98d06b7c03175741c8208cfe62d8224</anchor>
      <arglist>(const GslVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atLeastOneComponentSmallerOrEqualThan</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a944fb91bd7f91f3987d9cfbfa3f58cfb</anchor>
      <arglist>(const GslVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atLeastOneComponentBiggerOrEqualThan</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ac8e9dacbea49e0ee56462af34aaeeed8</anchor>
      <arglist>(const GslVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a5fab5c1c4620c66c756615296b975505</anchor>
      <arglist>(const BaseEnvironment &amp;env, const Map &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Vector</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a65d54b3eb14bbf47ba9a47dea27a103a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2e2952dab0554fedd8dc9a2543715745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Map &amp;</type>
      <name>map</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a0cbedc1f6e24c0ad3b688d201fd649a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numOfProcsForStorage</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4dab068a8b5cedef00b8520c4e106a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintHorizontally</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a993054e464a2626c35667c7c97bc9051</anchor>
      <arglist>(bool value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPrintHorizontally</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>abd1a972dac88eb02a6de8ec36d04a3ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintScientific</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7ac1d907a63659233d0fe24b3abafe68</anchor>
      <arglist>(bool value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPrintScientific</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a22b34a6d1ca3acce56054b5145bd83fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GslVector</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a692a46459578174996732d16dd089067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a95d78ab4f5b1c7f16ff453d770a955fb</anchor>
      <arglist>(const GslVector &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>gsl_vector *</type>
      <name>m_vec</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a503dd126017b7ac587ff511e8d0d833b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>base_copy</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a00bd28ae4edb8f2d06359e3e95d67dc4</anchor>
      <arglist>(const Vector &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae7615172bb1e54339151d3f3d71a0344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Map &amp;</type>
      <name>m_map</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aa99c771bc8d1aafff7277ed8f7fbd157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_printHorizontally</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6bc4326d0e4f44f015bf2e30c7ee620d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_printScientific</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a55d8e946571a9491a028ecb9a8a992a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InfiniteDimensionalGaussian</name>
    <filename>a00133.html</filename>
    <base>QUESO::InfiniteDimensionalMeasureBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; FunctionBase &gt;</type>
      <name>draw</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aa052d66b96ae5bc7f2fae2da9ecf1b2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_kl_coefficient</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a07eac1a9245e12bd3bc73ea65aac5ecf</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InfiniteDimensionalGaussian</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a3dbfc9028e821ebdee212bf60bf1cf35</anchor>
      <arglist>(const FullEnvironment &amp;env, const FunctionBase &amp;mean, const OperatorBase &amp;precision, double alpha, double beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InfiniteDimensionalGaussian</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aeb80c76a7c9540756a4e5c23e8b9a836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InfiniteDimensionalMeasureBase</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a663782b71522112a0584b27205ac262f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InfiniteDimensionalMeasureBase</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ac979695e339a86943ddda77d72a4a9e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const FunctionBase &amp;</type>
      <name>mean</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a9d12c4e80eca7d797381c734d6d3476e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const OperatorBase &amp;</type>
      <name>precision</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>af08c847ce01c948b60f72be309c60b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const FullEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a16bf46c24315506ddca4739b05579b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ab3d6cf41482750591ccd8bbe2426a98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a36618403cf2767efbde981a43b900a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>coeffs</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>abf9b3d144b4804414f328fa3ccca924a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InfiniteDimensionalLikelihoodBase</name>
    <filename>a00134.html</filename>
    <member kind="function">
      <type></type>
      <name>InfiniteDimensionalLikelihoodBase</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a6f1c2bc9c09977be76b19e98d949a031</anchor>
      <arglist>(double obs_stddev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InfiniteDimensionalLikelihoodBase</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ac27b56bd19349fc4a44caa9ee3e10af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_obs_stddev</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a54a923baa674e9ee7282d145a53d1823</anchor>
      <arglist>(double stddev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>obs_stddev</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a99c973f23406360fee6aad332eade3c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aa93ddb8c6ccc2f357d5046ffb142be14</anchor>
      <arglist>(FunctionBase &amp;flow)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>_obs_stddev</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aa98ee3e521c8ab194c091f64257e7423</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InfiniteDimensionalMCMCSamplerOptions</name>
    <filename>a00135.html</filename>
    <member kind="function">
      <type></type>
      <name>InfiniteDimensionalMCMCSamplerOptions</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a75b8f9ff8efcdf810ed966a5e56fdae0</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InfiniteDimensionalMCMCSamplerOptions</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a872f635f05e17901ff245b2c231f8e27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adf83c39335cefacc35c33770bd020657</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa5828e5c03f12f69edb597cfaf2448ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6cb95c7e8adbc6ead99b2cf3fb3aed56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputDirName</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a224d09b8aa3f31aa2134338ae2a60018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a2146a3f4d0f276081484743bf3c5b5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_num_iters</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a65fbd7c98f6e3820206382da50a0133e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_save_freq</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa477dfa39894194aecbc064e2d11af56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_rwmh_step</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a08b73ed8aa86a07c5ed02394380d0434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6df370220b73fadc380aa261379460f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a15cad83477ec8ecf379aba2507d6b5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a798627198e7d75723bd48d123835503c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a897fdd1438ecdd2cd9efe5b1abad55ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputDirName</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a75dac93b87f4e93ffef95b35c7382ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a4c405def589baa661b5e76f0ca0ef280</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_num_iters</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ab27e1a612339e516eb32b326e1dd6ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_save_freq</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac2ebcd1aff902c0b01fec2366fe775b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rwmh_step</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa76584eb25581942458195d26e032578</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a8584e5a2d6d35284acbf79f64c4a2581</anchor>
      <arglist>(std::ostream &amp;os, const InfiniteDimensionalMCMCSamplerOptions &amp;opts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InfiniteDimensionalMeasureBase</name>
    <filename>a00136.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; FunctionBase &gt;</type>
      <name>draw</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a6357b505c9d50f9a5c30583bdf361d7e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_kl_coefficient</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a85c57f9eb7cfec24122f8fb856066d25</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Map</name>
    <filename>a00162.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aa5d31038467331b850a36361a60f7394</anchor>
      <arglist>(int numGlobalElements, int indexBase, const MpiComm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a381dabf55f318037416da6ae81a5db0b</anchor>
      <arglist>(const Map &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Map</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a280330a2d8fc1694461f09941a443b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Map &amp;</type>
      <name>operator=</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>afb3d6d9dc20139964090478678194359</anchor>
      <arglist>(const Map &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumGlobalElements</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac67907266dcd7108ffe5a0cbef908781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IndexBase</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a83f67cf2643489a45ef0e515d814c89d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumMyElements</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a6407f6d6a6df8a0a40923c8dc524b021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MinMyGID</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a686b1ea15e0aa9a5de9d6a03456be4a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MpiComm &amp;</type>
      <name>Comm</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aab4fc9911156b61c51f905849e3c9856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Map</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>acce20c97c69af851cbf67386beb133b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a2ed4b24e922e77695d85de7fd4e9042a</anchor>
      <arglist>(const Map &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MpiComm</type>
      <name>m_MpiComm</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aa002700b90ae2edbf5b3ee6968b28c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numGlobalElements</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a67c0e876f9c6e9dcf9eba45d34c02b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_indexBase</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a26b42eedd432d109ac0e349eff15da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numMyElements</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>afdde1747848ac8dd3cebf8eed159de82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Matrix</name>
    <filename>a00164.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>numRowsLocal</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ac5b08947e3a1830180ab32739f236d0c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>numRowsGlobal</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>acda1fae13ff41264a11510f633d972be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>numCols</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae3fadd056ae487979e8748844269497b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>chol</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a23f2bee051f28ed10bf9b0b72d701f2e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>zeroLower</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a11cb54db37379985df41e44e410e857f</anchor>
      <arglist>(bool includeDiagonal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>zeroUpper</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a0c2624bc26684a9a119252fcc0401871</anchor>
      <arglist>(bool includeDiagonal=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae2a1ec7b27cc8ae0ffb7a5c91bfec8fc</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a2e0493d6ef72c190a7026e1a505488a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::data_type</name>
    <filename>a00065.html</filename>
  </compound>
  <compound kind="class">
    <name>QUESO::DataType</name>
    <filename>a00066.html</filename>
    <member kind="function">
      <type></type>
      <name>DataType</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a8c6b0f6bcfac0df51add2501bbca575c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataType</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a66cd30184a808075ae3a90c601295f49</anchor>
      <arglist>(const DataType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataType</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a53b03374f02c033a73c02f5badc4ed92</anchor>
      <arglist>(const RawType_MPI_Datatype &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataType</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a3887d66e42db765d5355527beb5bf42d</anchor>
      <arglist>(const DataType &amp;, unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>DataType &amp;</type>
      <name>operator=</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>afbf930a49aa39e1311e3238a564b62f4</anchor>
      <arglist>(const DataType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DataType &amp;</type>
      <name>operator=</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2b8625dfaef1d753be58b8bfa8bc3675</anchor>
      <arglist>(const RawType_MPI_Datatype &amp;type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RawType_MPI_Datatype &amp;</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab7286e9ec73459566508c18aa1b1a821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RawType_MPI_Datatype &amp;</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a162f152b24bf75214130d26abc3a1b62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>adb05b378c6fc92315304d040542cded5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a88bb0289127d635cf373797adce6bd42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RawType_MPI_Datatype</type>
      <name>_datatype</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ae53ca80a0d10773a8714c4f8ba62c95d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StandardType</name>
    <filename>a00207.html</filename>
    <templarg></templarg>
    <base>QUESO::DataType</base>
    <member kind="function" protection="private">
      <type></type>
      <name>StandardType</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a0cf76482cdcaa5f6871a9de346b64455</anchor>
      <arglist>(const T *example=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MpiComm</name>
    <filename>a00177.html</filename>
    <member kind="function">
      <type></type>
      <name>MpiComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a975b6dcbce05a62ec4c4034ff200a6fe</anchor>
      <arglist>(const BaseEnvironment &amp;env, RawType_MPI_Comm inputRawComm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MpiComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a900c71143a22876c017354bc96f235ba</anchor>
      <arglist>(const BaseEnvironment &amp;env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MpiComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a740705f407d4cd32ebf66fd797977209</anchor>
      <arglist>(const MpiComm &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MpiComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a2bf46779dc9fe47cf90cb205285e8a99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MpiComm &amp;</type>
      <name>operator=</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ac72ab4b4a0181c4e37e6e6edfa6b696a</anchor>
      <arglist>(const MpiComm &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>RawType_MPI_Comm</type>
      <name>Comm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a29d53c01c5ac7ba1bb3a33911d89b6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>MyPID</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ab806f80f206210723fcb4df8185a55a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NumProc</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aa780721ae0fdeabc5a15e04cb0cad964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allreduce</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a72e137e60ef8060efb1ee5fc874fa4b8</anchor>
      <arglist>(void *sendbuf, void *recvbuf, int count, RawType_MPI_Datatype datatype, RawType_MPI_Op op, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Allreduce</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a1a9a14ec20ad72f38297d1d0ecce4581</anchor>
      <arglist>(const T *sendbuf, T *recvbuf, int count, RawType_MPI_Op op, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Barrier</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a4059971c30e023b272fccaa6aa00c426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Bcast</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>abd6af8db8b0c7fd2f5b62e26477a9537</anchor>
      <arglist>(void *buffer, int count, RawType_MPI_Datatype datatype, int root, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gather</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a184a5e411afcfb6dc41e99fca9435045</anchor>
      <arglist>(void *sendbuf, int sendcnt, RawType_MPI_Datatype sendtype, void *recvbuf, int recvcount, RawType_MPI_Datatype recvtype, int root, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gather</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a46356233f95abb83c499861b1fca3c44</anchor>
      <arglist>(const T *sendbuf, int sendcnt, T *recvbuf, int recvcount, int root, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gatherv</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a9313449240c1bb2289870309a5c711ed</anchor>
      <arglist>(void *sendbuf, int sendcnt, RawType_MPI_Datatype sendtype, void *recvbuf, int *recvcnts, int *displs, RawType_MPI_Datatype recvtype, int root, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Gatherv</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>af24ad1922fbcf8330d5ed4c57d1306c3</anchor>
      <arglist>(const T *sendbuf, int sendcnt, T *recvbuf, int *recvcnts, int *displs, int root, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Recv</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a12d7a87a4407e442c35a17d3caaf46c1</anchor>
      <arglist>(void *buf, int count, RawType_MPI_Datatype datatype, int source, int tag, RawType_MPI_Status *status, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Send</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a1ecdbeac992a2ab1ff12e45e0c1b53b4</anchor>
      <arglist>(void *buf, int count, RawType_MPI_Datatype datatype, int dest, int tag, const char *whereMsg, const char *whatMsg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncPrintDebugMsg</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a6f73891de4668c325277ddaa799cf808</anchor>
      <arglist>(const char *msg, unsigned int msgVerbosity, unsigned int numUSecs) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MpiComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a34237212169683b2df357b6b710d2a38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a62220ff8cea91f4f51e8713a9a513846</anchor>
      <arglist>(const MpiComm &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a6b63af09a9b80f14b25409bc561abb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RawType_MPI_Comm</type>
      <name>m_rawComm</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a990a22b37217ce6fc6a7c818c8d0106b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_worldRank</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aae8c456bc75534d43d682178bf98ef65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_myPid</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>aca028ecbe31a1eafa0e0bf93b331bcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_numProc</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a73c6f34523215042d866680b3e9a1497</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::OperatorBase</name>
    <filename>a00179.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_eigenvalue</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae16245b5e46e01ff81121cca14190e7f</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_inverted_eigenvalue</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a598da528247dcaec786eee415664d42e</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>get_num_converged</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a610fc538c34726a001d49c138a17817e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; FunctionBase &gt;</type>
      <name>inverse_kl_transform</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>adb765561b8de30f081fe23c53b1a03fb</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;xi, double alpha) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperatorBase</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae9f848c2418f2dca590175a53be0b250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperatorBase</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a2869fcba07398fa247c0095f3e5f272d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseOptimizer</name>
    <filename>a00038.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>minimize</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a07b2d2fdb0c13aa26f10a301ec01f94c</anchor>
      <arglist>(OptimizerMonitor *monitor)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::OptimizerMonitor</name>
    <filename>a00180.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizerMonitor</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af410f10bf0a08688797820b7409ed9a4</anchor>
      <arglist>(const BaseEnvironment &amp;env, unsigned int n_iters=100)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OptimizerMonitor</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9598b08479dc941ee342a1973e3544f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_output</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ab22352864f5b814c41e7faa26e4e815c</anchor>
      <arglist>(bool enable_output, bool print_xmin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a983780b8d56263da2616b7a5aaea3d55</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;x_min, double objective, double norm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a63055f66b67ccce3366e4d1d73469395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a2537f02d9f0aba65b352efbb6cf3c21a</anchor>
      <arglist>(std::ostream &amp;output, bool print_xmin=false) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>print_header</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a726b0a5557d308b3078e5eb3013a7236</anchor>
      <arglist>(std::ostream &amp;output, bool print_xmin) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>print_iteration</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a19991944635b5001daf8d5fdf600ef00</anchor>
      <arglist>(unsigned int iter, std::ostream &amp;output, bool print_xmin) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aaf287f2f11d69258832f2b884ecdc886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_display_conv</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7e9ebefbc74538272c7e8993f8970d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_print_xmin</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>acd3e9ae818e82af894cebd0fba681f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>m_minimizer_hist</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ad751b5fa114dfd743309276230d0fe2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_objective_hist</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a946b348ed297ce8a5f32cdabdaca54f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_norm_hist</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa321ff2a1f1a4af3965e1341ec2225e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::RngBase</name>
    <filename>a00185.html</filename>
    <member kind="function">
      <type></type>
      <name>RngBase</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a5e8dbae3304dfd27211b0d1f6de6eee0</anchor>
      <arglist>(int seed, int worldRank)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RngBase</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a64e1281954e342f704d5f3cbcbffa30c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seed</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a3094da86084e56faaae9325f1117f9a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetSeed</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a8cb8cbf14298bfcb84de1b562c069e84</anchor>
      <arglist>(int newSeed)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>uniformSample</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aed8342f0c8a4ac0a311cce9cac2b67e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>gaussianSample</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a7be9cf40cc50b973ed8c2f594f402584</anchor>
      <arglist>(double stdDev) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>betaSample</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a098089a93e29db4ad9ac106c8b5de583</anchor>
      <arglist>(double alpha, double beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>gammaSample</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>abd9abcf42426b568d4f13f5c3f3dc997</anchor>
      <arglist>(double a, double b) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_seed</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ab67b3c940ba6ffb4f2d70079fe36e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_worldRank</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a94515d2b7d493d8e4e238628716dd11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RngBase</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad8dd3cef9323851cad163c37b815bc88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>privateResetSeed</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>adbd867ec865be8813641146f7a63c80b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::RngBoost</name>
    <filename>a00186.html</filename>
    <base>QUESO::RngBase</base>
    <member kind="function">
      <type></type>
      <name>RngBoost</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8d2d2582ba8c3c892e0e20798730f0a9</anchor>
      <arglist>(int seed, int worldRank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RngBoost</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a96ffa32ae3700ca164db8799d32b19ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::mt19937</type>
      <name>m_rng</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aef65914cae8b11e345bfb082db616f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSeed</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a94c246d855ea22332b0dafc0891e328f</anchor>
      <arglist>(int newSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformSample</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aad1548eec706aeb6580af163bd80e0a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussianSample</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a9d33a495101b353e267ea7d3a6df361f</anchor>
      <arglist>(double stdDev) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>betaSample</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab859b0ff1e728c6a65c2aef62afe028e</anchor>
      <arglist>(double alpha, double beta) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gammaSample</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae4fcb113ba19dbec7684f41c3aebf4e7</anchor>
      <arglist>(double a, double b) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RngBoost</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab95981fa2be4fb685bdcdb5c1c11a28e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::RngGsl</name>
    <filename>a00188.html</filename>
    <base>QUESO::RngBase</base>
    <member kind="function">
      <type></type>
      <name>RngGsl</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a719078b54d621d51348b02c1fcac80c1</anchor>
      <arglist>(int seed, int worldRank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RngGsl</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a201a5c5a0805c8de61110736fef85b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gsl_rng *</type>
      <name>m_rng</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a48893d570695ebf59f8b96e28b9739b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSeed</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a95e515676ae7b503bd3b72eea7432598</anchor>
      <arglist>(int newSeed)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformSample</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a903f2db902f287a0d7d85f68d95d7225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussianSample</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a4ebf1a75b394d2a650c1742c132b00c4</anchor>
      <arglist>(double stdDev) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>betaSample</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a4cfa51656336eadbd137c7698e5f1b59</anchor>
      <arglist>(double alpha, double beta) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gammaSample</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a18017f2291ad584f169a7efc7ca5dd32</anchor>
      <arglist>(double a, double b) const </arglist>
    </member>
    <member kind="function">
      <type>const gsl_rng *</type>
      <name>rng</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1a67001d7a3616dd68e8fc5a691da5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RngGsl</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a47f994ab64fed4bbd1e3726d409d7f3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Vector</name>
    <filename>a00227.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sizeLocal</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>adf48150d839ad2b6ca24221df6aaa3ef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>sizeGlobal</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae22a3f92ec2dfcec49b4def6c7d0b306</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cwSet</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6ba2d1451b70dbae76802181025df159</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cwSetGaussian</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a44643b7d736001a7e0d0032ed8a7cef0</anchor>
      <arglist>(double mean, double stdDev)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>cwInvert</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a3d0d2998b1c2655e0df586e01fc622e8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a57bec5bd73b41e301b9602c849f0e75f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7bd70a5181fbc2f20aaac46b0a9e3c72</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aff103391923777d30d67f3d89706278b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ExperimentModel</name>
    <filename>a00074.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <member kind="function">
      <type></type>
      <name>ExperimentModel</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ab0e345f31c6f159b98569f16bd14d2c4</anchor>
      <arglist>(const char *prefix, const EmOptionsValues *alternativeOptionsValues, const ExperimentStorage&lt; S_V, S_M, D_V, D_M &gt; &amp;experimentStorage, const std::vector&lt; D_M * &gt; &amp;Dmats, const std::vector&lt; D_M * &gt; &amp;Kmats_interp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExperimentModel</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a490eb5273a0d88218aa3855592b54ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numBasis</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a756e958e0425bc400e9efbe28db9f72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numBasisGroups</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4e57bed4b98e09d01af68e88cbb69b1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>Gs</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a437c0f336e296613dd0b1ba0cc3af68c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const D_M &amp;</type>
      <name>Dmat</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ab6ba8daa7f0b07ea10a75ec77c529217</anchor>
      <arglist>(unsigned int basisId) const </arglist>
    </member>
    <member kind="function">
      <type>const D_M &amp;</type>
      <name>Dmat_BlockDiag</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0d18c5ce4a0c636c5626a450d504c6b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; D_M * &gt; &amp;</type>
      <name>Kmats_interp</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a18938345a2bf49634ef3d143facb433c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ExperimentModelOptions &amp;</type>
      <name>optionsObj</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a95b807c66e8ddf3e1a89b5186aad33d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af5a6ceecc3ee363f0612ab08185a0fbe</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a36bdf9636e11677b447e3ea903bfc7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const EmOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0f8c446ce92aa9fecd77fe955d6b88aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ExperimentModelOptions *</type>
      <name>m_experimentModelOptions</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a304cc0b099fc39836b6b9961c7fc1390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_p_x</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7be51ebc719d0db3821ed771df9c5144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae0561a80a0ce1ce49280a146b8e15453</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_p_delta</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae8ea601aefd8f459a8b2f3e310a3beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n_y</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af766eb21844c2c96a0e85a844616adb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Dmats</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a67de351c15fdccc9436ff2d7bcf5563c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Kmats_interp</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af9326858743e9002e408a36d03c45452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; D_V, D_M &gt; *</type>
      <name>m_n_y_space</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4d7a9a6031907ba3cc946b489f61e393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>D_M *</type>
      <name>m_Dmat_BlockDiag</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a99a2c4dceaaa788b6cb594d8d5df7a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a5d31d604378d879bf73a16e4ddc3e0f3</anchor>
      <arglist>(std::ostream &amp;os, const ExperimentModel&lt; S_V, S_M, D_V, D_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::EmOptionsValues</name>
    <filename>a00069.html</filename>
    <member kind="function">
      <type></type>
      <name>EmOptionsValues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a885bb5d561d79614295792342a9de559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EmOptionsValues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4b19acc1f95ccbc04c72ea94cbf45d9a</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EmOptionsValues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a39e2ae36e001d8f3a785dce50956d571</anchor>
      <arglist>(const EmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>EmOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a230d66de6eb21a113d59d26d1e14231a</anchor>
      <arglist>(const EmOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmOptionsValues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aeaf5e03d4e0541267b778496227af36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a115c7f58e37edb11e55afbd9f162cc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_Gvalues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a17d20101a6dd55ba8821e07828b497ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac040e7e3054170f3589841346546da1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a98e96495a5508a6514b1851ea9111ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_rho_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa1e255a88458daa5b8acca5f7e6f8506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_rho_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a3977d741d2c260ccd278c0cb01f66444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_y</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a23f9dfeb432f491621e7cad02c4a2d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_y</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4a1178b05ca29cc6c49d90da10b23e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2fe709d48081bd0bc156a183d61db8a3</anchor>
      <arglist>(const EmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1d7ddd152430b93adcd8e1ed6ffe34ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8116baa077e8981498131e6753e43681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_Gvalues</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0b6f847c0ce293aba9fb2f3f46addefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae95e930aef0fe2209652166baeb9cf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aa8a49b6cff8b40f6595d5eb8f65b001a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_rho_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>acd25c5362acf2d2e53884de74319d41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_rho_v</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8c8a5e7a8e97baebd7fce4b08cf8c546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_y</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ab6a4f177c2dbf1828b7c39e972a126cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_y</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>afaa7cacda6cafdc565ca1fb5f52cb139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ExperimentModelOptions</name>
    <filename>a00075.html</filename>
    <member kind="function">
      <type></type>
      <name>ExperimentModelOptions</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>acfe882980938b0b23b9cb8bb5d8d499d</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExperimentModelOptions</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7c9e4add7730e20d311291dae468e442</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const EmOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExperimentModelOptions</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>abf0856e1b1036fa921c97d913eef6f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af2849cedb69e1941901285ff0b239318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac89cb042fc0ae46d6ab8aadfede1d6aa</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>EmOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a737ac682271c0789ab774a3dfea80d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a138e326124068850b876eca20119e5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac179a7312666a5d6e879b949eb5f0840</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a960ebf681015404bb4fc658c38f5da21</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae2bb52d6c56f840336c92f17e1b1300b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a01b5cedaa954aaa842afc02fd1ae171a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a7523e40d51357c195b09f553835ae3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_Gvalues</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a1950d7c8c6a4a650633a49c61b4e821c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_v</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a78dde2f0a8bfb9fbce4183d8b9fdb490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_v</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4be03959115d1326c378ea88331979fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_rho_v</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>affec47a52c8a5c810f80dacd111b8c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_rho_v</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3f5a51c326fb237c2d0f1c8b43278fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_y</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a912dd466fd798d8c13de2b36ec6a4d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_y</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0b4a96cc4755f94dfc87cffe16b71a69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ExperimentStorage</name>
    <filename>a00076.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <member kind="function">
      <type></type>
      <name>ExperimentStorage</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a08fba1eaa91fad22e8ddc6f149556455</anchor>
      <arglist>(const VectorSpace&lt; S_V, S_M &gt; &amp;scenarioSpace, unsigned int numExperiments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExperimentStorage</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>af802ab34b9ca6a9f23ae25f3d2f94e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExperiment</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa3d432c53e9ac161697c7b07e7a13ae8</anchor>
      <arglist>(const S_V &amp;scenarioVec_standard, const D_V &amp;dataVec_transformed, const D_M &amp;covMat_transformed_inv)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numExperiments</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a781bb4f5824ad407003706c2e8254aa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; S_V, S_M &gt; &amp;</type>
      <name>scenarioSpace</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a51dca4a18167ea1447d030f914d99d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const S_V * &gt; &amp;</type>
      <name>xs_standard</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a515c883a6f649f35b825c566b3ac7c3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>n_ys_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6b70bcf33a5807a8fabeac35ae210d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>n_y</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a12a9f6c9cdd23d0f3b0bc2bb44fb4267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S_V &amp;</type>
      <name>scenarioVec_standard</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a3e93fc4db9241154eb15f0c944576bee</anchor>
      <arglist>(unsigned int experimentId) const </arglist>
    </member>
    <member kind="function">
      <type>const D_V &amp;</type>
      <name>dataVec_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab2d284a7b0d396eb63b888acf6a6bf5a</anchor>
      <arglist>(unsigned int experimentId) const </arglist>
    </member>
    <member kind="function">
      <type>const D_V &amp;</type>
      <name>yVec_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6c4d014ef36e48fb58e92bcbb8e00415</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const D_M &amp;</type>
      <name>Wy</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a4c5e6341ee44fb49580e51c8ec875330</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa977fba213eeef06cfddec27ad58fe36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab58a604add1c9d5a8efe76c49655862e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab960851f934bc783c8af7e85794d0068</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; S_V, S_M &gt; &amp;</type>
      <name>m_scenarioSpace</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1f8642b56c1c94e1dae14af0f2770490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a7eac25f31253655a8d0f457596d98793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_paper_n_ys_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a601d1e4a29b5cc976e8b2df598278d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n_y</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab392f8bcadfa089fa5a12649a82c40fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_addId</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6c929715fb4bb720b5fc4fb6847a4cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const S_V * &gt;</type>
      <name>m_scenarioVecs_standard</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a8d988295852399c5a1ead8cdf69cc929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const D_V * &gt;</type>
      <name>m_dataVecs_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aaee60b2128b0fa06dcef0fce430447ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const D_M * &gt;</type>
      <name>m_covMats_transformed_inv</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a7f13f335e45cff562490aee89d6b3787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; D_V, D_M &gt; *</type>
      <name>m_y_space</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa947423fe02666232ff7b8ed1f3c6bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>D_V *</type>
      <name>m_yVec_transformed</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a2e0f41b0299f33131f8dadd90e03cadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>D_M *</type>
      <name>m_Wy</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>abcf917ce29b921a033046d65f321f3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab107d15c6ba0b86ddf22e764774e4760</anchor>
      <arglist>(std::ostream &amp;os, const ExperimentStorage&lt; S_V, S_M, D_V, D_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmExperimentInfo</name>
    <filename>a00103.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmExperimentInfo</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1bb2492f471846ff0a10305f468f33aa</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, bool allOutputsAreScalar, const ExperimentStorage&lt; S_V, S_M, D_V, D_M &gt; &amp;experimentStorage, const ExperimentModel&lt; S_V, S_M, D_V, D_M &gt; &amp;experimentModel, const BaseVectorRV&lt; P_V, P_M &gt; &amp;thetaPriorRv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmExperimentInfo</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3be680b0da76edaa239532c5ceb32899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a7e6d63d1bbd727b074e4b5cb3d7aad9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ExperimentStorage&lt; S_V, S_M, D_V, D_M &gt; &amp;</type>
      <name>m_experimentStorage</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a23c9094e4e9e1dd1109804c5c61b05a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ExperimentModel&lt; S_V, S_M, D_V, D_M &gt; &amp;</type>
      <name>m_experimentModel</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6fb563fba71e43d31527471576a73399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_p_x</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a94a23f74caaf3d938558098fc5c8cc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_n</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a765439853f2b73c775d945a12feb4b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; const S_V * &gt; &amp;</type>
      <name>m_paper_xs_standard</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac93ef87fdb7bd4532d33d2e05597106b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_paper_n_ys_transformed</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ace80eb540ba465d264f3e4e621cac42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_n_y</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4d2afa7e2e33389b411fd86f2424ec56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_p_delta</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a80c1ad6387129664f81fb87ee80988d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_F</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8b818c3fe25176b5ccd00a8d283cdcdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_paper_Gs</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5cacd70ea05d2f91c3722c649f98b01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_paper_n_space</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa2c247c9d17e61844efb1a2d3ae14b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_5lambdaYDim</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abb69da51540a0a87d94d36f43094f6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_5lambdaYSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8e46bc6a3a441115a09edb4831d6053e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_5lambdaYMins</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a7d617baedaeea4c092320d26c8d2be73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_5lambdaYMaxs</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2f321e2b9624b6f172679c8b3b4ee6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_5lambdaYDomain</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afa9ebf766401a20c3ae6bc954560a0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_5lambdaYGammaAVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aef39d65e7667741d439091985fdd9387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_5lambdaYGammaBVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a16857069ee52e49941ff3c0389e74904</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_5lambdaYPriorRv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8c68a46597dd954d410b1c755ec05caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous5</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af33ca0f32bc152b6f9f29b9816522bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_5lambdaYVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa6b06129dff4dc613f8a5b3e806bb64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_6lambdaVDim</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5c81cb20ccb49429f1ef74d0567ae4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_6lambdaVSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa01f85520d59068db5072ddecb26dfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_6lambdaVMins</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aeb6485660b3d73ab03887e06e8c2cbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_6lambdaVMaxs</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab0628649236440207f7040a3849fd884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_6lambdaVDomain</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a707725ab5f168f02959488aa58e4b852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_6lambdaVGammaAVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a267d2832c6694672abd64501d94fbc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_6lambdaVGammaBVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a16cc39e45d611d901db5272ecda3da23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_6lambdaVPriorRv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a013222ea5b1869681d3679d3cee5ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous6</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac69554b4525ab656aeb9ce18611733bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_6lambdaVVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a20428b0ad5d0a44c705206cb206dd091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_7rhoVDim</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac5aeb1e0ada47777339c2122cd7c1340</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_7rhoVSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5d9148448efe5478858d36f02c03d798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_7rhoVMins</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a06d49adc4e5c6db50861b6f9136f2efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_7rhoVMaxs</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af4d7488046b63bd8cb2e31d3f9689876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_7rhoVDomain</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab8bdc1407c6903d5fc3634dc7d622e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_7rhoVBetaAVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1f00f389df5f1d2281656c546206d87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_7rhoVBetaBVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6a991ecba1682b5acc2459f11384904c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BetaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_7rhoVPriorRv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae9712937ee50de66b5ab42fee54c7755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous7</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1dc14c891c8f66230d61b41652362674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_7rhoVVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac8362f6e39739350f20950b892eb0081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_8thetaDim</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6ef91dee2bce1c438d1beefc2852d67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_8thetaSpace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a5fc5889a3828af13d2c81df094b9cd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_8thetaPriorRv</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a595dee658ff03a4f1bb7452ac0898110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous8</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1617c84ce0b78af36e3c03c8932bc6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_8thetaVec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac9968236243c971c57334f1e309369e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_v_size</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a649050e50b4f03505d30704f219988a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_v_space</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4ee2f83b601c4064f908ecc34f9a83fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_unique_v_space</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa1e0a0786754fc69df5e10e2e0d25c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_rho_v_space</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac7ccf5314e37135e136c42f3774918b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_y_space</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae1acc112cacaeea51d5282227b7c58d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_rho_v_vec</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9a4faf4f60c136b7a2171142849ea163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; VectorSpace&lt; D_V, D_M &gt; * &gt;</type>
      <name>m_Imat_v_i_spaces</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae11dd61a51ba54f7d7569e277299f7a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Imat_v_is</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad4f2f3ac6f92e7fc50ffc557fd1f03a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; VectorSpace&lt; D_V, D_M &gt; * &gt;</type>
      <name>m_Rmat_v_i_spaces</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad6375c7b281cd87d73e6dfae5fdcf8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_v_is</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa8d56963f8abf55b1a53373eaff5902d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; VectorSpace&lt; D_V, D_M &gt; * &gt;</type>
      <name>m_Smat_v_i_spaces</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae1684086194db0ba7f6b63170fc4a7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_v_is</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a3d66949ec9fe1168173a25b55afa7003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_v</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aed352afbe10da06af794cf9552e963a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_v_hat_v_asterisk_is</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac78721c2ebef0800720933cf5c5435b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_v_hat_v_asterisk_is</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4152341ef60b9d276191c4c959ab48bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_v_hat_v_asterisk</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acb3a413319b1d87537389accbe938e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_v_hat_v_asterisk_t</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a0265a512edaa6093a889e238a04dee55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_PD</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a023d3d938c0f984e1895401fe7c58a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const D_M *</type>
      <name>m_Dmat_BlockDiag</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a4e7b4f705c4dec55bf21c803c67c6a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Dmat_BlockDiag_permut</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a68dc4e158c5aabd7ded97421e6139036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const D_M *</type>
      <name>m_Wy</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aab17c08f02173cf8bffdf01cc32f2649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_v_asterisk_v_asterisk</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af7296564c5007366de103d8da5c64045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmJointInfo</name>
    <filename>a00104.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmJointInfo</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7c5c5ec7b63d0d0e616833bb771fa367</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, bool allOutputsAreScalar, const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmJointInfo</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a44af8afc2049517a06c14e6531c1c6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2c016ef5ae7dccb9c609f064a485f565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_unique_u_space</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a53f0276531c84e091db25a908eb49a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_u_asterisk_u_asterisk</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a48236019d6c41f49340571410fbdeaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_u_size</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0c9c3fc75006c5e2f37b926372106c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_u_space</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ada600f4a5e0313654fe3ba0d4df4feff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_u_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a53143072ef301d54a70e5f322fd238b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_u_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a55c341afd9fe773de1a7fc4cbfabb2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_uw_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a19d0b035071649510199390c94d5e821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_uw_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a75fe18c3aa71bc6874ffacb3162bee34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_uw</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a046e2c811f2de8da008599dc693852fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_uw_t</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac02418f6158ec655ce66eaeabf318ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_u_hat_u_asterisk_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a45f6c7589e6834a385d299fbea978f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_u_hat_u_asterisk_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aa15af88c37f3ff4fd33eef74dc8294a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_u_hat_u_asterisk</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ae9c626081d88d69fd734240fe0694e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_u_hat_u_asterisk_t</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad64a9f529bbf00d7692a6d500975e1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Rmat_w_hat_u_asterisk_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aea3c4ab19fccc56222b3148150eb5af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; D_M * &gt;</type>
      <name>m_Smat_w_hat_u_asterisk_is</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac87933d9b09e5ced5d5b7fd3fe5d1131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_w_hat_u_asterisk</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2a7a9b636ebc30ae0957a279688b5cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_w_hat_u_asterisk_t</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a440fa54a27d9949ce6765cd6d683e2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_vu_size</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a1b53a2abdc4ce34556b5fa891bda8e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_vu_space</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a31d0893a044370e374f3d657b2cc777b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_unique_vu_space</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6089dceac43eeb1b10a8d7417626c674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_predVU_counter</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>af69791408234bbb989431185dfb017ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_predVU_summingRVs_unique_vu_meanVec</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a39c3ef693dc2aaba99f58558ddc0e5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predVU_summingRVs_mean_of_unique_vu_covMatrices</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a941f1e50a345671a3a623ca1ef3c335a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predVU_summingRVs_covMatrix_of_unique_vu_means</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ab05b66458682e523a3de17b47fcce30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predVU_summingRVs_corrMatrix_of_unique_vu_means</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a5733b7844a21e2b7fcf54a0116141cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_omega_size</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aab9596db9469404c2011c03bd450bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_omega_space</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a050efe660d2642374a369ad3fc51c1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_V</type>
      <name>m_Zvec_hat_vu</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad7f713b6a4acb97e8f92b99f49307890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Smat_u</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a4b35c51f1fa8105a352146800c3bcb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bmat_with_permut</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a99a3cf4b31fab1978fe2c78ce290237a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bmat_without_permut</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a277a1044288fe1e441e32214ecadce59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_Bmat_rank</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7bd6881edf30c91020687920ede4a6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bwp_t__Wy__Bwp</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a2af011d95ea008c55be3516d4dde8478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bop_t__Wy__Bop</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad7190dfea4dda137d6873d2922ec8fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bwp_t__Wy__Bwp__inv</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>afdb201dda84d3a29c0a90cc096b7b98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Bop_t__Wy__Bop__inv</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac5013c4176e71f2bfbd70b0a443c46b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_y_modifier</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a330859da56183338e7f4a288b22bc04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_y_modifier</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a025cae75393b236d857a07e27a9f209f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmJointTildeInfo</name>
    <filename>a00105.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmJointTildeInfo</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>af4c7a3de593428f25209681c30fd8a14</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e, const GcmJointInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;jj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmJointTildeInfo</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a3bc077e389cc250896cd43b1908b7610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aa3ac21f3176f49d0fd994d7af7a240f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Bmat_tilde</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ab12a2d3b360bb8945ecdf88f16081a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_Bmat_tilde_rank</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a81ccfae9f02f44f2d79b032694ef3084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_vu_tilde_space</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a7a6ff744777e5fd4ee04c25e850fec7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Lbmat</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a71fdeb509b89176152970e8559c22ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Btildet_Wy_Btilde</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a30eefa5d1fe98bc5a693f09b99a05233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Btildet_Wy_Btilde_inv</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a7d4d56781b57d9474f7a2b6af60d31af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_V</type>
      <name>m_Zvec_tilde_hat_vu</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>afd49d0600ccd23ebd6a8a4521d2a60c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_a_y_modifier_tilde</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a155d9569609523ee78fae35603e2f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_b_y_modifier_tilde</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>ac5fc1d80d41cba1a8e382e4b6afe4720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmSimulationInfo</name>
    <filename>a00107.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmSimulationInfo</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a835d77ad120b2d5ddad0eedae2c2761c</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, bool allOutputsAreScalar, const SimulationStorage&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;simulationStorage, const SimulationModel&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;simulationModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmSimulationInfo</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9199d96b5ceed5ae57f33710c9741856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>accd91edf9d3f1d73a422478e1181b249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimulationStorage&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_simulationStorage</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a00f7e344e5fc357f90eb09765f1eeaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SimulationModel&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_simulationModel</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0bd7ba5f03b5c6baa20c2a5ec2b61dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_p_x</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a67b4605cbf5ec995be286e7d60ab14ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; const S_V * &gt; &amp;</type>
      <name>m_paper_xs_asterisks_standard</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a5d231d34231d174f0bb826c7964ea021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; const P_V * &gt; &amp;</type>
      <name>m_paper_ts_asterisks_standard</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a24b2de0e354afd17c239b2ee8ea984cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_p_t</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2ace3543e3f69da560dd870a4bed155c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_m</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6daed492ea5b96051913550792d07d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_n_eta</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac41e4decb8fcbca2f8d2639000d0051c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_paper_p_eta</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae21faad2072168584db5e221fb363c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_paper_m_space</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac23a022fdb5014a8abc2e7ebb77eb195</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_1lambdaEtaDim</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0dde0f06c175dd45a304b1dceb63c0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_1lambdaEtaSpace</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a592fb782a827c47fcd93cfaceb9d400c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_1lambdaEtaMins</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a47f2aefc8c06f46040eea2c789fe78b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_1lambdaEtaMaxs</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a41feb56d581f0819b5ad7a5d4c8e6ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_1lambdaEtaDomain</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ab7ebf5b1d9448df3efc5b05519264b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_1lambdaEtaGammaAVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9ff49d8c283c454c6503bf2cd24c6024</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_1lambdaEtaGammaBVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7a90de28e09a9520b11ccb6fd2b50167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_1lambdaEtaPriorRv</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac18368432cc6f08ecee5dcc0130fe68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous1</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a1eb7d7b2aaaa6872d6103f62579b7e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_1lambdaEtaVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ab4b4e8622f435ca29dcd60a6c7ab5f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_2lambdaWDim</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a032524c8143b3bc4f6072ef359756a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_2lambdaWSpace</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a929382865fcb4a687d4437c1c246f88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_2lambdaWMins</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae69d48978e451e30e67b1079ddfe6f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_2lambdaWMaxs</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae675e5ab0f6a18b72415f3430813a4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_2lambdaWDomain</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7266608da0cc93b88af6a6e0b1e45e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_2lambdaWGammaAVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad0ba5e575f24d3497c9ec014e5c33135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_2lambdaWGammaBVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a528bc3b03945cfbc8479907ba233cc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_2lambdaWPriorRv</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7c3341d748a5974ae60452733bafd80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous2</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a17eab873599ba71724c4fe17074444c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_2lambdaWVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a5d401088272fac2cc2bd24a7cfc6558d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_3rhoWDim</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>add8ae5ef57fa51db09421bcc59596891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_3rhoWSpace</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad82e481d13723304e157f5b439b2e15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_3rhoWMins</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a5fc509ac6e292fb34998082d36ca48c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_3rhoWMaxs</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac6ce8bb4e49e00b9db2b3752803eaf2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_3rhoWDomain</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aafc2cdedf644564eb4ea831e3792b7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_3rhoWBetaAVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a41e70ecbf78be901f1dc3899ae607f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_3rhoWBetaBVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2e05f691d01784de95a6557d42a853d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BetaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_3rhoWPriorRv</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3b08d5f6af584c4ea9cb13fc3d7aba28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous3</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a1bb839556c80bfe62c2f0a584068d7ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_3rhoWVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2cc4c1fba304448cb1e0d238fa80c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_4lambdaSDim</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af46d912df77311fdd02ab1d8541ea192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_4lambdaSSpace</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a884e625d8224364b34cc8a3cd6f81a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_4lambdaSMins</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7d1886bb771de7d3ef6523b1b49e3ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_4lambdaSMaxs</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af2ec52031bc8d2e532710f2bf3ceaa90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; P_V, P_M &gt;</type>
      <name>m_4lambdaSDomain</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac3182806ab242cf205f6a8b742726374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_4lambdaSGammaAVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae4e66641e0eec39a843ae4aa0e4ef5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_4lambdaSGammaBVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a18827157993daa4a8a68aa44e2267934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_4lambdaSPriorRv</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6c4335f260f88bb7b2014c6339465c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previous4</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a65286f027c7cc6d2708031b8628502cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_4lambdaSVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>adf17805fd1858e1d64818f2cc9b93aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_eta_size</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2bc98cf254cbe197ca802cd1abacb0b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_eta_space</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af5ce632a9647f5af12daa509adb07b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_w_size</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acb27994dee9beefcfbe71a31ca48d46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_w_space</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a655c9f5a8f608d0ff12b89c9e5a33a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_unique_w_space</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6a5d796a0b321452b460ff2dde4ca643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_V</type>
      <name>m_Zvec_hat_w</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad9fd4332982a78d306ac82f0a55602a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_rho_w_space</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3e28e197d00c9a3f9f741aa983cdac08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_tmp_rho_w_vec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae2470864ba78068bcb5c508ca4e0d6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Q_M * &gt;</type>
      <name>m_Rmat_w_is</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2f8fe18188320b7c77fdd306dc77825c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Q_M * &gt;</type>
      <name>m_Smat_w_is</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a374d9878f28033225feb01a21d223224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_w</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aebb5f5e22792bd11afe250b25270f4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_w_hat</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>abf3aeec8c65ce59af8ec952e7ff8cb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Q_M * &gt;</type>
      <name>m_Rmat_w_hat_w_asterisk_is</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a217279812ea8a7e1d98ec3abb47e41dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Q_M * &gt;</type>
      <name>m_Smat_w_hat_w_asterisk_is</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3ffa6e575a6d5bc8d84ce41fa7f9e4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_w_hat_w_asterisk</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a28dad949979138d3fc4197f82794e1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_w_hat_w_asterisk_t</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae1605bbffca0cf630554d306e1d34fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Smat_w_asterisk_w_asterisk</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a5c0266ad126428477a863fb48cb6e243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Q_M &amp;</type>
      <name>m_Kmat</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a23853c21452b2e3262c5ad50b6b0ed8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Q_M &amp;</type>
      <name>m_Kmat_eta</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af9f0dda4adaaf4358033e96f0020b8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_Kmat_rank</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a326e10ae3329d89dbe6c4511411994be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M *</type>
      <name>m_Kt_K</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>adf7eb036385566367f1b3f9632101256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M *</type>
      <name>m_Kt_K_inv</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>af86693096ea9a067304f4cfa850a59f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_eta_modifier</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad44b60452c232b64c287013156d16721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_eta_modifier</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0914479eea22a299da694199c23d039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_predW_counter</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a1ffe695262dc4a58bb9d5a17f586bd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_predW_summingRVs_unique_w_meanVec</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>afc4450e3ff1e8bbe5386f9a6e98a6e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predW_summingRVs_mean_of_unique_w_covMatrices</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a102421484f53ba68e84583e3705f5670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predW_summingRVs_covMatrix_of_unique_w_means</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7b0ef573e16fd0106694a1b4173fd848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_M</type>
      <name>m_predW_summingRVs_corrMatrix_of_unique_w_means</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a4fc1d1015290fb7d4c705127d65e72a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmSimulationTildeInfo</name>
    <filename>a00108.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmSimulationTildeInfo</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3c4916ea29a5889885efefc7590aa026</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmSimulationTildeInfo</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a43c3d43801700a6af2b0999dfaf8f5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a833c5bad7178cf166dce2f3a60b0d4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Kmat_tilde</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a69f504bd1df103cd0338e58118329460</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_w_tilde_space</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a55826d33e1e45a3b59acb8f41da768cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Lkmat</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>af9ad19c702c196f97d6f681a5736d24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Ktildet_Ktilde</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3adcb120a0d3f05cbc7c1f3fe1cf5129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_M</type>
      <name>m_Ktildet_Ktilde_inv</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae81df1971b5a08291ece7239bdea5725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Q_V</type>
      <name>m_Zvec_tilde_hat_w</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aab65391751ac9a1622cf571540e78df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_a_eta_modifier_tilde</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac2e01a7f9a5100cb81f54355e089f97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_b_eta_modifier_tilde</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9b842e469e604120279c64a5c734a265</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmTotalInfo</name>
    <filename>a00109.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmTotalInfo</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af9fd485bb84c74e5723e13dd46876480</anchor>
      <arglist>(const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmTotalInfo</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a227d8c1abb7a8ded258af94917f912dc</anchor>
      <arglist>(const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmTotalInfo</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a0d826f13d1486e4b0ffce104fab78de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>initializeTotalDim</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aef59d0eab67332c9afc1463d36c2b850</anchor>
      <arglist>(const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>initializeTotalDim</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a1b9e017c70655f8d765ce3ec4d80e6b7</anchor>
      <arglist>(const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e)</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a950793b3c950ac321fe9677a89e8915b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numConstituents</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a19ce42acd407314470eb9e5e67761468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const VectorSet&lt; P_V, P_M &gt; * &gt;</type>
      <name>m_constitutiveDomains</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aabcf6720d0134ff29db9f2ec650dd485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const BaseVectorRV&lt; P_V, P_M &gt; * &gt;</type>
      <name>m_constitutivePriorRvs</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a21ce7ad2fbcc5c4eee29d90d945576a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_totalDim</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>acb5df94341dd290e42305c74c520d6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_totalSpace</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad3647156e01fd4b9f092e6f8ae19c707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_totalDomainVolume</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aff8615ed10112eeb2b945756953fd91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConcatenationSubset&lt; P_V, P_M &gt;</type>
      <name>m_totalDomain</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad9a4ea908dc0f8e099806649c933c29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConcatenatedVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_totalPriorRv</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4161cf00af38922d786892efc81988f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GenericVectorRV&lt; P_V, P_M &gt;</type>
      <name>m_totalPostRv</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab394621b163c739e4a25f91582a120f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_like_previousTotal</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a6809c34f80e81238dea8abe24fa01552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_totalPostMean</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a2eaf8b7f2c23c2d1181f35b4bb4fb0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_totalPostMedian</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a59b19543687385ccb68809206963c23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_totalPostMode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>abf8ea058b4919f96567778335b71aa31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_totalPostMaxLnValue</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a926ac87abe17a0745ff44605addf7cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>P_V</type>
      <name>m_totalMLE</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa97a07ed6922cfbb47450c8979057555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_totalLikeMaxLnValue</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a6ac8adc3e22918c588554b24d241c0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSet&lt; P_V, P_M &gt; *</type>
      <name>m_solutionDomain</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a246951b577ac46dcb14092f76f4dfecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseJointPdf&lt; P_V, P_M &gt; *</type>
      <name>m_solutionPdf</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a93dd19898cd1144bd8da6de1ce90634d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseVectorRealizer&lt; P_V, P_M &gt; *</type>
      <name>m_solutionRealizer</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a45ec2b1b59aad7d5a4ae0f856699a0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MetropolisHastingsSG&lt; P_V, P_M &gt; *</type>
      <name>m_mhSeqGenerator</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a6c420665ea8a2643da0310a9aea402eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MLSampling&lt; P_V, P_M &gt; *</type>
      <name>m_mlSampler</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af8b7a519d155260051c145f0bae996f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BaseVectorSequence&lt; P_V, P_M &gt; *</type>
      <name>m_chain</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a45f4ce18666c80fb9af0373536b9293b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a757e1a035bfc365d31d894f0fdcb83af</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmZInfo</name>
    <filename>a00110.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmZInfo</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a3368f2f5ec04a86d1551eabf716038eb</anchor>
      <arglist>(bool formCMatrix, bool allOutputsAreScalar, const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmZInfo</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aa1e52955fe2803ccef5f46fcae0b454d</anchor>
      <arglist>(bool formCMatrix, bool allOutputsAreScalar, const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e, const GcmJointInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;jj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmZInfo</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a146cf5a4a1fab619f974f457dc22da7a</anchor>
      <arglist>(bool allOutputsAreScalar, const GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;s, const GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmZInfo</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a7f0719eeee1982e9b2b925ad361bb9b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aaf565ab9e84f3d17407890d2149cd7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_z_size</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a26dbe9ae4361602cdd3a3f4409c1262d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_z_space</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a507dae47f154105236b51911517fdad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_V</type>
      <name>m_Zvec_hat</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a7603502711cf51f508c7f5f43556f90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M *</type>
      <name>m_Cmat</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a8f6baa0957b76f7d16047674fd91daed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_Cmat_rank</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ad28dd3bef8aefc574b9bbcbd97de938c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a47c86b1fa9b28cf26838c5dba471f57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_extra</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>abb2fd0b3504a85927ab343e7ff356ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z_hat</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aad53715f0211361f478f762cf0e78a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z_hat_inv</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a103f25db2e99342fa85def17e26c34bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ab8365f7106436664225330899a618443</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmZTildeInfo</name>
    <filename>a00111.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GcmZTildeInfo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a624e7903c2d69d6d588e9dcf123176ca</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, const GcmJointInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;jj, const GcmZInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmZTildeInfo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aa346a6e8542a42804dadf277acf24f2c</anchor>
      <arglist>(const GpmsaComputerModelOptions &amp;gcmOptionsObj, const GcmJointInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;jj, const GcmZInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;z, const GcmSimulationTildeInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;st, const GcmJointTildeInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;jt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GcmZTildeInfo</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a796f6cbeeb6673e145fec824428d4cf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ae4398f7df32219bec1b8c476ce8ff2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Cmat_tilde</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a328d668cc10c7f10c1ab5664a68476b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; D_V, D_M &gt;</type>
      <name>m_z_tilde_space</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab11d5d8ad4446f3ce097283aa91bf414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Lmat</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a3201b9ceb9937a848f309e484c9856cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_Lmat_t</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a75aee944c67438532c14c34a4552a791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_V</type>
      <name>m_Zvec_tilde_hat</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a26c6a1bb51c7fe79d0d4b27849c1d5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z_tilde</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ada2cce908b970078fc533f9290000eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_extra_tilde</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5d88b842eaef3a3681c35f23a2488588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z_tilde_hat</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a02f8db07f44764786caff828e5270cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>D_M</type>
      <name>m_tmp_Smat_z_tilde_hat_inv</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a47576e0de498837b3fa50a642b8bd795</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a173c1e39bc87a2ccc3fb73a459693cc3</anchor>
      <arglist>(const GcmZInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GPMSAEmulator</name>
    <filename>a00125.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseScalarFunction</base>
    <member kind="function">
      <type></type>
      <name>GPMSAEmulator</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a5a9a87ffbaaea4e6c3120a09be92c4b4</anchor>
      <arglist>(const VectorSet&lt; V, M &gt; &amp;domain, const VectorSpace&lt; V, M &gt; &amp;m_scenarioSpace, const VectorSpace&lt; V, M &gt; &amp;m_parameterSpace, const VectorSpace&lt; V, M &gt; &amp;m_simulationOutputSpace, const VectorSpace&lt; V, M &gt; &amp;m_experimentOutputSpace, const unsigned int m_numSimulations, const unsigned int m_numExperiments, const std::vector&lt; V * &gt; &amp;m_simulationScenarios, const std::vector&lt; V * &gt; &amp;m_simulationParameters, const std::vector&lt; V * &gt; &amp;m_simulationOutputs, const std::vector&lt; V * &gt; &amp;m_experimentScenarios, const std::vector&lt; V * &gt; &amp;m_experimentOutputs, const M &amp;m_experimentErrors, const ConcatenatedVectorRV&lt; V, M &gt; &amp;m_totalPrior)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GPMSAEmulator</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a83b0141c0f6e9d55f2ccb12852b3630d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a12d89bfa23e664e6313fe56b59036d27</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a534c125901169d595fecf63f52235497</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_scenarioSpace</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a3a769f488973fb803d8af9490adead47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_parameterSpace</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae2994e1b2a66ba56c04c75aee6588287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_simulationOutputSpace</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a3f13e8a06bd44b6d02dfd822a2102708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_experimentOutputSpace</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae15347027fbc36e035ac6e7944171bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>m_numSimulations</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a36efe33e9cc063f2334d08afdc9ac3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>m_numExperiments</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aeeda19b0edbb7655377839f87bc0cfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>m_simulationScenarios</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a0b8f92d5663149d1870c42481a0607ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>m_simulationParameters</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ab74e1a6b8fe370172dd0abe3f95a167b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>m_simulationOutputs</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a830e5b7bd045ebea8e4d0851c85b715d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>m_experimentScenarios</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a6f72da101966f4bc7a20ba341e8908f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>m_experimentOutputs</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a8df373dcd03f4a10cb551aee89a8e161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const M &amp;</type>
      <name>m_experimentErrors</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa74e5c18f811cddf129494d83be2c98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ConcatenatedVectorRV&lt; V, M &gt; &amp;</type>
      <name>m_totalPrior</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>abb56bd48a64d02647ed14c229e91e789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GPMSAFactory</name>
    <filename>a00126.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>GPMSAFactory</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa93d63181da9f4536833c65d91d00252</anchor>
      <arglist>(const BaseEnvironment &amp;env, GPMSAOptions *opts, const BaseVectorRV&lt; V, M &gt; &amp;parameterPrior, const VectorSpace&lt; V, M &gt; &amp;scenarioSpace, const VectorSpace&lt; V, M &gt; &amp;parameterSpace, const VectorSpace&lt; V, M &gt; &amp;simulationOutputSpace, const VectorSpace&lt; V, M &gt; &amp;experimentOutputSpace, unsigned int numSimulations, unsigned int numExperiments)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GPMSAFactory</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa03706b0f5e588290a40afb39a54a588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSimulation</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6944eaa48c2d6ee5eb7cc44d5d68a76f</anchor>
      <arglist>(V &amp;simulationScenario, V &amp;simulationParameter, V &amp;simulationOutput)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSimulations</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a8f15fa05d11a1256779f50cad75c04f4</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;simulationScenarios, const std::vector&lt; V * &gt; &amp;simulationParameters, const std::vector&lt; V * &gt; &amp;simulationOutputs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExperiments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a3cf872d1cb3c86c1ff1fed11ed84ad8d</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;experimentScenarios, const std::vector&lt; V * &gt; &amp;experimentOutputs, const M *experimentErrors)</arglist>
    </member>
    <member kind="function">
      <type>const ConcatenatedVectorRV&lt; V, M &gt; &amp;</type>
      <name>prior</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a647a34de1c7add6ea14d3bb3ac835e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7429df45927182f47e427bb97080ec5d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpHyperpriors</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a91e60381b16e730e94c327bca95e96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numSimulations</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad2971e590b46c0afd001086d74ec6638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numExperiments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a866abdbc73d40ac0dc9341037004fa95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>scenarioSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a810bd00c12416c17d2facc63665920af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>parameterSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac00943c6eebb9ade5275a5c1af682c87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>simulationOutputSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a761ff1c8660deda89f7c7c08bcd3f691</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>experimentOutputSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a1ab60fe6b7f23d670570a7f059457074</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>simulationScenario</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a05ff7ea4d194fc44c9a805fa6bebe178</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>simulationScenarios</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac4b381234aaaf5476e0ddf08525036c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>simulationParameter</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a20f256f177f02ce81ebcb9b5092b0c9d</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>simulationParameters</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac719c5aed409d0588f40eb46bebfa32e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>simulationOutput</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>adb9fefd0012c4fe104b45fa8de46311e</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>simulationOutputs</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abfa9446ec5868140695c6de9c24908cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>experimentScenario</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aeba92a1fb71f6efa8e0c6b73f4e7b8c7</anchor>
      <arglist>(unsigned int experimentId) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>experimentScenarios</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7380f406e7de2b997c5afe0a0a39edec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>experimentOutput</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad67b0e309e7900d22a04e4d07948c328</anchor>
      <arglist>(unsigned int experimentId) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; V * &gt; &amp;</type>
      <name>experimentOutputs</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab3a0fd1cbb73d6366c2ae1c86a2e53f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>experimentErrors</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad3a7864fbdfcc35a11880731fa96a4e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aaa4d06b5e65da94917ac5e6be825461e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GPMSAEmulator&lt; V, M &gt; &amp;</type>
      <name>getGPMSAEmulator</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab5da2d787b6cccea80232b5938075753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ae7ab115a6acf83bfd9cf50bfd7ae1286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BaseVectorRV&lt; V, M &gt; &amp;</type>
      <name>m_parameterPrior</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a01f15ac99e7dcea5fd5ae730076da4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_scenarioSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a931306539b491c60eb3acc30f2fe55ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_parameterSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aae20e30d097ccbb8bfc03dd2c2dee72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_simulationOutputSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a12fb957e6870936130780a0abb244912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_experimentOutputSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a91bf6b9634fedba9888ee087b21794dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numSimulations</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a77d27b12e9fe44749d3ae340f8630cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numExperiments</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aca35b8e87fbde557ab204fc92fc64706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_simulationScenarios</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>adc845e16b95cc595bb0d4c0cb86e9950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_simulationParameters</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0ad312ed2426682760868911ddeb8349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_simulationOutputs</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a67dbe90f5a8939e0242ea57612efa49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_experimentScenarios</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abe3301701b7da2862bbb5d20b3d1ed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_experimentOutputs</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a723ecd1417bdc04ec7a20f9dae3699e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const M *</type>
      <name>m_experimentErrors</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a78f4f9afb4434c39941af4ffa3cf3d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numSimulationAdds</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a9f4164435889ec402ccd26b13af4b396</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_numExperimentAdds</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a612f70fc34e78040ece9b9fa50b29588</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; V, M &gt; *</type>
      <name>oneDSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a798921e5b2164add4b80fa5497f5e291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorMeanMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>afbe97aa596345a6d7e210ac8df472a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorMeanMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a62056f9bf26de6c6716ff017f017dd5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>emulatorMeanDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aaa60bfe15d378a250f0219be1b8e282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorPrecisionMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad1ab4cfd82e926bc803e7fd4229df991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorPrecisionMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac3988b412ea0c6ba3361ed4f8755921f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>emulatorPrecisionDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a996ec3c3c8480c04eeb568192e37f5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; V, M &gt; *</type>
      <name>emulatorCorrelationSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a606d96223d49a4229f6955f474d7886d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorCorrelationMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6b1406fe645735bb57e07d4a29c9d27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorCorrelationMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abcda9aac16b78e1d1d03f9cade68ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>emulatorCorrelationDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a4aa9d083a6ba320e7b018a04de003b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>discrepancyPrecisionMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0531c6298cf135bc67da1b5383fe6a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>discrepancyPrecisionMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac299c51a4cb7f80c3a97abf1ed9ae6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>discrepancyPrecisionDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7f6ca71f4cadad1bc0e1c4a82cef0219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; V, M &gt; *</type>
      <name>discrepancyCorrelationSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aab01e513ebce674a8aabe1e63391f360</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>discrepancyCorrelationMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>af4df9eaa76ba75b4c949462da07f1bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>discrepancyCorrelationMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a728d62d2adafb89869b63e3ce4a5563a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>discrepancyCorrelationDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab7bf05f4e03be24448a92c0c0744cda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorDataPrecisionMin</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a46bc49cf1d757521c9c77d4be6c89dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>emulatorDataPrecisionMax</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad0e3d307e71507af8ce4e0e6887f557e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>emulatorDataPrecisionDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa2f4bb4bb6864f8a4449d6222692b132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorSpace&lt; V, M &gt; *</type>
      <name>totalSpace</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a1d35856da8e1601ec8deaf074cafb842</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>totalMins</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a7cbab6643ac9d14d747e23e6a783ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>totalMaxs</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad172d8b63580e0afbd1afedaba4cce3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BoxSubset&lt; V, M &gt; *</type>
      <name>totalDomain</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab3da107703e7c4a5f2b705c294d0ae26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; const BaseVectorRV&lt; V, M &gt; * &gt;</type>
      <name>priors</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ae85a3d4b52c88cf001883d85d7853e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UniformVectorRV&lt; V, M &gt; *</type>
      <name>m_emulatorMean</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a868596751730750670539ad32ca1494c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; V, M &gt; *</type>
      <name>m_emulatorPrecision</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a36a2967133abf672246e86ea2dde1fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BetaVectorRV&lt; V, M &gt; *</type>
      <name>m_emulatorCorrelationStrength</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aeddb9440684233634122e0dcff79d434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; V, M &gt; *</type>
      <name>m_discrepancyPrecision</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac3ded6b14f4fec43e8a1b436b7de69ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BetaVectorRV&lt; V, M &gt; *</type>
      <name>m_discrepancyCorrelationStrength</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a83cc25252958f52249ee66fcac10cf2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GammaVectorRV&lt; V, M &gt; *</type>
      <name>m_emulatorDataPrecision</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a0840a341cddcb96593d617baf766c527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConcatenatedVectorRV&lt; V, M &gt; *</type>
      <name>m_totalPrior</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aa838dc40d4d66a099db2381337394303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorPrecisionShapeVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a8cf37a50aacc487ee73c6f66145672a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorPrecisionScaleVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ab89151e48f329dc9472dc01bf4244fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorCorrelationStrengthAlphaVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6b2aa73f689ad7f56d2d336326cd5454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorCorrelationStrengthBetaVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a1b590ccb62f37ca0dd687f8f922706e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_discrepancyPrecisionShapeVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a20bbededf642ed3b3363403bee8559c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_discrepancyPrecisionScaleVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>afd7958e93d695b98ba9fd3c53b2ec867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_discrepancyCorrelationStrengthAlphaVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>af86cff994708573aba7ca535589c8891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_discrepancyCorrelationStrengthBetaVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a5a506bf1e5b25e8161e81e3a859db37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorDataPrecisionShapeVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a02fb24a856b903e6712606f9ca613e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V *</type>
      <name>m_emulatorDataPrecisionScaleVec</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>adcf9d90f70ecf9e92060f5c4db652728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GPMSAEmulator&lt; V, M &gt; *</type>
      <name>gpmsaEmulator</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a62c5298da59e1688d390e011b3082560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_constructedGP</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a261737819e23a58c85638a15068d1656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GPMSAOptions *</type>
      <name>m_opts</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>abc731c9bdd35ed9e5be2878d47f67db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a6d74b05e695484012535f0688511a3ef</anchor>
      <arglist>(std::ostream &amp;os, const GPMSAFactory&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GpmsaComputerModel</name>
    <filename>a00123.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>D_V</templarg>
    <templarg>D_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>GpmsaComputerModel</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ab07f73b5e45937fe05e597476f6ac3ea</anchor>
      <arglist>(const char *prefix, const GcmOptionsValues *alternativeOptionsValues, const SimulationStorage&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;simulationStorage, const SimulationModel&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;simulationModel, const ExperimentStorage&lt; S_V, S_M, D_V, D_M &gt; *experimentStorage, const ExperimentModel&lt; S_V, S_M, D_V, D_M &gt; *experimentModel, const BaseVectorRV&lt; P_V, P_M &gt; *thetaPriorRv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GpmsaComputerModel</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a323d601a35775caa6ade70532032b25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calibrateWithBayesMetropolisHastings</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a99ddc166b6d728f7550d85995f2492ab</anchor>
      <arglist>(const MhOptionsValues *alternativeOptionsValues, const P_V &amp;totalInitialValues, const P_M *totalInitialProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calibrateWithLanlMcmc</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a4018e55873d42d304e177555c6c1e3de</anchor>
      <arglist>(const MhOptionsValues *alternativeOptionsValues, const P_V &amp;totalInitialValues, const P_M *totalInitialProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calibrateWithBayesMLSampling</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a208239eea5a343ce63919b3715224170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>predictVUsAtGridPoint</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>aa3e4f7a344b229089526283fd2342d41</anchor>
      <arglist>(const S_V &amp;newScenarioVec, const P_V &amp;newParameterVec, P_V &amp;vuMeanVec, P_M &amp;vuCovMatrix, P_V &amp;vMeanVec, P_M &amp;vCovMatrix, P_V &amp;uMeanVec, P_M &amp;uCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>predictWsAtGridPoint</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ac84f51ca12006b2436aa5c2875350aff</anchor>
      <arglist>(const S_V &amp;newScenarioVec, const P_V &amp;newParameterVec, const P_V *forcingSampleVecForDebug, P_V &amp;wMeanVec, P_M &amp;wCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>predictExperimentResults</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a586bdab8895a5402a7264a3b8a897fb2</anchor>
      <arglist>(const S_V &amp;newScenarioVec, const D_M &amp;newKmat_interp, const D_M &amp;newDmat, D_V &amp;simulationOutputMeanVec, D_V &amp;discrepancyMeanVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>predictSimulationOutputs</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>abfd985c438d7899a9c8a7b53a575044d</anchor>
      <arglist>(const S_V &amp;newScenarioVec, const P_V &amp;newParameterVec, Q_V &amp;simulationOutputMeanVec)</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>totalSpace</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>aeba3d05d88424261dbccf330c26ff40d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>unique_vu_space</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ab0dbb682fb18bb5d1a9f5efbc1a7e73b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>totalPriorRv</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a0c9f082ae8c53d28430ecdcc1e741247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GenericVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>totalPostRv</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a1ebf5e1b86081e3f0240f34862fcfedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5e1246e38ea5eb887d858e056813467e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>memoryCheck</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a2e9c3dc46551e8c27007b304bce91e98</anchor>
      <arglist>(unsigned int codePositionId)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generatePriorSeq</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5d3b1fff3cdceb41374c9df4100c47aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>likelihoodRoutine</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a1e393d8b36a7ddef4bee076f5a122331</anchor>
      <arglist>(const P_V &amp;totalValues, const P_V *totalDirection, const void *functionDataPtr, P_V *gradVector, P_M *hessianMatrix, P_V *hessianEffect)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_z_hat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a814037cb5da041c7708bd04f8560eee8</anchor>
      <arglist>(const P_V &amp;input_1lambdaEtaVec, const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, const P_V &amp;input_5lambdaYVec, const P_V &amp;input_6lambdaVVec, const P_V &amp;input_7rhoVVec, const P_V &amp;input_8thetaVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_z_hat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>afab17d8ca6f391c891927624a902cb5a</anchor>
      <arglist>(const P_V &amp;input_1lambdaEtaVec, const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_z_tilde_hat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5d284076ca4e75f0bdbe12dbf0664813</anchor>
      <arglist>(const P_V &amp;input_1lambdaEtaVec, const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, const P_V &amp;input_5lambdaYVec, const P_V &amp;input_6lambdaVVec, const P_V &amp;input_7rhoVVec, const P_V &amp;input_8thetaVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_z</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ae6b7fc8ea8a201fb7a927b81fb7862df</anchor>
      <arglist>(const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, const P_V &amp;input_6lambdaVVec, const P_V &amp;input_7rhoVVec, const P_V &amp;input_8thetaVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_z</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>afa5880b2659dc602841a4343929c0d9e</anchor>
      <arglist>(const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>formSigma_w_hat</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ae81942b6326887a6367b291ea27e5bee</anchor>
      <arglist>(const P_V &amp;input_1lambdaEtaVec, const P_V &amp;input_2lambdaWVec, const P_V &amp;input_3rhoWVec, const P_V &amp;input_4lambdaSVec, const P_V &amp;input_8thetaVec, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula2_for_Sigma_v</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>af88588323957469db0a8a154c1ceba07</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs, const P_V &amp;rho_v_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_u</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a978dfa503b0649d01d9b7fb97a220b90</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs, const P_V &amp;tVec, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_w</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>aaab3a908dccfc378c9754034956b0540</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs, const std::vector&lt; const P_V * &gt; &amp;tVecs, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_uw</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a1344ec585b7aed861cb9709aad1e5618</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs1, const P_V &amp;tVec1, const std::vector&lt; const S_V * &gt; &amp;xVecs2, const std::vector&lt; const P_V * &gt; &amp;tVecs2, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula2_for_Sigma_v_hat_v_asterisk</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a533973c542495f601d26481315ab2e87</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs1, const std::vector&lt; const P_V * &gt; &amp;tVecs1, const S_V &amp;xVec2, const P_V &amp;tVec2, const P_V &amp;rho_v_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_u_hat_u_asterisk</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a6c6120ac3a8e38fbb45d40135f437e42</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs1, const std::vector&lt; const P_V * &gt; &amp;tVecs1, const S_V &amp;xVec2, const P_V &amp;tVec2, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_w_hat_u_asterisk</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5b79aae88b51219a9f78a5d52007e9c3</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs1, const std::vector&lt; const P_V * &gt; &amp;tVecs1, const S_V &amp;xVec2, const P_V &amp;tVec2, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>fillR_formula1_for_Sigma_w_hat_w_asterisk</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a140c50a7972df231dd752a13f8379c5d</anchor>
      <arglist>(const std::vector&lt; const S_V * &gt; &amp;xVecs1, const std::vector&lt; const P_V * &gt; &amp;tVecs1, const S_V &amp;xVec2, const P_V &amp;tVec2, const P_V &amp;rho_w_vec, D_M &amp;Rmat, unsigned int outerCounter)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>staticLikelihoodRoutine</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a5f8c19627cd1188e1f9781e83d853771</anchor>
      <arglist>(const P_V &amp;totalValues, const P_V *totalDirection, const void *functionDataPtr, P_V *gradVector, P_M *hessianMatrix, P_V *hessianEffect)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ad6fa8b429b16233df49b69464cc58ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GcmOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ab09b513727a86e4b547b0001df2db2b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FilePtrSetStruct</type>
      <name>m_dataOutputFilePtrSet</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a92c669ac8fddc9eb8c95e6e1c0f57089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmSimulationInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_s</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a16929497dea538ebcb6e68333fa3dd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmExperimentInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M &gt; *</type>
      <name>m_e</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a14398801ec33382df61139f124cfbc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmJointInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_j</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a38507b7120a85d82a30706fa457f3d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmZInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_z</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a4e9dc3363cc286eadbf572284c9d49b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmTotalInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_t</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a9078fa09080be35d0462548a82e7a64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmSimulationTildeInfo&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_st</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a3dad50952a38285f8999ef13275e2350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmJointTildeInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_jt</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a981b2815241f8add3e160e3c0c309717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GcmZTildeInfo&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_zt</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a67980053a360e80bc56f7062eb2eebce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_thereIsExperimentalData</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>ae51ad56053d567321a32073709d3a690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_allOutputsAreScalar</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>afd01b687f46d8d07b3c9848c59180264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_formCMatrix</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a61c5772d226c91496f7029a8725c629c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_cMatIsRankDefficient</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a9dd9156791ee5989efdba45864d15fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseScalarFunction&lt; P_V, P_M &gt; *</type>
      <name>m_likelihoodFunction</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a213f1a506b506f37105b6f9b4fc02149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_like_counter</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a9598ed85de624da48a15113fa00cb2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a936471999eea42bc84e390156f1f3530</anchor>
      <arglist>(std::ostream &amp;os, const GpmsaComputerModel&lt; S_V, S_M, D_V, D_M, P_V, P_M, Q_V, Q_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GcmOptionsValues</name>
    <filename>a00106.html</filename>
    <member kind="function">
      <type></type>
      <name>GcmOptionsValues</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a005246ed701d431b731a4ad85d898eef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmOptionsValues</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aa94cf8b05879016bb7b0bf160a7542c6</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GcmOptionsValues</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>afc8e50a67753eac723afc0a680020ee5</anchor>
      <arglist>(const GcmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>GcmOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>acfb6db3a111a584539e12df767a881cf</anchor>
      <arglist>(const GcmOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GcmOptionsValues</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a6a326ed23e341d5462d1e8b45eeec605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a9aeaeaf2280ba494eee6a3694358148d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_checkAgainstPreviousSample</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a463dc2fab624d18048401ea4b59057a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3fcb1211c88669af0ae84342f64d538d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_dataOutputAllowAll</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a606e6ecf6c2c3eb1bc52d68fe6f00bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a2669902d3701a4b76654288781db1964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_priorSeqNumSamples</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3e30d4643949f9fdd0836b808c228b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_priorSeqDataOutputFileName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ad33569e1338f717bdec94daef411142d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_priorSeqDataOutputFileType</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a19c64ad334d1ff709f0303945bc0022a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_priorSeqDataOutputAllowAll</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aa5cbd54affe79abbf77257466fcd98a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_priorSeqDataOutputAllowedSet</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a6f2965f14f50e7a6a12878db532b53aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_nuggetValueForBtWyB</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a23fea5f9c8defec77187a55eba044baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_nuggetValueForBtWyBInv</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a8212011d367d5e621a2adf9948754c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_formCMatrix</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3470b818ffd07ac70cbd8fbc3bba2eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_useTildeLogicForRankDefficientC</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>adf4f30f7462d51f65127421e8264eafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_predLag</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a780e3cf4fd106c86164dbcc61dabb3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predVUsBySamplingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>afb569030b7021e05c46ffbb356abe349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predVUsBySummingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac7637e848724b596e729383d2fabf5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predVUsAtKeyPoints</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac7f22a608a052840e46dce9e938f9cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predWsBySamplingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a56869c0af35f3ff84350893a31c3f42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predWsBySummingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aee90c2b74b009a3deb2e0bd9a6c63825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_predWsAtKeyPoints</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a5b3dd13793e80e61e2be82e8c74243a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a0babf70fd2b0a6c6af9b42e113a5d37b</anchor>
      <arglist>(const GcmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a9c2202a952b5e2555a23cafed6118600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a8f2004a71ea6b4d82c72c5574e67d5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_checkAgainstPreviousSample</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>acffbba6d7bac53495c0079c449b13c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aca70666838c2ec054ebfc86550ba9c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a5d496f3b8199e67a69eea00799d8dab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>adef610fc870ed4c4154e8f0adaf184ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqNumSamples</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ab7d54512994911afb88139d69639b6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputFileName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a4a0dab55fe8a50ee31a4596aa0382108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputFileType</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a166cc6cbd32fcfd316a594386954ebc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputAllowAll</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af06e00d9e6ca2c042e6a528832b74a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputAllowedSet</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac951d0c26971486529489a72db655e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_nuggetValueForBtWyB</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a910688dd151130992762293535c43a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_nuggetValueForBtWyBInv</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a4de2bc52b37a525a6a1aae6ce7c8c405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_formCMatrix</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aa6ff1b2722e7ba0d6fe7cf4ecb5aaab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_useTildeLogicForRankDefficientC</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a993708ea4075fc7f0079407b04c88adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predLag</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aa5397a6095f382515f8437f836297481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsBySamplingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7bf12baa9cc19d0471f456bf1d647c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsBySummingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>aaa648cf678e206d3f867b4de95a2ab4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsAtKeyPoints</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a4f72f5f6f7afc0bf77c1d9693feb2982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsBySamplingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a6bc89ee406d8497d362b66aa38ae9763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsBySummingRVs</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a65878cb55a11d54bc3e55c2560432509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsAtKeyPoints</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a174a2a353d9404db7068b1302fa133e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GpmsaComputerModelOptions</name>
    <filename>a00124.html</filename>
    <member kind="function">
      <type></type>
      <name>GpmsaComputerModelOptions</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ab72ad24e3c319b1e5d829c435167ac22</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GpmsaComputerModelOptions</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a8749fe7690845d5269467638290aec75</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const GcmOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GpmsaComputerModelOptions</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a9fcdb6e8e63c59b4b5f180250994c22a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a684c545a1edec598e902debd146b9dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aa84c25cafd7a681cf0fc5bf13295b18c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>GcmOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7df65862f849591c67655eed4b14bf06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a2d0e01f808d5d5a808394e44cdf0da15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ac847fdf3f290313a52aaf449e0833c8f</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a4749e0168eb341fe5c2bc368f4f034e1</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad4438f8024de9e57f450e8c31dfb6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6ecd2a0c7936d2d92cdd82e9fe4a7557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a1b7646090e0217c690877d2339f4f47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_checkAgainstPreviousSample</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a0982e01294d83cf0bfbd61c502d92419</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a3b7331d21364a99faeddacbcc161a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a52f5ec0eeb50679118af83d7a204ce59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a138af013c889f4b0fd06e36b0e4a09eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqNumSamples</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a4977fe0c90507106de3632ff6e7f807e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputFileName</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aa7ee4f4637afcdb2a30accb5d0fbe371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputFileType</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a4081f0a009473289c2a35da6d404a366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputAllowAll</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>acf566208d830beda9c71a8110a1f79d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_priorSeqDataOutputAllowedSet</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>abd0dbcbeb40457769a3bcc9657d0503d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_nuggetValueForBtWyB</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a54c934af070d44ee070aa251adaff1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_nuggetValueForBtWyBInv</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ae3bb2b68e7b2a770e98229dc67fddce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_formCMatrix</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a2d21c5610a82b98841604791cd3dca10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_useTildeLogicForRankDefficientC</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a3fd6732b71319f3c97696bd646c945eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predLag</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a97f85bd77b568d590f596075ab2e40b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsBySamplingRVs</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>af9acd0f57290d5346c8c9275a431e915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsBySummingRVs</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a4f003559ad0e7eac54242f3e0538d925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predVUsAtKeyPoints</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ab40fcde8be0619f878b6d5a30003a5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsBySamplingRVs</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a1023dd13ff7e7226a7bf1718cf22aaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsBySummingRVs</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>afeba9326bbbe3107cf62bfca198252ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_predWsAtKeyPoints</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7627b52d428ad3bc12c2cf2ebbac6713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GPMSAOptions</name>
    <filename>a00127.html</filename>
    <member kind="function">
      <type></type>
      <name>GPMSAOptions</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ad7a14a1851046541b6e417edae34b386</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GPMSAOptions</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aac9ad0428275ec512b999567f6f63d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ab8353341d8112d21b482f8fa144c9d06</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a865fdb707344273b0af3f53e39527499</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a6275867548f421966c893554d8fef74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aeb890ba31c7c41728d008e7147b68392</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a09c5c8b50b520e1b209596574923df6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aeaa2f657868219575a97dee28be099bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorCorrelationStrengthAlpha</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>acf2f09f19c9a70852d20ea6340a0a4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorCorrelationStrengthBeta</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a23945eec992b037179dc690733253e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_discrepancyPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a86a2d7df2cb2c8295da5708f13454780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_discrepancyPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a54fad7b30bdba970ff88d5ce543c188b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_discrepancyCorrelationStrengthAlpha</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>abc6563447601c9ff3bbafcbdec1fe57f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_discrepancyCorrelationStrengthBeta</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a9d0788c6629bacac3aca55b1f0d91f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorDataPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a738205b9b2574b5dfc1ac62f7933b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_emulatorDataPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a240e1e18f73edbca332c833c59ca693d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ac6b1efbd5d086e75a4171d7ed84a17fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a43d4896e9670b594f79dc1714cd32516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a7a48549af56b27b41c7d0540e74545ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a5c6e344566bd129959e7a86c29a1c404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a1357b4afff3744a17699b6f03035b17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>addc7420e8b52f69dabc6005a0357da0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorCorrelationStrengthAlpha</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a815ee13c5b28ca0f68468b25571de032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorCorrelationStrengthBeta</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a56bfa551225254e860ce30134bbabc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_discrepancyPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a998435b5c3cbca85193fc0ebd403cbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_discrepancyPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>ae4929e812a62eecc4fa71158cdae2dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_discrepancyCorrelationStrengthAlpha</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a6e1820aa97293356c97fc812ed4a2563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_discrepancyCorrelationStrengthBeta</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a08c209b37d4fddd6715c2612a7c18c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorDataPrecisionShape</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a5b078e580b9ab8d000b219d6601fe461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_emulatorDataPrecisionScale</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a674ce1bc9917a4058c332fefbd3158d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a3353389f644d6f972229bffd803270ba</anchor>
      <arglist>(std::ostream &amp;os, const GPMSAOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SimulationModel</name>
    <filename>a00202.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>SimulationModel</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a29392b8ba9041d6292602996da673150</anchor>
      <arglist>(const char *prefix, const SmOptionsValues *alternativeOptionsValues, const SimulationStorage&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;simulStorage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimulationModel</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3a390c9a97e24cc106f2a4399ed9c2ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numBasis</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af8cc5aa90744f7eb506bff4255444700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const S_V * &gt; &amp;</type>
      <name>xs_asterisks_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a652911f9258f6cd2640ddc7ac1682c6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S_V &amp;</type>
      <name>xSeq_original_mins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a380693c80f9a6f4c00a9b8e5ec0f14ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S_V &amp;</type>
      <name>xSeq_original_ranges</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6c19c2ed5f6195c153aa39e9d12bd6c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const P_V * &gt; &amp;</type>
      <name>ts_asterisks_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6a34dfaa1ad943bbcd8abb5cb0bea579</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Q_V &amp;</type>
      <name>etaSeq_original_mean</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a218cc17159e2f86f043412c07f8e8c06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>etaSeq_allStd</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a569b8e005dec134aff81e372f6260449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Q_V &amp;</type>
      <name>etaVec_transformed</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa4ab3faaed6faee2ea82b0efeefd118e</anchor>
      <arglist>(const std::string &amp;debugString) const </arglist>
    </member>
    <member kind="function">
      <type>const Q_V &amp;</type>
      <name>basisVec</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a8fffa057b8f1596404b643ad2931d847</anchor>
      <arglist>(unsigned int basisId) const </arglist>
    </member>
    <member kind="function">
      <type>const Q_M &amp;</type>
      <name>Kmat_eta</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a02b812c58ade6b0fd101ce0da81bc143</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Q_M &amp;</type>
      <name>Kmat</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a097456eeb44cd1c3979c319cb7236dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimulationModelOptions &amp;</type>
      <name>optionsObj</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a61524b65f63f44f8b3e186dbfeb1fd27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae6bbbd50e590486400bc72ee9e4076f4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>unsigned int</type>
      <name>computePEta</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aeb23cd4509fb8569bd02eb3f4e43e3d2</anchor>
      <arglist>(const Q_V &amp;svdS_vec)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>abb3c30fbfd8df774c4cf9804635e0fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SmOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7a9040cbd9376d0b3c08bab0bd283e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SimulationModelOptions *</type>
      <name>m_simulationModelOptions</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a6fc5ed9088b4e97c742d1b66d8ccf153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_p_x</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad517c2c9eca15a1e83aee96938ff64ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_p_t</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3ac0d647e11ca9aae44d35bf5366a3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_m</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>af220d5850086e7998797f146b43ce3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n_eta</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a36cec687ebed33a0858d14e17630d515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; S_V, S_M &gt;</type>
      <name>m_p_x_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a14f4486dd192ccfb0c0bfaa809f58f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; S_V, S_M &gt;</type>
      <name>m_xSeq_original</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aef34870ef29d80d517fec892b68d4940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_original_mins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7772e35724095d3297358b90c6855cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_original_maxs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a95fdd57f9dec47c23b66dce6fa7a60a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_original_ranges</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a132bc77d4312837daeb3646316f31414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; S_V, S_M &gt;</type>
      <name>m_xSeq_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9e7f6d07ab30845f84134ae5a706dae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_standard_mins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a68d6a25ced2665142b000f340f322b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_standard_maxs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a4eed50d401029e5ddbc06ac1ae7ac624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S_V</type>
      <name>m_xSeq_standard_ranges</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a90b8656f0dc497490ef1898734d5977c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const S_V * &gt;</type>
      <name>m_xs_asterisks_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a80b0a17ac5534bc434a1505a6f893c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; P_V, P_M &gt;</type>
      <name>m_p_t_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a760c27cd99a90f3143b77c6550250d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; P_V, P_M &gt;</type>
      <name>m_tSeq_original</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa91c2323bdcf2a1a98fb653d0645dc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_V</type>
      <name>m_tSeq_mins</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae820e3931f6d12c3852914fce4bfa3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_V</type>
      <name>m_tSeq_maxs</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a34357ba198bfa7e4629b89061648bd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_V</type>
      <name>m_tSeq_ranges</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ac9bfdf80327d06a7cef102b6e2708a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; P_V, P_M &gt;</type>
      <name>m_tSeq_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>acd5f8b628c38d06cac1ea7d8deb369bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const P_V * &gt;</type>
      <name>m_ts_asterisks_standard</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ae157911c8ab0864359de67e4a64cf251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_n_eta_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9955b3875d5f949a05d8704915b1aeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; Q_V, Q_M &gt;</type>
      <name>m_etaSeq_original</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a65c6f805805a24ee00bcca9c4f3db896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_etaSeq_original_mean</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0ee4593cc6f6a5c3fb4fa5eace2529bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_etaSeq_original_std</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa811585e909247f0b537815cf6d586dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_etaSeq_allMean</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a30a0fc48756a00f588d558cf9a835994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_etaSeq_allStd</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aa3b8d06c824b416d06c3c387c82331d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SequenceOfVectors&lt; Q_V, Q_M &gt;</type>
      <name>m_etaSeq_transformed</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>acc6ebcbf5b24e539d676a2f490039752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_etaSeq_transformed_mean</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7b05ad422fd30104af768936045b16f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_etaSeq_transformed_std</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a3237cdf774665e3a931ac943bd2ad022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_eta_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9727aa8af7ffeb0ccbb70323864d4273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_etaVec_transformed</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aba848d5689e1c00daff4c013d8e7a0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_M</type>
      <name>m_etaMat_transformed</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>ad897e058a9320fce1fc82bd899a043ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; Q_V, Q_M &gt;</type>
      <name>m_m_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a2aa00909e19f4aed895014d5fbde3416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V</type>
      <name>m_m_unitVec</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a66618d8126dd678e174b5b2970dc0e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_M</type>
      <name>m_m_Imat</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a561c7be82760e98318df7d9750c8e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_p_eta</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a66225502421ff8bfc4d70ec8a804aaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; Q_V, Q_M &gt; *</type>
      <name>m_p_eta_space</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0510d7e862864542a7fe9ef156e9453f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_M *</type>
      <name>m_Kmat_eta</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a33c5a7e6ea44b6abcdba20a00d0878f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Q_V * &gt;</type>
      <name>m_kvec_is</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>abd586c8a737a41c2efc84ed689ac3aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Q_M * &gt;</type>
      <name>m_Kmat_is</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>aabdd2a2293ee6ee31343d9aa18a1c134</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_M *</type>
      <name>m_Kmat</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a43a6551afcee92cdae6921eceba210b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a43b677b271821bc24843f0b7795fd179</anchor>
      <arglist>(std::ostream &amp;os, const SimulationModel&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SmOptionsValues</name>
    <filename>a00206.html</filename>
    <member kind="function">
      <type></type>
      <name>SmOptionsValues</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ab0145a0fe0fbe6d212a58544072acd10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmOptionsValues</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a5d93ee02416795f90279957f65d7dd5a</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmOptionsValues</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ad613cc92d04dc9ec5b6af0461e820118</anchor>
      <arglist>(const SmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>SmOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a6325861d55021423a1fffc1edbf8ad85</anchor>
      <arglist>(const SmOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmOptionsValues</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a9f3f6a369387d17c3dc4875e0085b030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a079e76770d0fd92f1cbf87cb0d5d8c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a044eb2dfe381c9bca2cd1ae8331631bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_dataOutputAllowAll</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aa90293917eb02aad5d00b038258c835f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a240167989a4c516d2811b1ae3c51635c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_p_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a4e892f0f0082b669686d08641058b727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_zeroRelativeSingularValue</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2445009694b391757eaf008fe76a9a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_cdfThresholdForPEta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aeb80187b395a20b1af584ca1988e0140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a4f0666e7e54e8f6e379a96cd7f31bbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a86df9e198315bf4765f80b9918951b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_rho_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a75c430d1f8e7b8d1ed4d514c5389daf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_rho_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a3715c8e92594e4c1374c6938c5329d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ab8fd88760bf084f3e13d0fcc4e5c5d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ab03b7b4cab641c7f2cb25780b0ef1b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_a_s</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a340ee5497aad06fe1ac0da2afe01acff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_b_s</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aa639b431e09d205f0c03cf39926ae02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a5962e4ba1df5335bb8faa5200d97d08c</anchor>
      <arglist>(const SmOptionsValues &amp;src)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a1edf6006efba61d2590f1559d128cf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>abc80054f721ef2b9d81cf7ac4f77d557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a84307ac47d5d47a0c7c95befee2d2000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a9d4ef4a73596574a6e620b7f4a733098</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a6d23f9ef6e094b40a3c1c12680f70e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_p_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2f7008bbef7158729507d1b839105a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_zeroRelativeSingularValue</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a6be2ab4e711f32dabab46468387ddf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_cdfThresholdForPEta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a98fef5ce7bcf724ad0ad1b8eb40b95b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ade5b4e000e5d7e7e5d1c00f5716461e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a834ecd46f753dfb41a9dc734ffc535d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_rho_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aafda256b9e67b355e954ed84d06e6d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_rho_w</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a773089b601244567c984bf76c5976da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ab95a196f118ff5e280d83e278b614284</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_eta</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aba9b7f7897cb0a6ff56a7999cf08715a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_s</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a394673d71d8d859916c1751538ceb451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_s</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a4e87825994e3385324eca4f249876534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SimulationModelOptions</name>
    <filename>a00203.html</filename>
    <member kind="function">
      <type></type>
      <name>SimulationModelOptions</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a75e03d35ccd663e04cd66d697416f4fe</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimulationModelOptions</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a98b69cea4d0a5fbf00a0f6fa1cf02617</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const SmOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimulationModelOptions</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a528fb5be7da3859acbfd9621ffc1e266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a00f5f6577d1ac8e705be34b4342288a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa78b78c5005b2b3fb9207af0fa9329cc</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>SmOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac2dfa3bca516553cd969fcec500ae974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a15f929bb45d3f530b5950f758a018ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a9ba3840d60d4343f6e6e7916e9999a40</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ad6c45656749a4167026b5aab63005d7a</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a6e74598077be28658c91454d5a88160c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a854b0094c22fd38632012b31a7675d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a4e59dd561fafa9b1c272400ed286b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab317711fc746fd6e60c0066649facb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a2fc6e1ece3a11a85b66ed3c4aecc9f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a7245788d6cea0dc27a01fac66f2aa017</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_p_eta</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a293a650acd7fa1463ead1265187c67ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_zeroRelativeSingularValue</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a94b25c2ebd83c872674303953b597253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_cdfThresholdForPEta</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5cb2fe55678d77398789099e16a66c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_w</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a712558f7741cf670dcc604906170a8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_w</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac4098e863627178b6d3797a45b7a14f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_rho_w</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa32b58943080c228b70d3b26eec645a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_rho_w</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ab75a73fc4879fbbe1a825cc1e2d74187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_eta</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aed1154b79e1c00bf531c65f4d2f3f1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_eta</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a5523c14e5fe11991197700ed571fce39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_a_s</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a0a659b6432e27c8f9cf62be407f12823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_b_s</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1eaa5f1ba31a411f2c85601f71eb607e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SimulationStorage</name>
    <filename>a00204.html</filename>
    <templarg>S_V</templarg>
    <templarg>S_M</templarg>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>SimulationStorage</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a5e85541cde4d783ff33b34c99d6b2066</anchor>
      <arglist>(const VectorSpace&lt; S_V, S_M &gt; &amp;scenarioSpace, const VectorSpace&lt; P_V, P_M &gt; &amp;parameterSpace, const VectorSpace&lt; Q_V, Q_M &gt; &amp;outputSpace, unsigned int numSimulations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimulationStorage</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a331e6e571232f83bc531d64325659a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSimulation</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae1942a7e8e78250df2e9e039e600723b</anchor>
      <arglist>(const S_V &amp;scenarioVec, const P_V &amp;parameterVec, const Q_V &amp;outputVec)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numSimulations</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a72d4f9b4d09e74382fe8cfebbf6e331f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const S_V * &gt; &amp;</type>
      <name>xs_asterisks_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6b6fa990ec825567f209f06c494e4f3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; const P_V * &gt; &amp;</type>
      <name>ts_asterisks_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a103e6dc9416fbeded4986e44913fba47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; S_V, S_M &gt; &amp;</type>
      <name>scenarioSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ab26cfcdd4d8d413cdfb18a0df942166c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>parameterSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>abc324383712cc61f5722a7480aa1e468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; Q_V, Q_M &gt; &amp;</type>
      <name>outputSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae19ae762abf319879ef3eb817540b87d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S_V &amp;</type>
      <name>scenarioVec_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a38169f071cb91a54177aa28526dada05</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const P_V &amp;</type>
      <name>parameterVec_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>af2f1ab497f9939f986bb22b7e16a0b29</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const Q_V &amp;</type>
      <name>outputVec_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a85fe066468f6f54c7f31befd7b8d6935</anchor>
      <arglist>(unsigned int simulationId) const </arglist>
    </member>
    <member kind="function">
      <type>const Q_V &amp;</type>
      <name>etaVec_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>abd0676452286ea7bbd492330182bd288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a32f92df6ac9e4b4a6bc03a98aadd849b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a9b96e9f42b212d819c14944b3e39cf39</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>acaccddd59eefcca5b80d2c90e26081cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; S_V, S_M &gt; &amp;</type>
      <name>m_scenarioSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a7ae0f3a3e91d732bd840ff39797980d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>m_parameterSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aa9803dc1dffcea02cc4a09e7ecb05ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_outputSpace</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ab44a2ceb14e27aefb64ff28a0f6d1ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_m</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a59dba0d921e60d0f187055fd33787485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_paper_n_eta</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae23ff5e4c8355ee44a1c564c0838cc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_addId</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a504908e063ef4b4945d30b9d0f0902eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const S_V * &gt;</type>
      <name>m_scenarioVecs_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ad56444548ca6030f668856a88ad662b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const P_V * &gt;</type>
      <name>m_parameterVecs_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a8dee8daeec5b7e91ae3c074706fb08e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const Q_V * &gt;</type>
      <name>m_outputVecs_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a2953794f4d7899b943bb9ee7c93eae18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSpace&lt; Q_V, Q_M &gt; *</type>
      <name>m_eta_space</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a5b0bffdfb6e235a25c4e087a7272848b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Q_V *</type>
      <name>m_etaVec_original</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a8695018e65d072bccc45485c2fe9f9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aeeed8d5c2bdf62e052c02cd59f0b0853</anchor>
      <arglist>(std::ostream &amp;os, const SimulationStorage&lt; S_V, S_M, P_V, P_M, Q_V, Q_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Base1D1DFunction</name>
    <filename>a00030.html</filename>
    <member kind="function">
      <type></type>
      <name>Base1D1DFunction</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a8e8c0f8d500675e4acfd4d7043000791</anchor>
      <arglist>(double minDomainValue, double maxDomainValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Base1D1DFunction</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0512da686e14fe3b0544f84432ea322e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDomainValue</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a4c110e621ef1ac557bbcc60d41f5a3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDomainValue</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad2b80d0c52c0cb56c89f70f30b3bb19e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a1042dfd930c30a35d6dbf70f94e8dfe5</anchor>
      <arglist>(double domainValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>deriv</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a6b8de03f2099f31735dcaf15c24bca32</anchor>
      <arglist>(double domainValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>multiplyAndIntegrate</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ac41e4e15b7f97c14a0389069bf8e833d</anchor>
      <arglist>(const Base1D1DFunction &amp;func, unsigned int quadratureOrder, double *resultWithMultiplicationByTAsWell) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minDomainValue</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a7b18b3854ee74ef5befbc67b75ebbdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxDomainValue</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aa0025999ccab2145cd46c0a81e260e8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Generic1D1DFunction</name>
    <filename>a00112.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>Generic1D1DFunction</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a0b699f452c09656b05f535a92adcbdc3</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, double(*valueRoutinePtr)(double domainValue, const void *routinesDataPtr), double(*derivRoutinePtr)(double domainValue, const void *routinesDataPtr), const void *routinesDataPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Generic1D1DFunction</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>adf1a10563a2aa11928d63c44ce9c9fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4ed092b36144d91ac573e871062cca16</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6e7f189c2cf7f0a88573a23a88229566</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_valueRoutinePtr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a7b3fcf1c3e06132c5c7e5c3e1a87134c</anchor>
      <arglist>)(double domainValue, const void *routinesDataPtr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_derivRoutinePtr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac87c844759657a4a9537ea2bfe2132db</anchor>
      <arglist>)(double domainValue, const void *routinesDataPtr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routinesDataPtr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a57e54587cb5511615131144485513ab6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Constant1D1DFunction</name>
    <filename>a00062.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>Constant1D1DFunction</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae506584ba937dfb2f706e56229c4d9fe</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, double constantValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constant1D1DFunction</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>afcc6e7dfa001ebc7e3ef374424404eae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa80d085d1b5744396df97ec74055cf1f</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af8f16be24483611f20246f67047e330b</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_constantValue</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa5aa0e15e78cc350f49894279f896cf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Linear1D1DFunction</name>
    <filename>a00156.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>Linear1D1DFunction</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ac1a758903e8abd0b4268e53dac889258</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, double referenceDomainValue, double referenceImageValue, double rateValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Linear1D1DFunction</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aaac97ac307dadf156b496b9f9b8e5d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a4264993c026b0a55af32131027c923ff</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>abd3ccc80ea449d8a20afb2efc22b131a</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_referenceDomainValue</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a9ff67ad29df205d2c78e3431b062ccb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_referenceImageValue</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>abb210b107ac3ad9473b8c597808b1ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_rateValue</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>aa593d204ade4bf240d0353eaf9f10fd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::PiecewiseLinear1D1DFunction</name>
    <filename>a00181.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>PiecewiseLinear1D1DFunction</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a046790d2c900c1fe0e1eee6a67a1d71c</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, const std::vector&lt; double &gt; &amp;referenceDomainValues, double referenceImageValue0, const std::vector&lt; double &gt; &amp;rateValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PiecewiseLinear1D1DFunction</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a097219493971b9013a427d2ce8776961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a977ad3478bf488b1e3d472f31c3fe146</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aa83d79e691a7cf47dc860e20c75a0cd0</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_numRefValues</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a1ff5c7e5243f6a763409a68e86681129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_referenceDomainValues</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>abda9e4143096bf0bf935b7c9173aa2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_referenceImageValues</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a83a27b74cb337be9d5b3e2b91d8ab6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_rateValues</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aef7d37fe499c0e8f3bb6261f1b4e8147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Quadratic1D1DFunction</name>
    <filename>a00184.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>Quadratic1D1DFunction</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a3ad7d62950748c04897381b297db6aea</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Quadratic1D1DFunction</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a52969f14fb922dae2df3823e411877ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Sampled1D1DFunction</name>
    <filename>a00190.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>Sampled1D1DFunction</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>acb53ff4fd590cea97f4ce2101f68f2a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampled1D1DFunction</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a2c9c2dbdee05fb49c6d80f3e72c49a04</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;domainValues, const std::vector&lt; double &gt; &amp;imageValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Sampled1D1DFunction</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a2d67b2e2e0c95555b4f22a5fcec928c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a779a96683625c9bf6a161cf98ab63f9b</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a5579fd73a76c5f82b6f55472c8123bb7</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>domainValues</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ae3ece65039bde30a1392c479ad9b9a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>imageValues</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a2354fe46fe075637a85998e1a4f2d64d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>domainValueMatchesExactly</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>aba6caa896d9a2c20e354d899bda195d3</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a7bac8d9e058363240db15bd488e74772</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;domainValues, const std::vector&lt; double &gt; &amp;imageValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printForMatlab</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>af2968cdef2abc728fff7c50162b28464</anchor>
      <arglist>(const BaseEnvironment &amp;env, std::ofstream &amp;ofsvar, const std::string &amp;prefixName) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_domainValues</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a6985db1a50a72a3fb1377645ac6cd944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_imageValues</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a5569dd39ba1eb7183b608b59e4919a6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ScalarTimesFunc1D1DFunction</name>
    <filename>a00197.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>ScalarTimesFunc1D1DFunction</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a8c70bff103932b5907b8f43c080d5af2</anchor>
      <arglist>(double scalar, const Base1D1DFunction &amp;func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScalarTimesFunc1D1DFunction</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a2775892943455ed641bcbc6b336a0865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>af3ff65dedf376a0acde1df1f70fdfd51</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a60d05664b27b5b40cb31d38dc61c74ee</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_scalar</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a8e7e6ee4d186d901156d47c11231c81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Base1D1DFunction &amp;</type>
      <name>m_func</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a89766736ee9cdf03a6ead0fa5fe8bd83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FuncTimesFunc1D1DFunction</name>
    <filename>a00085.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>FuncTimesFunc1D1DFunction</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a7177db0aae0494fa706966bdd25799d4</anchor>
      <arglist>(const Base1D1DFunction &amp;func1, const Base1D1DFunction &amp;func2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FuncTimesFunc1D1DFunction</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ae89986fdbccb311f3f5d946937df4248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>adebec22c4730abfe9d5000785a77d000</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aac7e1e05101253947079615bf7b5ce6b</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Base1D1DFunction &amp;</type>
      <name>m_func1</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aaed9e10d4e9b28cbc56fc486847d3dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Base1D1DFunction &amp;</type>
      <name>m_func2</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a20c159912d7fbea580b10ff8f6ec7365</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FuncPlusFunc1D1DFunction</name>
    <filename>a00084.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>FuncPlusFunc1D1DFunction</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a4a94be2216d37b20604485b4bb19bd0a</anchor>
      <arglist>(const Base1D1DFunction &amp;func1, const Base1D1DFunction &amp;func2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FuncPlusFunc1D1DFunction</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a86c5c243f2c16da8582c55b597e55823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a9e7a69d195d586fa982c6088ff6a7007</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a37e3b0d0b5655b555cde6674e382a36e</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Base1D1DFunction &amp;</type>
      <name>m_func1</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ab74636433f4ce2bb8ca93cf7c1c1d72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Base1D1DFunction &amp;</type>
      <name>m_func2</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a82867f82d1b09ae165d5b2e730a49bdd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LagrangePolynomial1D1DFunction</name>
    <filename>a00155.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>LagrangePolynomial1D1DFunction</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab8678ebfde2a4b2ca59741673eeaf103</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;positionValues, const std::vector&lt; double &gt; *functionValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LagrangePolynomial1D1DFunction</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa1b9170d2f09c55c85fb093644da4246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ada2741739cc9ff0fe98bb51e690df072</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a202ba706747ba35cf699799fbc3dbb8b</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_positionValues</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a192c6dcd8bdba6177830fc1398ce5b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_functionValues</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aa6dc315c563b9b83a88cd3f280a75aa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LagrangeBasis1D1DFunction</name>
    <filename>a00154.html</filename>
    <base>QUESO::Base1D1DFunction</base>
    <member kind="function">
      <type></type>
      <name>LagrangeBasis1D1DFunction</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aff4d5f496955e2a0be280cfb15b83c0b</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;positionValues, unsigned int basisIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LagrangeBasis1D1DFunction</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aaad4a1e9dbdcc7e80a521ca427b297c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ae41dda050ae3e18f057a44fb2d64b6d2</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>deriv</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a2c804510956c3eb8f81bf5eb6fe7939c</anchor>
      <arglist>(double domainValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_positionValues</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a77fa2b4b50c630ed258c9b99b9ac056f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_basisIndex</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a60019a66c1e61dd099917d84e8165d81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Base1DQuadrature</name>
    <filename>a00031.html</filename>
    <member kind="function">
      <type></type>
      <name>Base1DQuadrature</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a78007aa675ab263a24d86774e8b98c28</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, unsigned int order)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Base1DQuadrature</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>acb90cfc1106240a7a48579e0594c7e17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minDomainValue</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a938187458b0069e7b3779bc3739a1cc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxDomainValue</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>af3d09abe6716a23f9061b8b657524547</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a07713b5e8df24bbc8e3e9d13b707e5d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>positions</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a9f5d9b6e20b5105e2c17b7da1b71c259</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>weights</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a5780ce2b5ef26ce0f5183e8e32358cee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a37bdd63ba8b986e02d47b05fc8795332</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_minDomainValue</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a7165680498394fa2d23ac919a920fc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_maxDomainValue</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ace30af8dd67b04f11ea37ebe509f256e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_order</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a78ba0750b7220b302e4cd1415c7d4c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_positions</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aeda387c028c3ba89ea0f9637a2234212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_weights</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a7117fec020a8098d1c22b604268bad93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Generic1DQuadrature</name>
    <filename>a00113.html</filename>
    <base>QUESO::Base1DQuadrature</base>
    <member kind="function">
      <type></type>
      <name>Generic1DQuadrature</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a423e55f9b2f5b136cddae91a774f9cb3</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, const std::vector&lt; double &gt; &amp;positions, const std::vector&lt; double &gt; &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Generic1DQuadrature</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a5b2308f1d8cb6e94f0b5955b7f8ddb69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a365701bda9fba17fdf5498436722cdde</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::UniformLegendre1DQuadrature</name>
    <filename>a00222.html</filename>
    <base>QUESO::Base1DQuadrature</base>
    <member kind="function">
      <type></type>
      <name>UniformLegendre1DQuadrature</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a2893373338683fa72a6bfb321e58750e</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, unsigned int order, bool densityIsNormalized)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UniformLegendre1DQuadrature</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a6b6ba4d00a8865df9a3d90ab0c27f332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a4d63fb6517b84b37e47da5cea15bc2b1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianHermite1DQuadrature</name>
    <filename>a00091.html</filename>
    <base>QUESO::Base1DQuadrature</base>
    <member kind="function">
      <type></type>
      <name>GaussianHermite1DQuadrature</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a93622cfcdf05cb9a7961c76b4d749b55</anchor>
      <arglist>(double mean, double stddev, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianHermite1DQuadrature</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>af8139b48716bd162dab8050e4b693784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ae622aec1b3ed4d5b1630825819322090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_mean</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a75f2f70f516506c0c93c64f1074cbe8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_stddev</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>ad3114fcc967725e7cabcbba4b09a8bb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::WignerInverseChebyshev1st1DQuadrature</name>
    <filename>a00234.html</filename>
    <base>QUESO::Base1DQuadrature</base>
    <member kind="function">
      <type></type>
      <name>WignerInverseChebyshev1st1DQuadrature</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a8a40172427db7b72e0885c30f745ad13</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WignerInverseChebyshev1st1DQuadrature</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a0dc8250c94e72042eb233577b51a5087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aacf526849bf3bcec245d12f14d24352d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::WignerChebyshev2nd1DQuadrature</name>
    <filename>a00233.html</filename>
    <base>QUESO::Base1DQuadrature</base>
    <member kind="function">
      <type></type>
      <name>WignerChebyshev2nd1DQuadrature</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ada00887a7e9ad33a5ea4bf60a5f4ae81</anchor>
      <arglist>(double minDomainValue, double maxDomainValue, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WignerChebyshev2nd1DQuadrature</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa7013fc823f0e4ad0ab9ccaf588551f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumbRoutine</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a1be91acea2adbbaf5f61a408d66737fb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::TwoDArray</name>
    <filename>a00218.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>TwoDArray</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a61198628e4a47604bf5ad7142b151372</anchor>
      <arglist>(unsigned int numRows, unsigned int numCols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoDArray</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a057af83ed31f9ca5c3b4cc52b5383f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numRows</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0c81a74def0364a5ddd3e1371ca48b39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numCols</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aac40245b6f6a944d62a34d44324af5b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocation</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa204b1795ea5ba9d5583b6eec598b16e</anchor>
      <arglist>(unsigned int i, unsigned int j, T *info)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8cf6ad7a5890835d44740aa056fc9933</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6195a83c1f1ed39349779e19421ef4bc</anchor>
      <arglist>(unsigned int i, unsigned int j) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numRows</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a26fc2685fae9aa7aa0fecfaa52e6c617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numCols</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>adab8e60a3daa621f75681326478eb085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; std::vector&lt; T * &gt; * &gt;</type>
      <name>m_data</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a89e1d31bfba6f86f5fa9c407aba7f00e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ArrayOfOneDGrids</name>
    <filename>a00024.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayOfOneDGrids</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>afac2d38cfd5e69c4e7cd7744308063af</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;rowSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayOfOneDGrids</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4580db34a8438863e75c40cd47e9c8d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>rowSpace</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a07aee362e04f713c139730c991de9baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>sizes</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2035c97cda24870644070eae0f8ecfae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>minPositions</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9230fc37403bb00ecd27ad842eb01c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>maxPositions</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a958f92e18bcab93e1866ec67b18e408b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformGrids</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a143a91500dd5cbc18dd9f8ec912f21d1</anchor>
      <arglist>(const V &amp;sizesVec, const V &amp;minPositionsVec, const V &amp;maxPositionsVec)</arglist>
    </member>
    <member kind="function">
      <type>const BaseOneDGrid&lt; double &gt; &amp;</type>
      <name>grid</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1e09877a9c5e712a03812163f628685b</anchor>
      <arglist>(unsigned int rowId) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abe7ada351d4ab3d04987f52cfedb419c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae9f51dffdcb939ac6b85d700a60fe167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_rowSpace</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af8f8d1a3e1d4f6213cf64698f95d34da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistArray&lt; BaseOneDGrid&lt; double &gt; * &gt;</type>
      <name>m_oneDGrids</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0cdfeb23fce031448906cef8d15fd407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_sizes</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae2164bf692a8fed51b630a114824ffa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_minPositions</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaca722e41b97a006385c588ea888f7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_maxPositions</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a8deeecb4b58f401acdc1fd101d6b5f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2c9eb92727869d6f985ed01c4a6d833d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af1bc76a10219d37cae967bf8f6d9859a</anchor>
      <arglist>(std::ostream &amp;os, const ArrayOfOneDGrids&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ArrayOfOneDTables</name>
    <filename>a00025.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayOfOneDTables</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae36f0c33595a2d46d08eced253d1eef3</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;rowSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayOfOneDTables</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a233bf24beaf3adabca4735eb7a88c966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneDTable</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad52be35568cf8c325569b4ae272acab9</anchor>
      <arglist>(unsigned int rowId, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>oneDTable</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ade48785a66524243c5a22ec39bc6de2d</anchor>
      <arglist>(unsigned int rowId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aec66e8a1e7f0baf3adc29332590ea1af</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a51d23742e1c418efc4e829cb06fcda76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae9bfd81e226ee5712cd160031f96d4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; V, M &gt; &amp;</type>
      <name>m_rowSpace</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a476632866ae0eebc389f19b8b83cc324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistArray&lt; std::vector&lt; double &gt; * &gt;</type>
      <name>m_oneDTables</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ad5e13befcb2e58dde1c13e396388a696</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::AsciiTable</name>
    <filename>a00027.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AsciiTable</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4d856e0d046d823e906aa4448b5762f1</anchor>
      <arglist>(const BaseEnvironment &amp;env, unsigned int numRows, unsigned int numExtraCols, const std::vector&lt; bool &gt; *extraColIsString, const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsciiTable</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2ff35b2d6920dc9e13dd8966a76beb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numRows</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa764ef68ef1d2ed85a4b6bd4eb0d7b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>numCols</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a428f547b9f5007e673245c8d2d0be387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DistArray&lt; std::string &gt; &amp;</type>
      <name>stringColumn</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a8918d88137629c62e2408c164795479c</anchor>
      <arglist>(unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>doubleColumn</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a267e1834e60c5df459122b2509e4ca9d</anchor>
      <arglist>(unsigned int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4e58f0ab57b3af3aa4333955175abcf3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Map *</type>
      <name>newMap</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa42459bf69563f6606103c5f6da60a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readColumnsFromFile</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a008557a6d782f76a51e72c77b3136322</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Map *</type>
      <name>newMap</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>abb01e65369e9ad3e43e788d8ed2d2415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2ba907db652aa02d53d493980d7a3753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numRows</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4f772a7719d36cb0a0908eed37bd1deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numCols</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ada886c8db06d2d618f2898ad2cf2bd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_colIsString</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a1c84e461d75e0846c156617f222c2ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fileName</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>adb7e4bac907ef1c93d745f02ea9f15d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Map *</type>
      <name>m_map</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a7771fe0a08a93abdeadcc5e55e350eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; DistArray&lt; std::string &gt; * &gt;</type>
      <name>m_stringColumns</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a14ba55d29e9a4ddeb14cd5acd8a27268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_doubleColumns</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa25a1d14c88cd5de341c43e052622f51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::Fft</name>
    <filename>a00079.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a749f7de2d358417a63e6060b96c5233b</anchor>
      <arglist>(const std::vector&lt; std::complex&lt; double &gt; &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;forwardResult)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab7147b1d0ec73019152c149e602172f1</anchor>
      <arglist>(const std::vector&lt; std::complex&lt; double &gt; &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;inverseResult)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ab31ecb8b49b52d107f152fa07a59628d</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;forwardResult)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aed1cacf899ad52ae979c475130411719</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;inverseResult)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fft</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a04fa27a65066c50e029c842fa1e3fe78</anchor>
      <arglist>(const BaseEnvironment &amp;env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Fft</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a3dac972e69f606d201dee17db1e9216b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a416c250a17337415b02e6545ed622476</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2e1faedd41887115b032b0b45d1f8f58</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data, unsigned int fftSize, std::vector&lt; std::complex&lt; double &gt; &gt; &amp;result)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a47bda8b9417d43d94b14d0721b6189e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseOneDGrid</name>
    <filename>a00037.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>BaseOneDGrid</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a83cc4075f64e729df5ab6dbbe992c9fb</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseOneDGrid</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ae19c9434ea06d92100e8d49686e354e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>operator[]</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a80648b45e665a5a10fec57e7ab094bce</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>size</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a388e922ba0c770039ab95e2cd1190dd6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>findIntervalId</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac238dee5e7ce70b93bbed696948c9df3</anchor>
      <arglist>(const T &amp;paramValue) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a668a0033829b907fac9e13466419b7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>af5fa59e47fae9f6195b00e5bec8310f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>af72394608d602022a6cff06018a5df22</anchor>
      <arglist>(std::ostream &amp;ofsvar) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a00cca8cd319438b0e49d9ebc72a1749d</anchor>
      <arglist>(std::ostream &amp;os, const BaseOneDGrid&lt; T &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StdOneDGrid</name>
    <filename>a00212.html</filename>
    <templarg></templarg>
    <base>QUESO::BaseOneDGrid</base>
    <member kind="function">
      <type></type>
      <name>StdOneDGrid</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>abc4d171b8f9df81014b10ac86e84b3b2</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const std::vector&lt; T &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StdOneDGrid</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ab001d3cccbda4c4c288e5f6a3e398574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a08cb60749c59ff27239c231d6a0f1eca</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a006574772a0021d68c6f5c98e2db3458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>findIntervalId</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>aaf32f8fe97724ad2d23d5be9b2faeaae</anchor>
      <arglist>(const T &amp;paramValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>m_points</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ab6b505e5ffa0e77dfd0928f8d99155bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StreamUtilities</name>
    <filename>a00214.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamUtilities</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a7c05326693d7dc8f0d931c0cc1ab16e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StreamUtilities</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>a74ef7d80a93b5bfde14bd18b921df890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>skip_comment_lines</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>aa2ad7cb1ba55d18c3a5050ce2187022b</anchor>
      <arglist>(std::istream &amp;in, const char comment_start)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::UniformOneDGrid</name>
    <filename>a00223.html</filename>
    <templarg>T</templarg>
    <base>QUESO::BaseOneDGrid</base>
    <member kind="function">
      <type></type>
      <name>UniformOneDGrid</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>aedd7bcaf0aec01d5c97c4f31f2b3d357</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, unsigned int size, T minPosition, T maxPosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UniformOneDGrid</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a2cfd6fdc7085bd667e18cef6771cf930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a2fe101c8fbce7a6ac00b07781c2c6b6e</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a66a0589eb7da47895f2bab97b916fca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>findIntervalId</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>afa2a0d3a54ce7fed0610a81337dfeae7</anchor>
      <arglist>(const T &amp;paramValue) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_size</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a4d76f44ccd66199aa55fa75aed57ffaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_minPosition</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a1cf3c2bcc5b0dd70ecf5addcae839a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_maxPosition</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ab65cb3991c8759837cdc0f3a5094a4c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BayesianJointPdf</name>
    <filename>a00052.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>BayesianJointPdf</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a035122f1015976118ba96c9cd37edda0</anchor>
      <arglist>(const char *prefix, const BaseJointPdf&lt; V, M &gt; &amp;priorDensity, const BaseScalarFunction&lt; V, M &gt; &amp;likelihoodFunction, double likelihoodExponent, const VectorSet&lt; V, M &gt; &amp;intersectionDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BayesianJointPdf</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a060c1d9fcfd092dbc5501afaa9b362db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad67362b4ab48a722db976430cf03165e</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a98e54ee24452e2477469a0c84eecbfca</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a7e00d685068bcf34253e5a101b539261</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalizationStyle</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aa23751ede9ec9f2e7bdd81c5326f47d5</anchor>
      <arglist>(unsigned int value) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastComputedLogPrior</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aaae16348ff3b0ab3c1c64605fbc1d493</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastComputedLogLikelihood</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a500cbccdedf8dbc7c1f9652c262a160a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseJointPdf</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae1f0870366a17d71e05a2f84ec49e06e</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseJointPdf</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9f41f5dc30ddfd59e149c3a748898553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogOfNormalizationFactor</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a2903b3f031e68907fe7422fedc83e5dc</anchor>
      <arglist>(double value) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseJointPdf&lt; V, M &gt; &amp;</type>
      <name>m_priorDensity</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a3cafafe8c5ea2353eedaecee156f609a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseScalarFunction&lt; V, M &gt; &amp;</type>
      <name>m_likelihoodFunction</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a8e2506801de447f8acd187f8edfa330d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_likelihoodExponent</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a511b1e403ebcab436177491ea8f21c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_lastComputedLogPrior</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2b1c5582be60a876a6dd08766e7e31ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_lastComputedLogLikelihood</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af97f3ff0d65154366e31d14fd88ccb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_tmpVector1</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>af4252d2628298423a60335eef72136c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_tmpVector2</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a2c81721bddf0ffd5547751f1a8221a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>M *</type>
      <name>m_tmpMatrix</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a686da1b57929c8b506a5e8fe8974603d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_normalizationStyle</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a138c99bcef7a67077d9612bddfdcb896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_logOfNormalizationFactor</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae82d4191f17af8c7a26226d127bc7850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>commonComputeLogOfNormalizationFactor</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7b7bdd13d2de51198bf75d522e02545b</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BetaJointPdf</name>
    <filename>a00053.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>BetaJointPdf</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a82b8baf377f485ac028207983a73618e</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BetaJointPdf</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aaa4264f75e61e066b44ab545a3d1ae39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a14909bee55e4d764be71e7a313716d9b</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a713d655107dd51eac9d1c19630359a06</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aaa67d058285caffa8dcb0235fbaf7726</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNormalizationStyle</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab11f1d096f82cc7857cefe1b92f6b28e</anchor>
      <arglist>(unsigned int value) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_alpha</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aaed2224330514a2b04d0b2924b7f9f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_beta</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a71e4c9d34bc0732044efd7b30dea2841</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BetaVectorRealizer</name>
    <filename>a00054.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>BetaVectorRealizer</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a476e76c89f2f6706989943596d9158ae</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BetaVectorRealizer</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aaa4a00655b79a138fa28cea29a91a91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a75659aac16145ad3e770e852500ee7f2</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorRealizer</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad77258f8737d87b5d0cd58b398939c70</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, unsigned int subPeriod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorRealizer</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>abc2eda9b3cea09c559c19e349c537b91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>unifiedImageSet</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad958991bab8d6369e8a0d66b22a237d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subPeriod</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad9fda59efacf5bd84c472c96dfa00613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_alpha</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a9a1570ec745b892fafe325605a2dcb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_beta</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a0f2c801dbb06b1a5e41817fb66d3d952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>acde246c52f82d8ed687d91cfac14c29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac5559b6921816ccaed7afc2d342c2a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_unifiedImageSet</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6c705235d28a3c12641da57cde948872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>m_subPeriod</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aeddb6129f2810fef48b4e00daa5cea7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BetaVectorRV</name>
    <filename>a00055.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>BetaVectorRV</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a090eae9c454f4f68d536c2237e4bff03</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BetaVectorRV</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a24d791770f3518157c00a36a3c421649</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae54ad1998b22aed2f5c8061cd1ad56e5</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorRV</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a2254158741e63815277dd40541780015</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorRV</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a4a57ee3ddec5b40ed0ad262f7482b0ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad5bf8486b3bacb46b9d4ecba513fd37b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>imageSet</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aa4dd2f036228eac1f945bacc7147a922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseJointPdf&lt; V, M &gt; &amp;</type>
      <name>pdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a3206740e05e0c64a88273029e963b185</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorRealizer&lt; V, M &gt; &amp;</type>
      <name>realizer</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aea4b01eef0baf36944d14459a7b9ccf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorCdf&lt; V, M &gt; &amp;</type>
      <name>subCdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a905586dc1529a3ae7dd7f04313ca9e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorCdf&lt; V, M &gt; &amp;</type>
      <name>unifiedCdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a045a14e1ee948ac3162199a06606ce80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorMdf&lt; V, M &gt; &amp;</type>
      <name>mdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a81f6ade1c28022b813d1276f2c217404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a556761c50e2d171977ef5f19a63c8c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a030ce3bc9873a9eaf6d8bf452c096ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_imageSet</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad31872bb4da22d47528cb9d691b3b7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseJointPdf&lt; V, M &gt; *</type>
      <name>m_pdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a0ca926bca6fbcc688be6fc7496449e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BaseVectorRealizer&lt; V, M &gt; *</type>
      <name>m_realizer</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad99bc05293c0fd0a0accb3191fb7119e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseVectorCdf&lt; V, M &gt; *</type>
      <name>m_subCdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a1a1117671c7fa2e572a9484463bee3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseVectorCdf&lt; V, M &gt; *</type>
      <name>m_unifiedCdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a31a1d44bbb6a7c030ca31a9577904252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseVectorMdf&lt; V, M &gt; *</type>
      <name>m_mdf</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5a95d0107f66cf9b0ed3ad18a3d738df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConcatenatedJointPdf</name>
    <filename>a00058.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>ConcatenatedJointPdf</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aff646f6aafe63e66dca291925bad6ca1</anchor>
      <arglist>(const char *prefix, const BaseJointPdf&lt; V, M &gt; &amp;density1, const BaseJointPdf&lt; V, M &gt; &amp;density2, const VectorSet&lt; V, M &gt; &amp;concatenatedDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatenatedJointPdf</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a96f8908c3ee9d975919624b37eea20bb</anchor>
      <arglist>(const char *prefix, const std::vector&lt; const BaseJointPdf&lt; V, M &gt; * &gt; &amp;densities, const VectorSet&lt; V, M &gt; &amp;concatenatedDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcatenatedJointPdf</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9b4a0c33fa7dc23034be19455de61bcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7a3bbf8dab211968e9691a620fee0e4d</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aca499666e5c3d3d26c562492a15ab112</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalizationStyle</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a686ff513ae812f26f9a71705dd2082ad</anchor>
      <arglist>(unsigned int value) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad960a39a781a7a891df0ae0ee4670199</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const BaseJointPdf&lt; V, M &gt; * &gt;</type>
      <name>m_densities</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a42ee130daadf7ceb0d1745011f5b1169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConcatenatedVectorRealizer</name>
    <filename>a00059.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>ConcatenatedVectorRealizer</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a8a97c764739721d97851285e69b9739a</anchor>
      <arglist>(const char *prefix, const BaseVectorRealizer&lt; V, M &gt; &amp;realizer1, const BaseVectorRealizer&lt; V, M &gt; &amp;realizer2, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatenatedVectorRealizer</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>afc7fe7165243f12a2da43f78ee67ef5c</anchor>
      <arglist>(const char *prefix, const std::vector&lt; const BaseVectorRealizer&lt; V, M &gt; * &gt; &amp;realizers, unsigned int minPeriod, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcatenatedVectorRealizer</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a661c37a3cd05a88d98ba95cc2780bb81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>afa41c8065e84a5bbfd74a67436ecd889</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const BaseVectorRealizer&lt; V, M &gt; * &gt;</type>
      <name>m_realizers</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a1be059d72ef9d1296928d345774e89c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ConcatenatedVectorRV</name>
    <filename>a00060.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>ConcatenatedVectorRV</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a72032f6b6104335f66b6c0e3d4c541b2</anchor>
      <arglist>(const char *prefix, const BaseVectorRV&lt; V, M &gt; &amp;rv1, const BaseVectorRV&lt; V, M &gt; &amp;rv2, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcatenatedVectorRV</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a213dad6314572cae365b86968afd83ba</anchor>
      <arglist>(const char *prefix, const std::vector&lt; const BaseVectorRV&lt; V, M &gt; * &gt; &amp;rvs, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcatenatedVectorRV</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a04abc805feb3662610a8b14d4d087865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac479f33e7ef6ff9f17b930aef13fcd7c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const BaseVectorRV&lt; V, M &gt; * &gt;</type>
      <name>m_rvs</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a5b69ebda44adae11e7d45987dac4b0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const BaseJointPdf&lt; V, M &gt; * &gt;</type>
      <name>m_pdfs</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>afbe85f9e6091d0086511d911929c2348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const BaseVectorRealizer&lt; V, M &gt; * &gt;</type>
      <name>m_realizers</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af5481dcec21a16d9b3d00a35d161d34f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ExponentialMatrixCovarianceFunction</name>
    <filename>a00077.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseMatrixCovarianceFunction</base>
    <member kind="function">
      <type></type>
      <name>ExponentialMatrixCovarianceFunction</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a15ab626ab0e3ee4adcdc4460d79a8cb7</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;basicDomainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet, const Q_M &amp;sigmas, const Q_M &amp;as)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExponentialMatrixCovarianceFunction</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa3141a3558de01ca06ca39698e872396</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>covMatrix</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a039c72a29ea453320cbdb2a6e54a360a</anchor>
      <arglist>(const P_V &amp;domainVector1, const P_V &amp;domainVector2, Q_M &amp;imageMatrix) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseMatrixCovarianceFunction</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa19fd2a4d2cc8ce822d4712abbd45021</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;basicDomainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseMatrixCovarianceFunction</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a821c7190922a832ecc4ae3bcc78b99cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>basicDomainSet</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a6ce876e4dae5ab4b165ac100e310dd45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Q_M *</type>
      <name>m_sigmas</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4da6af8ffd336294a3d7a89c5258099e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Q_M *</type>
      <name>m_as</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a63e36890c98437a802ba59be08fb166b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a2bf98f6576db775109e240a2d828c578</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a05865387f77ce48e71ab2448982c5616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>m_basicDomainSet</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3c466742b27fc304cce106f96d8e49c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_imageSet</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa6e05a29048771a3a327b82cea09d480</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ExponentialScalarCovarianceFunction</name>
    <filename>a00078.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseScalarCovarianceFunction</base>
    <member kind="function">
      <type></type>
      <name>ExponentialScalarCovarianceFunction</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a2b0393d92cd21365c2d76d250007ea9a</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;basicDomainSet, double sigma, double a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExponentialScalarCovarianceFunction</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac3eb24d0980491bd3e5bc718d304789c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ad65cfe1440c9045718bc57827d6fb551</anchor>
      <arglist>(const V &amp;domainVector1, const V &amp;domainVector2) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseScalarCovarianceFunction</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a7a3d53a332dffce97c5579d93eaf91ff</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;basicDomainSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseScalarCovarianceFunction</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a5db872c7f5929e819543f7f58063f3ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>basicDomainSet</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a703aa6a8e475adaface0ec514b48a5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_sigma</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>aece243cd9fbe9bdd7720b422c2f7513a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_a</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a16940568b7c22abb6caf31ccfb505c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a2a100016b480c498b5219fb937d62543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a21636873436b88cb77075c6edbd61c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_basicDomainSet</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a1060392114362022e427678d0f97ab12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::FiniteDistribution</name>
    <filename>a00082.html</filename>
    <member kind="function">
      <type></type>
      <name>FiniteDistribution</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4aacd4bec1089ae18cb5026012b5f636</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const std::vector&lt; double &gt; &amp;inpWeights)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FiniteDistribution</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a963dca0b57a4abdab775f92aa0a80a8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a9ebc6c7cea43a32f794c55650bee5a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>weights</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af226db41d7abbb8403d87d56159e7b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sample</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afe4d105b0ffa6c629118239dcc35eb49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1e3d075444dbb96d4d31b51a7eafed41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0e437054e07abf8fbc80d5a5bb14c27d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_weights</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a37ce51dce9fa6b755277281d6dd7c052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; double, unsigned int &gt;</type>
      <name>m_map</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7b0ba94a9f10793519056eaf612cbeb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GammaJointPdf</name>
    <filename>a00088.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>GammaJointPdf</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aae9aa55f730ccefa107e1163bdb8e91a</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;a, const V &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GammaJointPdf</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a457ae0ae5485dce6e68d03fc8153c2ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a4907d38d266d271d34cce9be333a95df</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a990337e7c25a4214b15fd71cb6deb384</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5fb1d17a267c8110442689721e74c8d4</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_a</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ab7120940a19b96f70ffde24ddc22cf20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_b</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ad651745cadab6db31b6458ad8f72c570</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GammaVectorRealizer</name>
    <filename>a00089.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>GammaVectorRealizer</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ae6ec0099314ff9d89101c168abfcc9c3</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;a, const V &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GammaVectorRealizer</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac75db6b81ad76b17b1ffccfdd87594d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_a</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a536756e884d641240015451f2f7a759c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_b</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a55e4d4fe511a6d63eaa98d6d6a7aaac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac2c9be536e210dd61614f96372df8c62</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GammaVectorRV</name>
    <filename>a00090.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>GammaVectorRV</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad1c46c32498c41976adf7f5c560eb930</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;a, const V &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GammaVectorRV</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa1221113458fa26f8a79a8447ff0c341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ae6b687ef1f325e3eea4dd63a1660110a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianJointPdf</name>
    <filename>a00092.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>GaussianJointPdf</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>aefd24b17e6fe06c181ed01195da2df02</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianJointPdf</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a8b89c4a2052624e85a9e1b680c2eb7f0</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;lawExpVector, const M &amp;lawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianJointPdf</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a9ccde39f230ce5fad138da5d289119bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ae576dae6a972dd7350ca261569f056da</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a14207045679234c5112974be5445b30d</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>af5cfad4df319c6f535c0a9b739d0c398</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ab523fc855a49dfd3dbeab93d01506ffc</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a49d6451f8a54c12715f7ef22fdbc3314</anchor>
      <arglist>(const M &amp;newLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>lawCovMatrix</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a7f687f734404afd0e8b7e92b3d26e8bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawExpVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a927c7abde2026d17586013a04a0a053e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawVarVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ae7af4530bc9394393f3383b6321bc839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_lawExpVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a8ef2407f5234ce5e0ed0d05a21f183e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_lawVarVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a35008ff77d5f572a7ee58fef4bfc536d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_diagonalCovMatrix</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a7e18c86c60bd7dc4ceaadaab618c3241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const M *</type>
      <name>m_lawCovMatrix</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>af13b72027783d8db03721951a71087d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseGaussianLikelihood</name>
    <filename>a00033.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseScalarFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateModel</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a27a49f9fb4830bfe2c0dc6015c48466d</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V &amp;modelOutput, V *gradVector, M *hessianMatrix, V *hessianEffect) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGaussianLikelihood</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a77f96d5a7526947c3ccb3f4d1a62de6f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGaussianLikelihood</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a87e1378a685f2afff32be4369d33492a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const V &amp;</type>
      <name>m_observations</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a1d8164465eaac7206aa81e4347ac914c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodBlockDiagonalCovariance</name>
    <filename>a00093.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function">
      <type>double &amp;</type>
      <name>blockCoefficient</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a275005a63df10db8d9dd1b05ac7b0f93</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getBlockCoefficient</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ac5bc8e462043d89a2ae3d2a52cef7690</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a818d924060f34d677e64069287899ec4</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a498f2dcf5d9c1eea8ee57da1421e84d7</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodBlockDiagonalCovariance</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a053a6769492c4c712ec4c25b54924a1c</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, const GslBlockMatrix &amp;covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodBlockDiagonalCovariance</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a050cef2ea403d384a9a0bd3a53854ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_covarianceCoefficients</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>ad0ecb8377eaedb3effd990299a209776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GslBlockMatrix &amp;</type>
      <name>m_covariance</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a328392c5f762e783d4b11f18899392b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients</name>
    <filename>a00094.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a7843d2b3ce35d526c3873cf74de56c6b</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a80a56623cad23c45357e85ed0d36e2dc</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a93b7082913b1734eade302e50b10a69e</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, const GslBlockMatrix &amp;covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a45252890ec1bbf03f7dd6d7987346bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GslBlockMatrix &amp;</type>
      <name>m_covariance</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ab6429e2a2b68c0f6b9df81bf515c555f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodDiagonalCovariance</name>
    <filename>a00095.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a206567cfcc4a4433acfa45016f2c0847</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9c8a3092b52841c28accc0a6a96a8c2d</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodDiagonalCovariance</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aefa01cf9350affb10a057286a2d7347e</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, const V &amp;covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodDiagonalCovariance</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a551b224f688cda387337ce953ab9f5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const V &amp;</type>
      <name>m_covariance</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aaa7767775b2e7eab02eb50d291df2e3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodFullCovariance</name>
    <filename>a00096.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>afc8f8d25936282af5d4489aa21f94937</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a436133388a158d94bfd017cfc5d97985</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodFullCovariance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a14d099a4551a5c3e1bae3e53eca41831</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, const M &amp;covariance, double covarianceCoefficient=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodFullCovariance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a61a29a02efdf1bd36595708780bad0d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_covarianceCoefficient</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a11db306c4b3356202432a35c359364da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const M &amp;</type>
      <name>m_covariance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a1a87b6382be0b61ca814926dbe0450c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodFullCovarianceRandomCoefficient</name>
    <filename>a00097.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a117e02de53c9e9fb17de48c9358903ad</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>aed3af60161374dc99d28361422349815</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodFullCovarianceRandomCoefficient</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>afabc4545138e8cbba6cef989a74bf7a3</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, const M &amp;covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodFullCovarianceRandomCoefficient</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a5c655fd386c954e1c62466c45096ab9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_covarianceCoefficient</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a950c3562e4d9baec958543537f18608d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const M &amp;</type>
      <name>m_covariance</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a4deadf594afced3bfac0c02e2631451e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianLikelihoodScalarCovariance</name>
    <filename>a00098.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseGaussianLikelihood</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a303c5bae905ae908389398ba66cc09da</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a156f507978d1caaa127cb058d2ea2ac0</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianLikelihoodScalarCovariance</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa7004f00a51c29e71a25eedb5f549114</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;observations, double covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianLikelihoodScalarCovariance</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a2e4de28d32dfc7a9a77ef41f41ea508d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_covariance</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aa8a85a90acf4fd7181f1e212d6aed55c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianVectorCdf</name>
    <filename>a00099.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorCdf</base>
    <member kind="function">
      <type></type>
      <name>GaussianVectorCdf</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aeb3e7d0cc777d58fb93d046a9da12071</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;pdfSupport, const V &amp;domainExpectedValues, const V &amp;domainVarianceValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianVectorCdf</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a2f0d23a52c90f82877363de1155b788f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;pdfSupport, const V &amp;domainExpectedValues, const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianVectorCdf</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a086e92beba8cffc2d0c4822aad49dfac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a369ca9e3dea35ddb4799a89db47b12d6</anchor>
      <arglist>(const V &amp;paramValues, V &amp;cdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a9afe1cc5333789fb73974a0d17e7fc0c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorCdf</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac7d0efcc78675e5ecc0ec684841c70e2</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;pdfSupport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorCdf</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a0b3bcef9ed025de3184649c46c72cafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>pdfSupport</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aaf5088d3994606a9d449ccd414509709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const BaseScalarCdf&lt; double &gt; &amp;</type>
      <name>cdf</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aac430df67c3f278eb14b1691b9fedbb2</anchor>
      <arglist>(unsigned int rowId) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subWriteContents</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>acd85c96edf9454b64fe31d6750164dfc</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a82118210a9047b9e9f393159d53d5a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const M *</type>
      <name>m_covMatrix</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0b00fdc02b3e15cd81d215d5c01bbd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa1effe370ac016f1fc7eaf538c5751a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac88b657f25153ab6c03bd65b64cada52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_pdfSupport</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4e083383c98725fa83c5c8c133dcfea4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianVectorMdf</name>
    <filename>a00100.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorMdf</base>
    <member kind="function">
      <type></type>
      <name>GaussianVectorMdf</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a015d3be8f9b52f811cd643294b6f1239</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;domainExpectedValues, const V &amp;domainVarianceValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianVectorMdf</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ae378d6cb9cf8db82e72744ca38f385e5</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;domainExpectedValues, const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianVectorMdf</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>afe3ec2c44fa9c133e825cecd29c1664c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a4b842d80858175ead566bd57aa334c0a</anchor>
      <arglist>(const V &amp;paramValues, V &amp;mdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aae69a5b89169542b47de4b0dfa2e60e5</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseVectorMdf</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8f07d6a9201d20e195b8cabcaa35f8c5</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseVectorMdf</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a91b8af0e2485cf6b16e0d9c6e6142899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>domainSet</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab060724f092b6623df50c0d0d725174c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ab1f0a239a1e16282909db1e02e8fb1cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const M *</type>
      <name>m_covMatrix</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad87107b4a431d4bb7b8a2c1409b71e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a39fbb4c9b12a0906a6d8c82535c837c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ada097dfdcb97838d0bd71a25ed7a4193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_domainSet</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a7f4804e5bb9d5947a4c7659605e8fa3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianVectorRealizer</name>
    <filename>a00101.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>GaussianVectorRealizer</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a853058669a791085bf60362042820601</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;lawExpVector, const M &amp;lowerCholLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianVectorRealizer</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>afea143de20a365e82a846ccb208b841b</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;lawExpVector, const M &amp;matU, const V &amp;vecSsqrt, const M &amp;matVt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussianVectorRealizer</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a06b3de43f945bb00c51fa289313f5fe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawExpVector</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aed5160b9059056ed699a43d02b52718f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawVarVector</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a4e42eda8fa9a5f23eb2cb6963df4eddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad001b06fe7dab455507df0eb19494518</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a04b1533c8f182d0705e5bb3309f3bb74</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLowerCholLawCovMatrix</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a560a5c29ea7dfe62c55615e0c619711b</anchor>
      <arglist>(const M &amp;newLowerCholLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLowerCholLawCovMatrix</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa3605290dd302f4444881796c303bb42</anchor>
      <arglist>(const M &amp;matU, const V &amp;vecSsqrt, const M &amp;matVt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawExpVector</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae1e6e0b9c268ced4a2192a9bcbd37668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawVarVector</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a80276355d3e24953ed7be0749a554d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_lowerCholLawCovMatrix</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ac5cc90b95dddd02a987f45af652f4495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matU</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a62aebd74fe00824ceed9724b8c41cfa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_vecSsqrt</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a473a7c1e61dd0b311bb7da6c244cb53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matVt</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa121afe8cf67cea2a52552b4d12d57b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GaussianVectorRV</name>
    <filename>a00102.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>GaussianVectorRV</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a20f697c49ff5cf6dc0e6813606c8b454</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianVectorRV</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a5527b8a27d7eb6dc25e46b5d1bfedf3d</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;lawExpVector, const M &amp;lawCovMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianVectorRV</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a40cc393946f60513ce087f7fdd0dfb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aa8ff6b66ce8ad7b53d3f3f721229334d</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a055c3ac22133d87cde4ea3e476b2d001</anchor>
      <arglist>(const M &amp;newLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2c7bee2104f7e257ca31d185634c2910</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericJointPdf</name>
    <filename>a00114.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>GenericJointPdf</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a580b11a250bfcf29176ca3c94547ed20</anchor>
      <arglist>(const char *prefix, const BaseScalarFunction&lt; V, M &gt; &amp;scalarFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericJointPdf</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5668d8d87960dc04dbde2821339b09f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a7bddaaf1d4087ca8e35fcb83c0df72d2</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a566150d033ce9c09a22c6f271a7155a8</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a282b1db04e25086938f3b8969ba484a9</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseScalarFunction&lt; V, M &gt; &amp;</type>
      <name>m_scalarFunction</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a26902b8f386e73c0d6bb39554ae4ba29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericMatrixCovarianceFunction</name>
    <filename>a00115.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseMatrixCovarianceFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericMatrixCovarianceFunction</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ade7c8ddfe0c9cfbf1ac3d3233249e0f7</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;basicDomainSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSet, void(*covRoutinePtr)(const P_V &amp;positionVector1, const P_V &amp;positionVector2, const void *routineDataPtr, Q_M &amp;imageMatrix), const void *routinesDataPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericMatrixCovarianceFunction</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a148ab4380b8d299c5418b333a80c5039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>m_covRoutinePtr</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a6841d2f9abbc3c31e0809c18d790777c</anchor>
      <arglist>)(const P_V &amp;positionVector1, const P_V &amp;positionVector2, const void *routineDataPtr, Q_M &amp;imageMatrix)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a54dbb7157e6a1be651d6467a00d6a8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>covMatrix</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ad1dc99df94d6fb77aa658fda06fd832d</anchor>
      <arglist>(const P_V &amp;positionVector1, const P_V &amp;positionVector2, Q_M &amp;imageMatrix) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericScalarCovarianceFunction</name>
    <filename>a00116.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseScalarCovarianceFunction</base>
    <member kind="function">
      <type></type>
      <name>GenericScalarCovarianceFunction</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a33edf41b7bcff2d5b519d9a0a6fee314</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, double(*covRoutinePtr)(const V &amp;positionVector1, const V &amp;positionVector2, const void *routineDataPtr), const void *routinesDataPtr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericScalarCovarianceFunction</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a8138a46b55498cf9b2f14aa51776d437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_covRoutinePtr</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a5ab019180d841614bc6c6c957be91f93</anchor>
      <arglist>)(const V &amp;positionVector1, const V &amp;positionVector2, const void *routineDataPtr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac09d3c5de0ca3e00e2ee16f7654c8da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ab02d90f973034672b84888c941230a8c</anchor>
      <arglist>(const V &amp;positionVector1, const V &amp;positionVector2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericVectorCdf</name>
    <filename>a00118.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorCdf</base>
    <member kind="function">
      <type></type>
      <name>GenericVectorCdf</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a76cb484b4bb7fb3450bd64777108b1a7</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;pdfSupport, double(*routinePtr)(const V &amp;paramValues, const void *routineDataPtr, V &amp;cdfVec), const void *routineDataPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericVectorCdf</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a4a8e94de6837482e7ac90cd993c4431a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aac56bdb8cbe36b161cf238db695eb454</anchor>
      <arglist>(const V &amp;paramValues, V &amp;cdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a475687f4b66245980a79fcc825c76c7c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_routinePtr</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a6ae0cb85626ec0d713ba4fbea621ffef</anchor>
      <arglist>)(const V &amp;paramValues, const void *routineDataPtr, V &amp;cdfVec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>adfdd6840459650b1f52fec7e42c5f8e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericVectorMdf</name>
    <filename>a00120.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorMdf</base>
    <member kind="function">
      <type></type>
      <name>GenericVectorMdf</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>abb32a5acd62865f3a765aee34cb5b432</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, double(*routinePtr)(const V &amp;paramValues, const void *routineDataPtr, V &amp;mdfVec), const void *routineDataPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericVectorMdf</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a4074117044028eb153e63797c2b130fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0f414d8b4756eef7f28166752dc8d48d</anchor>
      <arglist>(const V &amp;paramValues, V &amp;mdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a69bc51a5e118670a573c5378ea1e634f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double(*</type>
      <name>m_routinePtr</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>ae8a3da0e7389c6ba3f6448374e8792d6</anchor>
      <arglist>)(const V &amp;paramValues, const void *routineDataPtr, V &amp;mdfVec)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a3c60ffbbf54b329b9c70344cbe8138be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericVectorRealizer</name>
    <filename>a00121.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>GenericVectorRealizer</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>add5488cecf1f1f0779d056012ada18d8</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, unsigned int subPeriod, double(*routinePtr)(const void *routineDataPtr, V &amp;nextParamValues), const void *routineDataPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericVectorRealizer</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a0daa8ba5bde1dc77da5c9f784bd76cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>aeb79c966ab4e20b22f75acc6b7068925</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double(*</type>
      <name>m_routinePtr</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a913da22606696da4831afc3ef47a3a76</anchor>
      <arglist>)(const void *routineDataPtr, V &amp;nextParamValues)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const void *</type>
      <name>m_routineDataPtr</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>ad2c00300197c0a97bc43b55ea25c16cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::GenericVectorRV</name>
    <filename>a00122.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>GenericVectorRV</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a2590066cf4f18479ad7639478a991ecb</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericVectorRV</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ae7d3b5d67bcb07406aa65a39e9be25df</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, BaseJointPdf&lt; V, M &gt; &amp;pdf, BaseVectorRealizer&lt; V, M &gt; &amp;realizer, const BaseVectorCdf&lt; V, M &gt; &amp;subCdf, const BaseVectorCdf&lt; V, M &gt; &amp;unifiedCdf, const BaseVectorMdf&lt; V, M &gt; &amp;mdf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericVectorRV</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a5d897ccef62540e85395eb89af657f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdf</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a1645a2db9e84b44df65faefda9921277</anchor>
      <arglist>(BaseJointPdf&lt; V, M &gt; &amp;pdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRealizer</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a79509d97d93176da2113930c7225b0fd</anchor>
      <arglist>(BaseVectorRealizer&lt; V, M &gt; &amp;realizer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubCdf</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ab4d13e93cf8b2bf9d61c6fcf6306858e</anchor>
      <arglist>(BaseVectorCdf&lt; V, M &gt; &amp;subCdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnifiedCdf</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aa92eb9b8bff6cf9d82e32c98b4b7b0c9</anchor>
      <arglist>(BaseVectorCdf&lt; V, M &gt; &amp;unifiedCdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMdf</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a26904c9c8cff4f901e28c067e4b71110</anchor>
      <arglist>(BaseVectorMdf&lt; V, M &gt; &amp;mdf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a423908e3d0aec9a48122b17ebb0a5b57</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::HessianCovMatricesTKGroup</name>
    <filename>a00132.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseTKGroup</base>
    <member kind="function">
      <type></type>
      <name>HessianCovMatricesTKGroup</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a130c5c8e70e348350a12bd8d8a207fd4</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const std::vector&lt; double &gt; &amp;scales, const ScalarFunctionSynchronizer&lt; V, M &gt; &amp;targetPdfSynchronizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HessianCovMatricesTKGroup</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a7d5732bbedaebfc7b63ccbb11ea2c1b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>symmetric</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abf0f6a04543c18b2f95e615b09191c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a39835e7075b66c67a48ead7aa0f4d1ed</anchor>
      <arglist>(unsigned int stageId) const </arglist>
    </member>
    <member kind="function">
      <type>const GaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a658ecfbd10f11f4951649986ad65ae76</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;stageIds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPreComputingPosition</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a935cca86e22544d5a478e05862a4a200</anchor>
      <arglist>(const V &amp;position, unsigned int stageId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPreComputingPositions</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>af5ca7d6d8464e444607bb3da6cd39be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa780d91ffdf133df50d5d9a3a0edaa95</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseTKGroup</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad4274236f2092a7307f4d5e4b0a480ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseTKGroup</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a94df2ec2ed0f8e3b8073df873f5bd0c9</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const std::vector&lt; double &gt; &amp;scales)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseTKGroup</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a40fbcbbaf7977a83d38d76e1ef23f13f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac71535d0b77dfdd1419ff2dbf5d6d037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>preComputingPosition</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa864c6cc07327a698f91cef72cdc35aa</anchor>
      <arglist>(unsigned int stageId) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ScalarFunctionSynchronizer&lt; V, M &gt; &amp;</type>
      <name>m_targetPdfSynchronizer</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a22daa22c22e5d9800c3817f6912ca122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_originalNewtonSteps</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4c0fe3171a35cdd453a4e23e1438ddf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; M * &gt;</type>
      <name>m_originalCovMatrices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>acc7219917faf933e77694894856fa646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const EmptyEnvironment *</type>
      <name>m_emptyEnv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a41a8a2d2fde3c1994d3a542ccf9a194e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a2bce5e8aa5c844d4332a0e73cf00a1f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7c77e4969de60624dba1049cf44a1ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSpace&lt; V, M &gt; *</type>
      <name>m_vectorSpace</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a9930bbda0f3d9368653fb0577b89ec33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>m_scales</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad36d4dc6f4812e3e10d8090f0dbb9e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; const V * &gt;</type>
      <name>m_preComputingPositions</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a93d7fe55e30a7c6f209b01cb8a67e322</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; BaseVectorRV&lt; V, M &gt; * &gt;</type>
      <name>m_rvs</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7e19b94025277f2422d6739eaf1312e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InverseGammaJointPdf</name>
    <filename>a00145.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>InverseGammaJointPdf</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a2f59c9b8f9f43dd3438a557db128955f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InverseGammaJointPdf</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ae7d5ae604b17eeb3386e98fb01072cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1e0dbb40992578a11b40d0755f59ef2e</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a08dbbb7054026fcf4d429870cbe5d36f</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a812888fe10ba1f89ee6871dc9272140e</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_alpha</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a37f266451b387acdbdd1197de3229662</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V</type>
      <name>m_beta</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a599b413c540f5b8bae0482ff626e3562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InverseGammaVectorRealizer</name>
    <filename>a00146.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>InverseGammaVectorRealizer</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae179e3a7aa2b496f2b8b54904c8cb3d5</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InverseGammaVectorRealizer</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afb9611ce466dff4dac82b3b3efb3339e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a115670530398d012040f7183290251d3</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_alpha</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aeb864c46df7833d3723b0df787e283ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V</type>
      <name>m_beta</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a23a2409ad76d55ec0734b9755bea7997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InverseGammaVectorRV</name>
    <filename>a00147.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>InverseGammaVectorRV</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aff5af0a3d0a73c68d315c15c4e679fbf</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;alpha, const V &amp;beta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseGammaVectorRV</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a88e2325c4b2030dce7211a11420269b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a7c3326d0b39a69f1edd64219f286c7e7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InvLogitGaussianJointPdf</name>
    <filename>a00148.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianJointPdf</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa4e7315b1435a520688848b1cfe6b844</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;domainBoxSubset, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianJointPdf</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aee676ac0e407ecac18306fb9d5501c90</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;domainBoxSubset, const V &amp;lawExpVector, const M &amp;lawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvLogitGaussianJointPdf</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a28f81ec9d005b87b1c3a9695a553a11e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a49e025f242d5820106b43f935723aa17</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>aa6e0635099c93dd2eefb78f548d71c02</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ae4970599e641d5471735665372d7df60</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a05f3eed42089cbfd49dfc9816c82616a</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>acfe6f27fac146390e3010d8902cf4efb</anchor>
      <arglist>(const M &amp;newLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>lawCovMatrix</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>afa4aca81fbd8f8b2b00442c74bbf46db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawExpVector</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ad5df8a55bb836f61f36fce97ff9be8d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawVarVector</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a25499420f4299f0c36fb6e409d372fc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_lawExpVector</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>af17c32e00502295a225c6bf42d572ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_lawVarVector</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ab9e7e6d56670f585ba84718358af0890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_diagonalCovMatrix</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a03871faedb3776a9068ae25d08c27b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const M *</type>
      <name>m_lawCovMatrix</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a6ae3d1afec3ae94fca09863f8c04ae50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>m_domainBoxSubset</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a83f6a848604292724261a3cabe9e459f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InvLogitGaussianVectorRealizer</name>
    <filename>a00149.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianVectorRealizer</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a26997119c0ae88df02e5e0966958688d</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;unifiedImageBoxSubset, const V &amp;lawExpVector, const M &amp;lowerCholLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianVectorRealizer</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ade34bd69a275bf86a19508e843d647ce</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;unifiedImageBoxSubset, const V &amp;lawExpVector, const M &amp;matU, const V &amp;vecSsqrt, const M &amp;matVt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvLogitGaussianVectorRealizer</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>af94b989877376724d413aef59861da66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawExpVector</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a5fddb19e1f297e3c1661dc2b54c035dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawVarVector</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a1046b2babb716e71485e64ed4cfc247e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a80332b86bb5d988591dcfc634bdf6abb</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a9397e83addbebd7d0790a257b833dbe2</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLowerCholLawCovMatrix</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a43b28cdfcdf16eff5be6d43cca936bf9</anchor>
      <arglist>(const M &amp;newLowerCholLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLowerCholLawCovMatrix</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a5f517125418b2c77e63d04bf6fc26abd</anchor>
      <arglist>(const M &amp;matU, const V &amp;vecSsqrt, const M &amp;matVt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawExpVector</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aa43d03f2e159cbaeb172d6f5ba965f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawVarVector</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ae49194239ce507b9332f79513428b162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_lowerCholLawCovMatrix</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a643c2e4df3389ba3f0081b817f008528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matU</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a126a8fc4e26d2d345928f0a384dd8ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_vecSsqrt</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>ada200509b3d7f71df71f0537e77108a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matVt</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a41c7a9ee7642dd64378c55f3877c7c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>m_unifiedImageBoxSubset</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>af156f64ea73062b35dcae7744efd1b39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InvLogitGaussianVectorRV</name>
    <filename>a00150.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianVectorRV</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a295ac0962f520905ad3ef6b7c2851b97</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;imageBoxSubset, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvLogitGaussianVectorRV</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a7b75e0c3532be4ba03ca8ca6cf106bca</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;imageBoxSubset, const V &amp;lawExpVector, const M &amp;lawCovMatrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvLogitGaussianVectorRV</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>adb67b9d40f6b52d30c6af3e2ac9e50bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawExpVector</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ac2b5147d949d5fb5b3f40110a628dd30</anchor>
      <arglist>(const V &amp;newLawExpVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a7caa9d261feaee150240a78ef6f828e8</anchor>
      <arglist>(const M &amp;newLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a6f6b9cc996c5e0125a5a200623223197</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::JeffreysJointPdf</name>
    <filename>a00151.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>JeffreysJointPdf</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ab81ed478370d47e68f9d9b3fd1c311b1</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JeffreysJointPdf</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a80bd86d5926812b7c1269821c134f2ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a419f14cfc105d4abba5fb3640ad8432a</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad6bac0ec6fa6e187a1730b9d9d660e67</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>adbb735b753b142a4a9fd8cf25531801c</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::JeffreysVectorRealizer</name>
    <filename>a00152.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>JeffreysVectorRealizer</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a021a570c651d8e2145656ebc47486b30</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JeffreysVectorRealizer</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a62c3dae91d392779204eba228470b65f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a505bdd78f3ef70a7227f57aa6ef6df04</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::JeffreysVectorRV</name>
    <filename>a00153.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>JeffreysVectorRV</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a04d5f96aa97c93e41c90235bb612879d</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JeffreysVectorRV</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>af9d05a41392aa58d8b7b2ad3db177900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a9390d9af60a2caf903943171a8d1df0b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseJointPdf</name>
    <filename>a00035.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseScalarFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>actualValue</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a3c367a0cc3fb707a136c5df47dd414c1</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>lnValue</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aaeb1d91fd791399a502f451b07bb1bfe</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a99d8ab490b093abffd6068b6ea5263bb</anchor>
      <arglist>(unsigned int numSamples, bool m_logOfNormalizationFactor) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LogNormalJointPdf</name>
    <filename>a00159.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>LogNormalJointPdf</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac8a9ad5414281317dfe22731c672a9ca</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogNormalJointPdf</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abba5c75de7f88fcf51e56aec03f35ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a87729cb9d59b73baefcbecb03e753cb9</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9c31e89ee4abe8f1747e50c8d472a94d</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a373e37c21ce8acf05fe72f4ec9deef9c</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawExpVector</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2ca856981ab03d0c84d19715da581c83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>lawVarVector</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afa9f7634ae6e54973cfe14463740171e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_lawExpVector</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1373e1737c3198b852fab05c77abea35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_lawVarVector</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abb84bcddf99dc15b4432baac0fc29122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>m_diagonalCovMatrix</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8c85380b9a7c7ab746b2c8cc9c9cf5ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LogNormalVectorRealizer</name>
    <filename>a00160.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>LogNormalVectorRealizer</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a155db70d5f9aee35d3f58cf5a5ae2f3f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;lawExpVector, const M &amp;lowerCholLawCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogNormalVectorRealizer</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a8e7ba3bee5bc42c44455c86d15400eb4</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;lawExpVector, const M &amp;matU, const V &amp;vecSsqrt, const M &amp;matVt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LogNormalVectorRealizer</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a581f1c3dbcb96ae5b74d33e6c50a28d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawExpVector</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>aebcd637e11b05db4cd7501d5e448d500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedLawVarVector</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a6674a97c519d647bcdb2523feafe149a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a27d5cb6728ed1c78ba2ce6f1d1e5144a</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawExpVector</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a896a336c4baf517add5ba372e5120408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedLawVarVector</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a418dbfe867eb80b53ebe3aeaf26d208c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_lowerCholLawCovMatrix</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a9a0d52cb94a3de5aa367d4e66f4fa137</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matU</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ac5d5aae6606895a42ab1c899bdb37906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_vecSsqrt</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ad714ba417a345d76f32d9af389b4dccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M *</type>
      <name>m_matVt</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a7fcafdfed9d2ec7cc70b87109240754a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LogNormalVectorRV</name>
    <filename>a00161.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>LogNormalVectorRV</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ae2fa33feed7a961777ff4122353d77d1</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;lawExpVector, const V &amp;lawVarVector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LogNormalVectorRV</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a821437ffc879715f63f5b6628877bb98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a150a212058169e2b708e82c8faff61eb</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MarkovChainPositionData</name>
    <filename>a00163.html</filename>
    <templarg>V</templarg>
    <member kind="function">
      <type></type>
      <name>MarkovChainPositionData</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>acbfcf6d39cc6a76a67e3d3ed0f8e2d6d</anchor>
      <arglist>(const BaseEnvironment &amp;env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkovChainPositionData</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ae184243490ce9d3decb2d0a2798f3b4c</anchor>
      <arglist>(const BaseEnvironment &amp;env, const V &amp;vecValues, bool outOfTargetSupport, double logLikelihood, double logTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkovChainPositionData</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>af051af85a8f286804dcf11b6eeae1be7</anchor>
      <arglist>(const MarkovChainPositionData&lt; V &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MarkovChainPositionData</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a17b359c50ca7914e9698f0ebcf29a19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkovChainPositionData&lt; V &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aa3608d527f0215fe772aa9f9e1686dd8</anchor>
      <arglist>(const MarkovChainPositionData&lt; V &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>vecValues</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a1ad19966c9bcb480d4f055ab6f3dc244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outOfTargetSupport</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a466849f2d261962720d7c8968e95b5f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logLikelihood</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a4d0fc22cd5a10065474ceaba13d18857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logTarget</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aa553894577fdc44739538bf51d30555b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aa6a5a75dd4661a811956b42a68291e7b</anchor>
      <arglist>(const V &amp;vecValues, bool outOfTargetSupport, double logLikelihood, double logTarget)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a61841c4f47bd11a7261668bb44e06bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_vecValues</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ad98640fe86c2c70671467686988c6b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_outOfTargetSupport</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac2dba3d144c038ccc297e95033331437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_logLikelihood</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a2def4815940aee10948cd6575f986010</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_logTarget</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a0d806977350824012500dca13e890a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a25bc5762fc4883882ca635dd83772a78</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a6ef33eb48213225a4ad86c5baf209257</anchor>
      <arglist>(std::ostream &amp;os, const MarkovChainPositionData&lt; V &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseMatrixCovarianceFunction</name>
    <filename>a00036.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>covMatrix</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>af1ae061b09f7b4187d2ba8920ced6074</anchor>
      <arglist>(const P_V &amp;domainVector1, const P_V &amp;domainVector2, Q_M &amp;imageMatrix) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::MHRawChainInfoStruct</name>
    <filename>a00169.html</filename>
    <member kind="function">
      <type></type>
      <name>MHRawChainInfoStruct</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a683362f09e3d50cd4ff82a4892aa8586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MHRawChainInfoStruct</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>aad713884a38d5cd99ae9072e53a6951a</anchor>
      <arglist>(const MHRawChainInfoStruct &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MHRawChainInfoStruct</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>abafb2a4a1907f0d765120990ad0ab198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MHRawChainInfoStruct &amp;</type>
      <name>operator=</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ad5caeca2e570614d2198339d3f4ebd59</anchor>
      <arglist>(const MHRawChainInfoStruct &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MHRawChainInfoStruct &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>aa4b3a01108cfac9339f570cafdc49b9b</anchor>
      <arglist>(const MHRawChainInfoStruct &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a347eb07ae3332d99813868ecb5b89682</anchor>
      <arglist>(const MHRawChainInfoStruct &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a366d78d7309ff99039bf005716ca18aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mpiSum</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a02374de9508e08e8a480250d5ee0c1f3</anchor>
      <arglist>(const MpiComm &amp;comm, MHRawChainInfoStruct &amp;sumInfo)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>runTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a5b36b9734f0b40d54cfd4c58c18c9b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>candidateRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ada3a9649c975062a366df63561c599c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>targetRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ab230db8f99e46f0c1e4fc6c2aa3773eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mhAlphaRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a16d5d703c764352dfe30dfaa25ce8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>drAlphaRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>afa74a9d74fc3e7942012b8d8448f6687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>drRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>acd15a61993f122a3780dfae6f096d9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>amRunTime</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a0ea7cbad553a5f79c1e1c89b25bc8cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numTargetCalls</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a506e08bdffc1f777e33c7ec2d7862747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numDRs</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a993b070bd796dd176f4168be05f11ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numOutOfTargetSupport</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a601f798ee4dc28cfa6b342fc04a8c841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numOutOfTargetSupportInDR</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a783bb6c6b6dcab7f2bcc9fd0f49c588f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numRejections</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a276f608de19910713df01124a971c79c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MetropolisHastingsSG</name>
    <filename>a00166.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <member kind="function">
      <type>const BaseTKGroup&lt; P_V, P_M &gt; &amp;</type>
      <name>transitionKernel</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7f1f92ee2b44232251a45a2001678476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSG</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aced8a6afa8902ab317f67b5ab38492b3</anchor>
      <arglist>(const char *prefix, const MhOptionsValues *alternativeOptionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;sourceRv, const P_V &amp;initialPosition, const P_M *inputProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSG</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab587b73319d67cb0d40bff910507817d</anchor>
      <arglist>(const char *prefix, const MhOptionsValues *alternativeOptionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;sourceRv, const P_V &amp;initialPosition, double initialLogPrior, double initialLogLikelihood, const P_M *inputProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSG</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a76aacd5c5b50134dc97b0bb8a8d3c047</anchor>
      <arglist>(const MLSamplingLevelOptions &amp;mlOptions, const BaseVectorRV&lt; P_V, P_M &gt; &amp;sourceRv, const P_V &amp;initialPosition, const P_M *inputProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSG</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4818e978bf9bb607aa47fe2daf6b9bfd</anchor>
      <arglist>(const MLSamplingLevelOptions &amp;mlOptions, const BaseVectorRV&lt; P_V, P_M &gt; &amp;sourceRv, const P_V &amp;initialPosition, double initialLogPrior, double initialLogLikelihood, const P_M *inputProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetropolisHastingsSG</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a86d5903964a3c8a873ab119be1b030a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateSequence</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a34aae6d77dc81adb00e7049942553ae7</anchor>
      <arglist>(BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain, ScalarSequence&lt; double &gt; *workingLogLikelihoodValues, ScalarSequence&lt; double &gt; *workingLogTargetValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRawChainInfo</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1f0aebb8374162b9dee9463412a21436</anchor>
      <arglist>(MHRawChainInfoStruct &amp;info) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a38f0ec3feee117f6abe20c0a806f9c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateFullChain</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>af904814eb149a8fcc8ca346f2c254337</anchor>
      <arglist>(const P_V &amp;valuesOf1stPosition, unsigned int chainSize, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain, ScalarSequence&lt; double &gt; *workingLogLikelihoodValues, ScalarSequence&lt; double &gt; *workingLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad12f6e93c14bd293d042d4155642de5e</anchor>
      <arglist>(unsigned int positionId, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readFullChain</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad1a6f23afa254985240949b8bbfb0c59</anchor>
      <arglist>(const std::string &amp;inputFileName, const std::string &amp;inputFileType, unsigned int chainSize, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>updateAdaptedCovMatrix</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8b6571483a26c8ce1783519c43ed55a4</anchor>
      <arglist>(const BaseVectorSequence&lt; P_V, P_M &gt; &amp;subChain, unsigned int idOfFirstPositionInSubChain, double &amp;lastChainSize, P_V &amp;lastMean, P_M &amp;lastAdaptedCovMatrix)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad5c2b3afd5e845ea22518536274a8dd7</anchor>
      <arglist>(const MarkovChainPositionData&lt; P_V &gt; &amp;x, const MarkovChainPositionData&lt; P_V &gt; &amp;y, unsigned int xStageId, unsigned int yStageId, double *alphaQuotientPtr=NULL)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2adeca5cc9cf99ea0b209eacfa42bd83</anchor>
      <arglist>(const std::vector&lt; MarkovChainPositionData&lt; P_V &gt; * &gt; &amp;inputPositions, const std::vector&lt; unsigned int &gt; &amp;inputTKStageIds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>acceptAlpha</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>abef3a3b60bc10db208864f6db09eeea8</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>writeInfo</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae354fe11a3f89df768b15f1743567db2</anchor>
      <arglist>(const BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain, std::ofstream &amp;ofsvar) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>transformInitialCovMatrixToGaussianSpace</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afe495daab173d27228a8901b25f8d52e</anchor>
      <arglist>(const BoxSubset&lt; P_V, P_M &gt; &amp;boxSubset)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac8ea061e55b920e0c8f9bce5c3f20e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>m_vectorSpace</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a2ef17fbfc6a156f03bbfad044b5a75f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseJointPdf&lt; P_V, P_M &gt; &amp;</type>
      <name>m_targetPdf</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a42ce4ffcb3addf62dd3f19fe8bb09268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_V</type>
      <name>m_initialPosition</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae29f5d1198228858283d733021da2b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_M</type>
      <name>m_initialProposalCovMatrix</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a4d9862afbafb34921e91de3d4610c6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_nullInputProposalCovMatrix</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a416c5ed0c8520d23a479d4a6d3c3c083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numDisabledParameters</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a43a883aa28c81ed99e5f0cd9de93889b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_parameterEnabledStatus</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afce8eeadae98935c72727b3640e88a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ScalarFunctionSynchronizer&lt; P_V, P_M &gt; *</type>
      <name>m_targetPdfSynchronizer</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ae7c7551764e0ccdfbe2862c544cdab10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseTKGroup&lt; P_V, P_M &gt; *</type>
      <name>m_tk</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a26e9680abddfb793486c995fa16f8c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_positionIdForDebugging</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a49500f5107190c94813e232cd806c2bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_stageIdForDebugging</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aca9351ab468808759b8b19686231ae4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_idsOfUniquePositions</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad1916a22b4a53ba67fa87f93c6e0a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_logTargets</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac33a6e46e05c20c071a46ecf58a9291c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_alphaQuotients</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6fd65985afd80114ece8b2b5fffe658d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_lastChainSize</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a005d221d1c458ff767ed03304ca4cd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_V *</type>
      <name>m_lastMean</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a9741f56d947e9d7967af91c6ea083b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>P_M *</type>
      <name>m_lastAdaptedCovMatrix</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1c73b49339c8a1015d95a890d7882331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numPositionsNotSubWritten</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a60695940f442f6568d10ee9e456032c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MHRawChainInfoStruct</type>
      <name>m_rawChainInfo</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac531509489028853bb17c0353fc9eafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MhOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a3033d190acb632bd5f31e55e54e70c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MetropolisHastingsSGOptions *</type>
      <name>m_oldOptions</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6581e284af3cb6791148443489e2830a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_computeInitialPriorAndLikelihoodValues</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a73fbdd653c2c5438046a1bde6ea4a652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_initialLogPriorValue</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a7f3d9a54081f2f01da2307d55dc2352a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_initialLogLikelihoodValue</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>af83a1c4f2d2fbd7d4de41fc458a5e651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_userDidNotProvideOptions</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8e2f301d393b5dfb84200ec96ad975af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>aed301deea1c0eab1a7d9e4a332729141</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ab930e71442c0c1e3b8236f2f975c0664</anchor>
      <arglist>(std::ostream &amp;os, const MetropolisHastingsSG&lt; P_V, P_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MhOptionsValues</name>
    <filename>a00168.html</filename>
    <member kind="function">
      <type></type>
      <name>MhOptionsValues</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9a76fc5a29edc4fba2e3c09f7ecf52cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MhOptionsValues</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae10154b6eefdd996e237b03c8208c69e</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MhOptionsValues</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af7c0a7b8b30ceeca00116e1f9fee6f2c</anchor>
      <arglist>(const MhOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MhOptionsValues</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aebd42a6c6f899ad8319ff8ddfcec88f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MhOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8637ff179290b8be53e5dc3154ee9148</anchor>
      <arglist>(const MhOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a66736c046146c02fc3e73f8d6e799c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a38417086e139a4f90346afc69ed695ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a768664ee23ad3783751eca33eaeb14b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_dataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a618cab38b10aab9a1c868a2d8672f374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac3c9acb7a09d53c2ae4bd9088e99aa27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_totallyMute</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af812309e81191e88dfdc87c5815141a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialPositionDataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a208c0eb1f88ee743b2710afb503c4b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialPositionDataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad5bdf1c0416c71aeef586e4c86b4d4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialProposalCovMatrixDataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af4cc4b8f1cea9441c9243d3ada49796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialProposalCovMatrixDataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afd25d3ec572922fe1cf7ff39d431633e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_parameterDisabledSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a88f45c280bb77a8a48d47504b8d9e898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3d031c2cdc8f17c589e999d11782c8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a61974cb51a10d03dcd317dcd10f2684f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainSize</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a18dcb5898ba7101ae11856e866742aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainGenerateExtra</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9d540978290d39df801e32f183450859</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainDisplayPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6d11f0ea62107b789da99befe29ebffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainMeasureRunTimes</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6fcc2efc9146b68548e62d707aeed883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainDataOutputPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad838a3095d5158e27b9af55597822d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a0ff310cdab62e1bdbff8663f8a6b1c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae435f8be38f9f6407a2e0f75c53b4e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainDataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7bd5a3926443946479ea617918d6723f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_rawChainDataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a99f722385d57bcb24542f3969c3764cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_filteredChainGenerate</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afe02816132a862e807ea3675b4125ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_filteredChainDiscardedPortion</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afdaa37947c3a5c5acc11b89fa0a98fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_filteredChainLag</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>abd87b32b15f3ce695d910b48d837094f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filteredChainDataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a337b2f1161814f1c52153cbe7706f59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filteredChainDataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>adc3052dc0f1c2fd5072cb415a0eb3265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_filteredChainDataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a249e8720b4570d5f4e6504a29a84ac04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_filteredChainDataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab465e2184857848c2276578b2b08baab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_displayCandidates</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1df386cecfd87745e4d8adfb472d3443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_putOutOfBoundsInChain</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6500d388ce724964ed858174a454177a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_tkUseLocalHessian</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3fa3d465b07ea276e7b2aa68b897e4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_tkUseNewtonComponent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae4fcf242f3d9e216c17d057faf6939c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_drMaxNumExtraStages</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab72acd4e4b80dd5c3a4b361466474f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_drScalesForExtraStages</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a37774da61eda0aaa92dbcc417944b2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_drDuringAmNonAdaptiveInt</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab546a17967c0690d0c01730f63ccb70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_amKeepInitialMatrix</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a65b54138ec13a04d67a75a03f6300132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amInitialNonAdaptInterval</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3e72af53780ce9420c3454b00f56bc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amAdaptInterval</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a5cda43f7f5361c56eab4c036c9bcab5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amAdaptedMatricesDataOutputPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9e9de50014cce9683774d42119a1b752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_amAdaptedMatricesDataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad131a1b5617e040b7602fbd6bf4a600e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_amAdaptedMatricesDataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a2aeb0e38d87c86464af4bde6a202598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_amAdaptedMatricesDataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa149885c0a566a853626ddae4a31f313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_amAdaptedMatricesDataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a5e9c6606269be17f3f7627f1b065b864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_amEta</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac901ea79ba9b77aae31e3ea07df140b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_amEpsilon</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af899c001e1bbdaf9c740d6b4dc0e13e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_enableBrooksGelmanConvMonitor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afae1b3bf96ee3657212fa91ac7859bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_BrooksGelmanLag</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a574f8a1d72eb5d45af5ab0c020a69447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_outputLogLikelihood</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a2d36c3201433eb281f80c872a6ba2530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_outputLogTarget</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8363974fef982944d585aeb10c2a7184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_doLogitTransform</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af2a892c1ca242e4fe52c32ae5af66f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1baa18f8753ff26488e5b249775130e4</anchor>
      <arglist>(const MhOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab1de54d80971eb77c36f71d954f9403b</anchor>
      <arglist>(const BaseEnvironment *env)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a937073d5bcf90a06a9474da0c2ae940b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9ced1948d800963f7c0d9facc0cf081e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a38e1436ab90e08823811f19121a25698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>accbfaec4c629017b0169be8c6aa4655a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4c0db8e9b05758f7987c00645c100dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_totallyMute</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4c5a1330d2d6027edc05a773b0d6e0d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6bcabe805239ff13b233c95ca7cb9722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6a92b5feef4403354db69a8d8a2b8e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a800e5ec0fbd7c20ad6e52858561e4d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a71552f82aacd365fadc6d7cc8eeccc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_listOfDisabledParameters</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae06444dde7592c322b46ba829384fdac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a15a19e274a9006caa13ff40328535bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4d4c551ae9f93dab40b8052751fe7994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_size</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a6596a4cda60e31365fb3030599fa78f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_generateExtra</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a255b22f9d9835d1e5a66d11934948653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_displayPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a24ceb2ecc26ddd2badd958613f283683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_measureRunTimes</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a4ff4f31eeb21e18a94b9dc776527c5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>adee25eadeb5043646ea993e92f7b392d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa5426e8abd9a451c6fa554716b4726b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aeb0557876d9b538770e829946c484caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae7b476d8e5c1a1b2cb85c4cf54cbd6b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa581831881682acc9e5caca8fc8fbe62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_generate</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a65cc04be034ed67dfe68704a533ded41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_discardedPortion</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a304221fb324e7133030f080f31b9b7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_lag</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>afe0d343446914602cfd767633d1bc8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa5862e9fd41aa30b4d0a20765c4df66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a54159c85b4a42ce8fa24cd2ae5347721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a01febe6c4383d026207dd9958f8b0423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8f1847093dc5c61be3d84a4c75a7b584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_displayCandidates</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab275d234c600fbe5da116f437ecc07d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_putOutOfBoundsInChain</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa8b5e4eea71174dad6a4ab79958c65db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useLocalHessian</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a37f0d523d9ed547db3c190248b958e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useNewtonComponent</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a44a09b88d81b3bf0d3be56c53dc56484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_maxNumExtraStages</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a79b7207f4654e3ee9c282e97717000d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_listOfScalesForExtraStages</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af7dc826723139b3c1c5d180fc9f16df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_duringAmNonAdaptiveInt</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3344bc72857996380f70de494e122c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_keepInitialMatrix</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa64df041cc56cac4d1490cdbc56cb939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_initialNonAdaptInterval</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a72b934ce02a7fc159c4f0d489d6227de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptInterval</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a7e207495a0eb6cf671ef2e2ae339299d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputPeriod</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a06c63eaaaf3857abe6c595f363a3c087</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileName</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a1b88a52c7caf09769eb82ab6dbe9a2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileType</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a5b5b972e89a5495b8f95919576b70fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowAll</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac527f6ce8c03a3a1eae546a5df0965bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowedSet</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>aa79d319d97301b15cdf8683e8497d25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_eta</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad87f36fc9d5f2be111019add1e5dc7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_epsilon</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ac37370feecb7a78c246ab6ac0fd168d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_enableBrooksGelmanConvMonitor</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8579a23fa6b0a50e27ded9768618d27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_BrooksGelmanLag</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ae146ce4d66a1d5d4390a98c9bce24141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_outputLogLikelihood</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ababbcf1275119c4883367b2a7005b5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_outputLogTarget</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a3f9904f37b235ec7225ecd3e7e547e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_doLogitTransform</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ab1e2052c3f0a03008a61e6292a9ca68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad33e758ff729814ab32905f7e1a1b64b</anchor>
      <arglist>(std::ostream &amp;os, const MhOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MetropolisHastingsSGOptions</name>
    <filename>a00167.html</filename>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSGOptions</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a3d26a0f1ac5fa1cbe835abd62d1504d3</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSGOptions</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8dd35851b71b45a8ab47a3916eefa5fc</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const MhOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetropolisHastingsSGOptions</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ad76c11cfeb4c903887eaf752b5bb0b92</anchor>
      <arglist>(const MLSamplingLevelOptions &amp;mlOptions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetropolisHastingsSGOptions</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a5c914963bff6168e3b480643adb4362c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a51455fb28b064d5dc2cc114c8448021b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a61139044eab2b51b7b84c3cc823d74fe</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>MhOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a9d4792d9fc2dc5439b8ab489b0c236eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a4f7c510aaa530336d24259e2a89f5d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af3b684f0d91e727d4b1a487a0f6adade</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>afbc28f61e2fcff541bd7785735a3c344</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a328a978b771885e14d536272ff4aa9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1f55ffb7d4e6d0b111e1961fe8f57a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af73e79036b108974843e26bc036c70ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae5efdb40f8282073ebcad5892af4be44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a6d1f0f09fa5e238a54c6269c48fc6b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7d12ea603c8aba9215ad462d51720204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_totallyMute</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>adc30bd8388e2da2b063671fc5ccad850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a2dbb00eec372f529d21f770b0f220bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ad997674bedeb76faf75773dc8c3dfd17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a9d80faf22cf4d5614819ae5259463e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a00116cfe535c1bea24a321f76c8c501a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_listOfDisabledParameters</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae3b9e124f89c653b2b2b09d97baa87ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a5527cd4da92ce0da6488df811ae5a0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1e84e51f68d6be34fa1975950136a6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_size</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af9f6ac21012af90a790e855ad78485e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_generateExtra</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a9f4213c0fc6f0cf26eb103c78defc0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_displayPeriod</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa898db5d9a9541c71b727817f1fb443f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_measureRunTimes</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa0700b39e52408944717b283e0e87607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputPeriod</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a60d3d3f6d9bebd55f80e609ceb2fc4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a28d13976ef26bc450575528a37e1eeb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ae0bc37e9e5982b51f67e9788e4397cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowAll</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a336b749a8e06848243cf5bfbab2e43a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowedSet</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a53a51bf8aa24d9dbe4a9115453bd9e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_generate</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>abb60803a2ba0d32816a1ac9ad67fe7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_discardedPortion</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a6bc7417585b95eb59cedece39b5d5361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_lag</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aa3e984a031cf626281bccd866e603865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a340a0e9c2b5c2bec86d143cb0f8d64f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aca1e9af38b6ef1b83bf1fda6477404c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowAll</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7317db52b0866c8895ad1a16d4a4b337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowedSet</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a361df3110aea27f35465dedac372a90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_displayCandidates</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7881fafcf3caa7bf33d20ff0a7576944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_putOutOfBoundsInChain</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a6d1856b0435c6dfcac6b75ec36829b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useLocalHessian</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8b184b15ebded02f00668b1d0f761a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useNewtonComponent</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af732a2bed220e834c03802de602025fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_maxNumExtraStages</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8975cf2f3431edb501ccc94f0c65b2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_listOfScalesForExtraStages</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a23025b02dde1763feed23f53a6549ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_duringAmNonAdaptiveInt</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a86c8a503d026c8a112de8cfcb30e3a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_keepInitialMatrix</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a1974e4434e6e24ce67198f122f20ab7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_initialNonAdaptInterval</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a0293597878cab98eb6190ff67a0f3299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptInterval</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aad5313349ed8553e95b0d867499b4cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputPeriod</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac9a445e5def0140cc6cda1288bce2766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileName</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a50b5f394825d9c8848d11bd7636e2b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileType</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a0f0a406b0e8cce9d82a4534dfb45c23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowAll</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac45686ae902b17824aa18e6414fc9039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowedSet</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a850b7d178f40d3afbfc2e82cbbcaf25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_eta</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>af33c4f035c1e61c9c2109621ee2c61df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_epsilon</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a7a7a303ed2fc5905cb58a42ea53c1d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_enableBrooksGelmanConvMonitor</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a20bec7fcde9b7f19c0b19dfbb1cf0391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_BrooksGelmanLag</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aba5c080f85571b64975d41498774ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_outputLogLikelihood</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac6819ccd88a8ee66c979e9618a16277a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_outputLogTarget</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aecd92b03f28a407f83763d384c1012ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_doLogitTransform</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>aab88deccece2fb7710828b352d2b3e52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::ExchangeInfoStruct</name>
    <filename>a00073.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>originalNodeOfInitialPosition</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a34d90724820b54a6e1ae0991b0ae987c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>originalIndexOfInitialPosition</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a0ee7553d2094320561b274bc1fe4e546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>finalNodeOfInitialPosition</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>abb09fedcd6cccdc7b4ce5e331e736165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfPositions</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a4f2b2dace4f5ef2c7f9cf047150b31f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::BalancedLinkedChainControlStruct</name>
    <filename>a00028.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>P_V *</type>
      <name>initialPosition</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a682e9913c2635f421741bf23f45367eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialLogPrior</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3ff70f982e1973b5ea0c8ab9a7117a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialLogLikelihood</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a93a0bb2d107b6a706279a19a9153948b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfPositions</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aeee66de097885f91bcbeabc03d437b63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::BalancedLinkedChainsPerNodeStruct</name>
    <filename>a00029.html</filename>
    <templarg>P_V</templarg>
    <member kind="variable">
      <type>std::vector&lt; BalancedLinkedChainControlStruct&lt; P_V &gt; &gt;</type>
      <name>balLinkedChains</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad8a7fce965f7c04bdd0968a94e6e819c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::UnbalancedLinkedChainControlStruct</name>
    <filename>a00219.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>initialPositionIndexInPreviousChain</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>aa56937caf292c7197b0bbf707d43c935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>numberOfPositions</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a6269fe962299d5013aa918a80273762e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>QUESO::UnbalancedLinkedChainsPerNodeStruct</name>
    <filename>a00220.html</filename>
    <member kind="variable">
      <type>std::vector&lt; UnbalancedLinkedChainControlStruct &gt;</type>
      <name>unbLinkedChains</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a492f068163c8b833d09179f85bc62db6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MLSampling</name>
    <filename>a00171.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <member kind="function">
      <type></type>
      <name>MLSampling</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a7738e481975c7ca2a47fa763bb92bdbe</anchor>
      <arglist>(const char *prefix, const BaseVectorRV&lt; P_V, P_M &gt; &amp;priorRv, const BaseScalarFunction&lt; P_V, P_M &gt; &amp;likelihoodFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MLSampling</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ad3f442d1cac363497d04a4c8f8cf76c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateSequence</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a8d7296b30623c73ada38971cae27994a</anchor>
      <arglist>(BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingChain, ScalarSequence&lt; double &gt; *workingLogLikelihoodValues, ScalarSequence&lt; double &gt; *workingLogTargetValues)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logEvidence</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ae870f4b12060ae67d0c4473828b142f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanLogLikelihood</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ace6bbf605f8b655e0671d20309160941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eig</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a31f7f977a3d42a06fdcd2918cc31bb40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aec103dbc7af1af9e982d8c162033e77b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkpointML</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aa8e7bb1bd54ccafb9b276127a76eba71</anchor>
      <arglist>(double currExponent, double currEta, const SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, const ScalarSequence&lt; double &gt; &amp;currLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>restartML</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aa387be291dd763ce001ea769e87266c4</anchor>
      <arglist>(double &amp;currExponent, double &amp;currEta, SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, ScalarSequence&lt; double &gt; &amp;currLogLikelihoodValues, ScalarSequence&lt; double &gt; &amp;currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Level0_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0a2615d8f3627630d0cb62cb91614bd1</anchor>
      <arglist>(const MLSamplingLevelOptions &amp;currOptions, unsigned int &amp;unifiedRequestedNumSamples, SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, ScalarSequence&lt; double &gt; &amp;currLogLikelihoodValues, ScalarSequence&lt; double &gt; &amp;currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step01_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aea8da13aed5b04e64b8490ca5f107889</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, unsigned int &amp;unifiedRequestedNumSamples)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step02_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a06c37730b943a1838d58475d322639b9</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, ScalarSequence&lt; double &gt; &amp;currLogLikelihoodValues, ScalarSequence&lt; double &gt; &amp;currLogTargetValues, SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, unsigned int &amp;indexOfFirstWeight, unsigned int &amp;indexOfLastWeight)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step03_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ae53e6bc0ec5d1f3d3ac9df268086cd75</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, double prevExponent, double failedExponent, double &amp;currExponent, ScalarSequence&lt; double &gt; &amp;weightSequence)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step04_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a955fb446652327edbc275e3d9145e2db</anchor>
      <arglist>(const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, const ScalarSequence&lt; double &gt; &amp;weightSequence, P_M &amp;unifiedCovMatrix)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step05_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a3db529d364d5bb47916066d7cc21cb00</anchor>
      <arglist>(unsigned int unifiedRequestedNumSamples, const ScalarSequence&lt; double &gt; &amp;weightSequence, std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only, std::vector&lt; double &gt; &amp;unifiedWeightStdVectorAtProc0Only)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step06_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a21f642100e0690f65563e2c1f8bed816</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, unsigned int indexOfFirstWeight, unsigned int indexOfLastWeight, const std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only, bool &amp;useBalancedChains, std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step07_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a274e748a0f63debe94e9711a220a4a2f</anchor>
      <arglist>(bool useBalancedChains, unsigned int indexOfFirstWeight, unsigned int indexOfLastWeight, const std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only, UnbalancedLinkedChainsPerNodeStruct &amp;unbalancedLinkControl, const MLSamplingLevelOptions *currOptions, const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec, BalancedLinkedChainsPerNodeStruct&lt; P_V &gt; &amp;balancedLinkControl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step08_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a754bc11c7802f627fece9f063450739a</anchor>
      <arglist>(BayesianJointPdf&lt; P_V, P_M &gt; &amp;currPdf, GenericVectorRV&lt; P_V, P_M &gt; &amp;currRv)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step09_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a50d3acf40988561ec053ca304cd87e3a</anchor>
      <arglist>(const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, unsigned int indexOfFirstWeight, unsigned int indexOfLastWeight, const std::vector&lt; double &gt; &amp;unifiedWeightStdVectorAtProc0Only, const ScalarSequence&lt; double &gt; &amp;weightSequence, double prevEta, const GenericVectorRV&lt; P_V, P_M &gt; &amp;currRv, MLSamplingLevelOptions *currOptions, P_M &amp;unifiedCovMatrix, double &amp;currEta)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step10_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a35e14574ed728083c6147a9af5a13da7</anchor>
      <arglist>(MLSamplingLevelOptions &amp;currOptions, const P_M &amp;unifiedCovMatrix, const GenericVectorRV&lt; P_V, P_M &gt; &amp;currRv, bool useBalancedChains, const UnbalancedLinkedChainsPerNodeStruct &amp;unbalancedLinkControl, unsigned int indexOfFirstWeight, const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, const BalancedLinkedChainsPerNodeStruct&lt; P_V &gt; &amp;balancedLinkControl, SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, double &amp;cumulativeRawChainRunTime, unsigned int &amp;cumulativeRawChainRejections, ScalarSequence&lt; double &gt; *currLogLikelihoodValues, ScalarSequence&lt; double &gt; *currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateSequence_Step11_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aae527304bc1012a91ffc396e94fbab11</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, unsigned int unifiedRequestedNumSamples, unsigned int cumulativeRawChainRejections, SequenceOfVectors&lt; P_V, P_M &gt; &amp;currChain, ScalarSequence&lt; double &gt; &amp;currLogLikelihoodValues, ScalarSequence&lt; double &gt; &amp;currLogTargetValues, unsigned int &amp;unifiedNumberOfRejections)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>sampleIndexes_proc0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>af71979655e46135b6a3c97b8909321f0</anchor>
      <arglist>(unsigned int unifiedRequestedNumSamples, const std::vector&lt; double &gt; &amp;unifiedWeightStdVectorAtProc0Only, std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>decideOnBalancedChains_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a0f6f7872635b9546b3215fee347601f6</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, unsigned int indexOfFirstWeight, unsigned int indexOfLastWeight, const std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only, std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareBalLinkedChains_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aa1b45ea04c0d5ea7ed907727ceafd495</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec, BalancedLinkedChainsPerNodeStruct&lt; P_V &gt; &amp;balancedLinkControl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>prepareUnbLinkedChains_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a37dcf4d893b6c8f67fe077892bada773</anchor>
      <arglist>(unsigned int indexOfFirstWeight, unsigned int indexOfLastWeight, const std::vector&lt; unsigned int &gt; &amp;unifiedIndexCountersAtProc0Only, UnbalancedLinkedChainsPerNodeStruct &amp;unbalancedLinkControl)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateBalLinkedChains_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a8e9d7681d17623c726814d206c8be4b2</anchor>
      <arglist>(MLSamplingLevelOptions &amp;inputOptions, const P_M &amp;unifiedCovMatrix, const GenericVectorRV&lt; P_V, P_M &gt; &amp;rv, const BalancedLinkedChainsPerNodeStruct&lt; P_V &gt; &amp;balancedLinkControl, SequenceOfVectors&lt; P_V, P_M &gt; &amp;workingChain, double &amp;cumulativeRunTime, unsigned int &amp;cumulativeRejections, ScalarSequence&lt; double &gt; *currLogLikelihoodValues, ScalarSequence&lt; double &gt; *currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>generateUnbLinkedChains_all</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a3cbe105f352ff81001d2ef90a8c6e553</anchor>
      <arglist>(MLSamplingLevelOptions &amp;inputOptions, const P_M &amp;unifiedCovMatrix, const GenericVectorRV&lt; P_V, P_M &gt; &amp;rv, const UnbalancedLinkedChainsPerNodeStruct &amp;unbalancedLinkControl, unsigned int indexOfFirstWeight, const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, SequenceOfVectors&lt; P_V, P_M &gt; &amp;workingChain, double &amp;cumulativeRunTime, unsigned int &amp;cumulativeRejections, ScalarSequence&lt; double &gt; *currLogLikelihoodValues, ScalarSequence&lt; double &gt; *currLogTargetValues)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>justBalance_proc0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a44ff302d505e5de781ea6635ea0d85d9</anchor>
      <arglist>(const MLSamplingLevelOptions *currOptions, std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mpiExchangePositions_inter0</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a5c99d1312ea724e8dd7fddf1036b8e65</anchor>
      <arglist>(const SequenceOfVectors&lt; P_V, P_M &gt; &amp;prevChain, double prevExponent, double currExponent, const ScalarSequence&lt; double &gt; &amp;prevLogLikelihoodValues, const ScalarSequence&lt; double &gt; &amp;prevLogTargetValues, const std::vector&lt; ExchangeInfoStruct &gt; &amp;exchangeStdVec, const std::vector&lt; unsigned int &gt; &amp;finalNumChainsPerNode, const std::vector&lt; unsigned int &gt; &amp;finalNumPositionsPerNode, BalancedLinkedChainsPerNodeStruct&lt; P_V &gt; &amp;balancedLinkControl)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a13f1ca4fe9f94822fe572a743eaced1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_priorRv</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aa45e9c06bd51cae0dc2294af1831c158</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; P_V, P_M &gt; &amp;</type>
      <name>m_likelihoodFunction</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ab08c3059d23460db49b229aa88bd4e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>m_vectorSpace</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a7bc4c72f65ba9166ed94a6e198b0915b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSet&lt; P_V, P_M &gt; *</type>
      <name>m_targetDomain</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a21525858e93a7d9654fdf68c8ac25576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numDisabledParameters</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>afbe27e6149562020663b72da6592d933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_parameterEnabledStatus</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac76690384f70d74b8662faf7a051449e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MLSamplingOptions</type>
      <name>m_options</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>af8504cc57ec72b3c52833826b2bfff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_currLevel</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>af9416874c856e50f3b35270e801f17e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_currStep</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a1b1f8ccb4823bdfa26ec652f0807c63e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_debugExponent</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>abdd5cd35419283c33cc40a77d0f4f07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_logEvidenceFactors</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a75f2ceab4a2c6774b3fa07d74221dbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_logEvidence</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>afad63c42dccb1518319bf677f2bffde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_meanLogLikelihood</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>aec4229773274b58e3eaa49a77738389f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_eig</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>abec7f8cf9da08bc5c0a20d99fa4570af</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a5a8aa9e185dfa1698ec94d6709895d2c</anchor>
      <arglist>(std::ostream &amp;os, const MLSampling&lt; P_V, P_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MLSamplingLevelOptions</name>
    <filename>a00172.html</filename>
    <member kind="function">
      <type></type>
      <name>MLSamplingLevelOptions</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa7b40be8dee82bd18cac2a9992fbd689</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MLSamplingLevelOptions</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6dbb3e59abf33c2b485d2cbd429e9b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>afd8e8e8ba3c116b9a17b1d2497daaa1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a43eab3a27bdd011e3deb0f5544d8d2d1</anchor>
      <arglist>(const MLSamplingLevelOptions *defaultOptions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa93cbeb67047e0a606b8cdfe0047eebe</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a4423067de3fa689d820abeba4dc5babc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0f311d91e7048a9fb33cd39a84cd704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_checkpointOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa53156a239401da4600af25921bac260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_stopAtEnd</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>adbdb0fa054244261b7beb2cead72ef06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a56871c5760820c93526948a6e1c024e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_dataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad6a290719785a151c5876bb04145442a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aeead47ca5a3ccd405bae013a344d1dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str1</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac3586b30eb3e0f67e44074073bb157ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_loadBalanceAlgorithmId</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>af8f5d4ef3048da3e201e43ecc0a399fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_loadBalanceTreshold</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a1cef7bbef6c1017714281e8e464367d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_minEffectiveSizeRatio</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a58904c5920d9fa6673a8222529d5c143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxEffectiveSizeRatio</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6740534c2a37694cbc3775dbf60619a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_scaleCovMatrix</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac7deaeedd0deebf8ee14414fa3dbd334</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_minRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6010e1a97f0712b376653819aa6cdbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_maxRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad7ec8ef589c49609d0082d3eb514bb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_covRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8efaf9dfed7ff9f87c9a40aa8e8217a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_minAcceptableEta</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8230c7dd67833668237d3dc5b19c53c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_totallyMute</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aeb5b3d634be08ac24bdc008ecfbf08b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialPositionDataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac27dd9d3b5a376bfd146caa62fa32613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialPositionDataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a582573c99a718b1eefe417c0cccf071f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialProposalCovMatrixDataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa2dd58cb7865577da082fde9f0b180cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_initialProposalCovMatrixDataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6e6ea2f36afd7b6a6900eaf44165a796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_initialPositionUsePreviousLevelLikelihood</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ade345c3118bf3ddc432a6a17096d826e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_parameterDisabledSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0c5c308a5b9e0150be59ad52a48e6ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str2</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab91c7af5bfcfeb0466970713e2655e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_initialValuesOfDisabledParameters</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a50cbdab5fe9fbda97aca16d206888a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str3</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab373068cdb371c781603dbb2b75ae14d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a192498743c73fa9244c8652530beebb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>af216317de1aba551bfddd2be38e26898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainSize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8ab85efacd9881ab35b9f01b6e4fc5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainGenerateExtra</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab0dda87d92a759b277d07157def23174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainDisplayPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6d0e080a6b428a8e6c8fed14c597c883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainMeasureRunTimes</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad93ee62195c418eedb55877009102cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_rawChainDataOutputPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8fdb68e6d3e91f0334293f2ee009aded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab89d7ed301a956f913058a8e5f63fbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_rawChainDataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a239091edd94cfa694c6c33591c1d1ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_rawChainDataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a4e84fdd26bf87099d2b126f5fda379a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_rawChainDataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ae5c2fe5b90eda78e17ccfbf3dbcfcc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str4</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a399d93049d7862d47c8ac68e1885d0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_filteredChainGenerate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a878542ef3504c843b50e0bd5efd0c078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_filteredChainDiscardedPortion</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a22220cb7fbdef58a009733f8cf1887f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_filteredChainLag</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6740efa52d4f8ec112be817f5220cf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filteredChainDataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>abf333c405ee097104ee9b1b1e92ecd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filteredChainDataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a154ba7fd5c2fbc98af0ac91bb022a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_filteredChainDataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a80471ba2c70d39f2cb7e1ea954fb86b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_filteredChainDataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a12bf1b2424e791608d3dcd1254c3eef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str5</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a341ed1186366d5483559298a8c5348d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_displayCandidates</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a975a24a45096ac07b8e3a6cade590bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_putOutOfBoundsInChain</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>acf244c6ea5d1ac9c61d19d1d8f24fd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_tkUseLocalHessian</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a981084edf651ff9db5dd56a36ef54a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_tkUseNewtonComponent</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa763d458ffbb83ea5be881e9535a2cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_drMaxNumExtraStages</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab854494640bb98cad74ee656e62daab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>m_drScalesForExtraStages</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab4bdcc9166bc8cdbc9f5915dcb77e34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str6</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a57c51b01f2dd9dcf3ae13a6891c72b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_drDuringAmNonAdaptiveInt</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0824b7f76b5a6ee901f6a5edc0e130b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_amKeepInitialMatrix</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a9adec09f474c263078450c6ad66518e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amInitialNonAdaptInterval</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a75d028be834232b634bf5a23dcc73ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amAdaptInterval</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>abf7bc1e5bb55727e5c92bec2e49974a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_amAdaptedMatricesDataOutputPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8c7ce073c75774afdbffa1ba3674085c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_amAdaptedMatricesDataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a7dde9af112143992a87a72635e63a864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_amAdaptedMatricesDataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab209a7f5dac6c2b4e108a7a1829631c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_amAdaptedMatricesDataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad1ac51fd4b35c5decca04048ebeca3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_amAdaptedMatricesDataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a7bab0713dca38607204e38ce661799bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_str7</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a062489e53dd259c548d7ea9ed9428377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_amEta</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a87fe9b1c390bf7bff2ecc329064e7618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>m_amEpsilon</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>abf07f60a5115657e18d39a586a8093ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_doLogitTransform</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8c20ff4b3067dd046875f9b2a6ee39ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copyOptionsValues</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0e2afd2df142beb5e4bb76c869d990c2</anchor>
      <arglist>(const MLSamplingLevelOptions &amp;srcOptions)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getAllOptions</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a32423d052691257b4a021e4daead1f3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineAllOptions</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a453de4a4d572c2bf53d22480ca955b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>abc0ea4c2ece4e0cb1a6529dba2478189</anchor>
      <arglist>(const BaseEnvironment *env)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5bdc1fb3f6eb46f73feec9c356c9a1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a7eba55c8eefe226d3240869950d33da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5f29394c92a49c24e9c2725320ee3406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_checkpointOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab0b21922a976c557cdcded05fcbb9a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_stopAtEnd</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3182deb5fada9f8cc55f6335c5a65f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a16d8f61e3c8cf7281a8ad20af005f0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a27d13c15a4e8fbb4c748a3dc127feca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a9c4ef337e2c0c01cb6c8cbaa9a985f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_loadBalanceAlgorithmId</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aad6ce1095a38c062d5f1d9ca9e215671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_loadBalanceTreshold</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a818c93c8f5534e93b60246f9a46dbb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_minEffectiveSizeRatio</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a424cb93232913921ebde9cbca932a5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_maxEffectiveSizeRatio</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>adbc38162386ba0751cdf09cdeefae07f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_scaleCovMatrix</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa1f82f5b58286f8b2565d80cc33dec4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_minRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a384a262aeb20ef3ff57e9dd4697b464e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_maxRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ae226db9c741e8d6652f30c81cde61899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_covRejectionRate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3a8c05911fea3a80ff8efe3e046ba5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_minAcceptableEta</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3af49d715cf211ed67e5206bc0d1840d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_totallyMute</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a303f13a4f8fe1fb586ada0b95c0c2f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a08ae170166172f72b1b98e523ce0d71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPosition_dataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a562837ca20c890940f09e7ea90b5aaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ada1645363cc30723d66b6c8237425ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialProposalCovMatrix_dataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a75a15f2c496d82ce310669fb9de753c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialPositionUsePreviousLevelLikelihood</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a9b73a030ad553402f0cd778f5eaa3b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_listOfDisabledParameters</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a296043cd6f00282ccf1a39e219aa16ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_initialValuesOfDisabledParameters</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ab96236f77ecc1033bcdecbddced0c60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a58eff69f727ad1128029a0d6fc98e556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataInputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a530bd244a5f0e9ef40f9be18ec2dae49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_size</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a21f76f865e40198fc83406f617e396c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_generateExtra</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a775bb8dfb4e5f2a0069667586eb1b336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_displayPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad71a6b65d66c81154cabef647419cff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_measureRunTimes</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0dab337e638625987315c34660d8846e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6fd76d8d884e3432274110a02f98086b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad1d736cccbf3be64e1998c18ead26630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3cbc234ca24903ff9addc9a379bb69bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5edf0fb3329b34a79dee8d3f2187dd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_rawChain_dataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad7b34b44ea9dcfbf9092167bdb9d4ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_generate</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a889952cbad52c41c179ff6ffecf82dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_discardedPortion</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa1d2bc1ba487c867b5ab68748f1e6c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_lag</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a52e58ef7b6d840b8c6f7d505ba9cf1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>af9ec9aa644d0ee22a42a2aa7fdf49218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a39e79ec1b87802ecd32bf4999908ecbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a87338f130d6059b62643ad609f26bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_filteredChain_dataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a830bffae5d6cc92fd551db4ef6dfee64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_displayCandidates</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a54c504f38cb33871eb90b38b4ba80e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_putOutOfBoundsInChain</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a1858cab9660831ae92eb12aad280aa67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useLocalHessian</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a341b15acf7986499350294276d25954a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_tk_useNewtonComponent</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a875164924a6fe4ccf52d66db10c272a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_maxNumExtraStages</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a20e22ade885c548888ba633bc71b5ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_listOfScalesForExtraStages</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ad30c647128dde606b837cbf6c4c32389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dr_duringAmNonAdaptiveInt</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8b608af9f098f4d829236c1587b6a971</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_keepInitialMatrix</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a03b9660a262500e674dcc2afa77af169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_initialNonAdaptInterval</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a93c77cdea4092dc471e405270c5b226f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptInterval</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aaa6a4e45bd064d7b4656e71cfd71d58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputPeriod</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac8ab2064bc916c10fa3c7bf1793869e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileName</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a50b0b030e51402badf96072ea3add0ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputFileType</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>adaf47c65997276c4e7a2e5437a49f5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowAll</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a455507e07fb1494b26f4b387a72ca7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_adaptedMatrices_dataOutputAllowedSet</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a28e11986f1c955a367517086890f42bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_eta</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6fb0d64c285c2a3411fb24667a03f747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_am_epsilon</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5ecc043caa63c4a6980ed61f370bd59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_doLogitTransform</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a48ddcdf98d9cf30db62fb86e34cd8ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ae819a042fd2adc0e848c10e995629559</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingLevelOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MLSamplingOptions</name>
    <filename>a00173.html</filename>
    <member kind="function">
      <type></type>
      <name>MLSamplingOptions</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>abdbf362961e3abf0f375da5c7ca31907</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MLSamplingOptions</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a7494c07488ccee22c202462769aa2fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a507134cba6c1c525f6684122c7d90ccc</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1d3d48598e0b59b46337ce66a52671a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a16e12b97d14624eb190f3159f20c2219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_restartInputFileName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aff68336a5d6ae4160e541975260450d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_restartInputFileType</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aae8adcb5188369ea144d2144b53cde48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_restartChainSize</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a073caa3483cbca881934842451412681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2507c0e8b86f9d6f07a3f5609593fc96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_dataOutputAllowAll</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a530b32a42d38ca4112de8a06a2e760d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa5f7e589376e3700b0132c1fa91cccc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a60202df47c4f30e07e35ccfb67206727</anchor>
      <arglist>(const BaseEnvironment *env)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a28d73f222e9b20f1c749ed808f69eebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4bd9cdca62218b37b2b9078d12e034aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5239a6e156de70d1f64b90e5885556d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_restartInputFileName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a0fbc7946acb9944500d92503a1a0feaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_restartInputFileType</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3fa31b5691319385226e2149b549e269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_restartChainSize</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ad37df327253d40983ac3e3ed880069c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3950ebf354b0ff038c3e0b5c2cc2efa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowAll</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>af2f225d4068ab602b17ae28242596ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a0dc0efc965101db9b18888c3db5bef99</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a0eef54acbf2c6b6658728ce935dd6369</anchor>
      <arglist>(std::ostream &amp;os, const MLSamplingOptions &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ModelValidation</name>
    <filename>a00174.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ModelValidation</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a4745b3be6aaaeab5c904b2b4fe9f25f8</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModelValidation</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aa840badb782acf1a02e0c46c84bcdfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>run</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a1b8ef95ed1755f393e70b765ac009552</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a8da12a6dfe30feba5e3319031049a93f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ValidationCycle&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>cycle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a3ea30ea21d361878e5aea12f6aff8e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a357832c31f58c1bd11c10733317437ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aa239eb12478d1904e18ffe2ed712630f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValidationCycle&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_cycle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ac452e290711cc27c9f6cfd2a8242454f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MonteCarloSG</name>
    <filename>a00175.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>MonteCarloSG</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a63ad585f5b20991e053a3400a866d2fa</anchor>
      <arglist>(const char *prefix, const McOptionsValues *alternativeOptionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;qoiFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MonteCarloSG</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a8a89772b3aaaafacfebb4b10ba431c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateSequence</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a879d33eee1d328b6a8f9bff3d909a400</anchor>
      <arglist>(BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingPSeq, BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;workingQSeq)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>internGenerateSequence</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ad0a5e608dd814fbc17237a267c6d5827</anchor>
      <arglist>(const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingPSeq, BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;workingQSeq)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>actualGenerateSequence</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a597d3e067242d2df4de08b7d2c1e3fd1</anchor>
      <arglist>(const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingPSeq, BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;workingQSeq, unsigned int seqSize)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>actualReadSequence</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ac0ff47f13f63c034eeb8dc39d2b0b13e</anchor>
      <arglist>(const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, const std::string &amp;dataInputFileName, const std::string &amp;dataInputFileType, BaseVectorSequence&lt; P_V, P_M &gt; &amp;workingPSeq, BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;workingQSeq, unsigned int seqSize)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a30055a359b22cde54681679aed8ae6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_paramRv</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a938acc7072543d727fe35fa0f5d9013f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_qoiFunction</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ae0c3b848d58b4f79d5e3741e70fbcd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>m_paramSpace</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a64620f0dd80c96f86918e1d711767b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_qoiSpace</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a1df92e2ff2e7fa19d4ea158e71670ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorFunctionSynchronizer&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_qoiFunctionSynchronizer</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a5a55a6fa3562ec8253089ac242bc52ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numPsNotSubWritten</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a1bd46f12e850ab8d239205aafdae72af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_numQsNotSubWritten</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>af1d99dc1a3384fd294da7464ba1bda5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const McOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a27c10e2cefec1c401a696c1cff1936f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_userDidNotProvideOptions</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a6147f79132996d326ace3bd63579b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>aa920b82f555bc054c4e6495becbf0a40</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a1a685a4dd5f9b017d82d8856fa534f85</anchor>
      <arglist>(std::ostream &amp;os, const MonteCarloSG&lt; P_V, P_M, Q_V, Q_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::McOptionsValues</name>
    <filename>a00165.html</filename>
    <member kind="function">
      <type></type>
      <name>McOptionsValues</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a2f5f8f0ed30fdb090baddd5cde29461f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>McOptionsValues</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ab86604a51cc4a2304c78bfd38129e18e</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>McOptionsValues</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a65c499559788c30081b78443bcb36ca8</anchor>
      <arglist>(const McOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~McOptionsValues</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a6eb32ac4bf4277722e1d53eba6d1f0bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>McOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a5fcd5e9eab8253d0d311dd46a617eaeb</anchor>
      <arglist>(const McOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a26e79a884f904ae047bc43de980b231e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>af80caab3c8d7542764a8f4f99683fc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a67247424cb0b327fc1b4d6f067ce449c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>acd7555643c1595e497ccc47bdfae8d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_pseqDataOutputPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a7e7f833d945cdfecac2000196fae1aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_pseqDataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a8db3604c003959cb7ae7144a6bb37834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_pseqDataOutputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a7409d101fbe0676f87754234567dbc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_pseqDataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a264ab755cc81477580ef59ad7ffcd7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_qseqDataInputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>aedf79873213bca688ebbf6d873f42e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_qseqDataInputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ac44d90277d7ba36d096ca5254614440d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_qseqSize</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a54e8c4bb7d5ffa7755da7d148019c86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_qseqDisplayPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a4ab5a0e5c5d3d47fa15516d98739ae25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_qseqMeasureRunTimes</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a4ae449bf66717fbb497b2cf42fb53923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>m_qseqDataOutputPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a8680e9d1886eb0a5d0e5b856b2471dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_qseqDataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a1c2a61e5c129ba0c4c2455b75709feee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_qseqDataOutputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a4816ea4c0aef22cc5d2e9057ea44b73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_qseqDataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a15671d02e2a6fa2052361dde6342e263</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ac3432f802b2321d0cf374ee269351816</anchor>
      <arglist>(const McOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a01d7af282a3d8d085e0de3373d3650ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a3fed28b7262230801dd4d1abfe5ea4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a063391391c2905c70b993e2e5028ac74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a0cf0fec8aaa9ebee53483db06d6cff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a5e74ffc21297dbb2abc581555a327801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a9341b3e0747db81a000f810e5bab74d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>acf9894529279f725742c6389b7160d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>abcc66a088a8907f1d796aa5af0bb3571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>adc41f506c01e5fc79c5a00b427914de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataInputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a6cb2bc827360ec5e24beef2a7c115f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataInputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>aca76e3e9db499a3404c702686f847da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_size</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>aa2cffd6d4b4c20a7b878ed5c3f7e370c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_displayPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ace885e41731edb12aa0f1e233b1b6b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_measureRunTimes</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a78f6d5e40b9b5c1c91e72aa917a3be50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputPeriod</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>abc1a6397d869ab203db9fef2b35661f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputFileName</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>af669f3dd9b520a8e6cb6c42ef03a39cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputFileType</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ad3a1eb06bb8085d2ca515134a2f26597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputAllowedSet</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a84fdfd446c4c96928358482a7a7df6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ae8cc9278d50da0ea03c0b6381a2817cb</anchor>
      <arglist>(std::ostream &amp;os, const McOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::MonteCarloSGOptions</name>
    <filename>a00176.html</filename>
    <member kind="function">
      <type></type>
      <name>MonteCarloSGOptions</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8d22c4c64bdd7ea6abe20cfce4e23886</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonteCarloSGOptions</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>acdf23f683c4aaf634a019f5a7428e3cf</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const McOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MonteCarloSGOptions</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4741d71a4c085ecb209513995ece3a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a161ddeaf12cc851a16ff4d9ca77e1769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4c28feb1596bc5136460b7086f914973</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>McOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4bc6849a41ede87425cad9ab6e97df11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ac640fa60af7134d4113e9b7481a34f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a12768e6af07c0bf3e4b814aad1085c8e</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a7ede5c69451d9add0ae41d7492b6438d</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a16b93142f6a249ccf1d07de964fec2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a5934ab077001d3879eb64bd8369f64a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a604e9d58aa974b08eb38d70199c5d654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a057b072e55710c5effa4a5016e1d93ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a169218cf0b3d8d8035bb826a963f5e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputPeriod</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a38f56157a49d08a3fd6a837d95250f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputFileName</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a52759ecc968b903de4d651127f6e9a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputFileType</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>af894e246867b1b73f66322df656c44c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_pseq_dataOutputAllowedSet</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a496b1325324965abbeffd3ef8b919975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataInputFileName</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>adfa1e97f82f761f277721e3002fa5be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataInputFileType</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a93530ee50a7e47ad57b46ca6cf04a60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_size</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ab720df7bb4ec0dbffd231de174d30423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_displayPeriod</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a14d5adea03855e45e535cf10cf8ea3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_measureRunTimes</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a16456d0bcab4d4aca08b02f0ce123b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputPeriod</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a604e3546503d8b7f9a8e0c48922b2ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputFileName</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a30620452f8188a0b4a0519bed24e64d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputFileType</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a7e07046865a2e99b61ac30b94dfc8306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_qseq_dataOutputAllowedSet</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2d464d948dabe4fd9fbd1e912537b3e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::PoweredJointPdf</name>
    <filename>a00182.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>PoweredJointPdf</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>aaad4fce3dbea49b17af2ac3101e757c1</anchor>
      <arglist>(const char *prefix, const BaseJointPdf&lt; V, M &gt; &amp;srcDensity, double exponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PoweredJointPdf</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>abc4364733cade0f91fd9927e68d1fe85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a916888a016a1cd9aea0a7789be0f6957</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>addcc8c32b3dc30d22fb1e4a8350a14e3</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalizationStyle</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a306c48af4e2954a002f873e25b4c3499</anchor>
      <arglist>(unsigned int value) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>ae4d7e2a318f317652ebbf926d8a3391c</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseJointPdf&lt; V, M &gt; &amp;</type>
      <name>m_srcDensity</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a80cd4ecb6f5dc0e1f61d0317ef07a616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_exponent</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a867f4a159b1bf2419ef049507306ce79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SampledScalarCdf</name>
    <filename>a00191.html</filename>
    <templarg>T</templarg>
    <base>QUESO::BaseScalarCdf</base>
    <member kind="function">
      <type></type>
      <name>SampledScalarCdf</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aa1b09a58b4afb1b8c1c822dd4575faad</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const BaseOneDGrid&lt; T &gt; &amp;cdfGrid, const std::vector&lt; double &gt; &amp;cdfValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SampledScalarCdf</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae2b5a724fcecef81ef74f8d52b021fcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a3eb93ff8c14d2b66bf692033a2a3b8b6</anchor>
      <arglist>(T paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inverse</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a685b0c343b3ab320680c132c836fb1da</anchor>
      <arglist>(double cdfValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ab1d99d5dcc9dc79b50501caf80154c39</anchor>
      <arglist>(T &amp;minHorizontal, T &amp;maxHorizontal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a1ae05088dd70e2432a52577ba6dca468</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af597534e752c2974448d7fd071266c59</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseScalarCdf</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a4604dee9fe730564c52d8d925bc69b94</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseScalarCdf</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa7bd0ba0d3719853cc24a2e12f126600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a70c89dd2ad294be170338a283fc58ff3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>prefix</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aafb3eaf3bf1d7269073e9c77bd8c766d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseOneDGrid&lt; T &gt; &amp;</type>
      <name>m_cdfGrid</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a58d6744bac9ce8d906839bf381517f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>m_cdfValues</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ab8cf649637f31cc75c9f676d5927c10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a3caa986ae1ccef96a28b0365fb88c86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a66c2a1bcf0ac517013e7857c3533a187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_minHorizontal</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ab54be9623cddb0671db458d05d63f0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>m_maxHorizontal</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a33beb9b7e610a4fe1458080593982d2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SampledVectorCdf</name>
    <filename>a00192.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorCdf</base>
    <member kind="function">
      <type></type>
      <name>SampledVectorCdf</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9ccd0e1af52f109a50cf9bc2f88370fb</anchor>
      <arglist>(const char *prefix, const ArrayOfOneDGrids&lt; V, M &gt; &amp;oneDGrids, const ArrayOfOneDTables&lt; V, M &gt; &amp;cdfValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SampledVectorCdf</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a5434d0c34434b0bdf073523aee4182be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1d908923cf5b441a4cebf7ac3c7fd2d8</anchor>
      <arglist>(const V &amp;paramValues, V &amp;cdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>const BaseScalarCdf&lt; double &gt; &amp;</type>
      <name>cdf</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a51ee2c218b4e36dfc0c02bd542205789</anchor>
      <arglist>(unsigned int rowId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a9d62ca801a3d52b18188ae93b476c847</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>acae1453895e364bf726ef60f8fde1bd8</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistArray&lt; SampledScalarCdf&lt; double &gt; * &gt;</type>
      <name>m_cdfs</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ab1bc899ffdea9ca7e635312f82ff169f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SampledVectorMdf</name>
    <filename>a00193.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorMdf</base>
    <member kind="function">
      <type></type>
      <name>SampledVectorMdf</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ad66c0648ca45526f0912634b2042cba9</anchor>
      <arglist>(const char *prefix, const ArrayOfOneDGrids&lt; V, M &gt; &amp;oneDGrids, const ArrayOfOneDTables&lt; V, M &gt; &amp;mdfValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SampledVectorMdf</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ab1d081a98ca1285a6fc3d29029c3632c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>values</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>af4b8d3c492d7cfb94ac82da8df8779e9</anchor>
      <arglist>(const V &amp;paramValues, V &amp;mdfVec) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>af4a617a8e579abb72bf9d91d7ddb17e0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ArrayOfOneDGrids&lt; V, M &gt; &amp;</type>
      <name>m_oneDGrids</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ace43cdea4553e95bec0fa1490962dd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ArrayOfOneDTables&lt; V, M &gt; &amp;</type>
      <name>m_mdfValues</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>acc6447be666d94453ca26e8b0b8aa9ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseScalarCdf</name>
    <filename>a00039.html</filename>
    <templarg>T</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a887af6d62eb04f2bf3b58c12e586f20b</anchor>
      <arglist>(T paramValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>inverse</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a3e1778c76a557716e74b5fc11604dd75</anchor>
      <arglist>(double cdfValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSupport</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a9684b285f88be8c2bafe4d2abd8a7447</anchor>
      <arglist>(T &amp;minHorizontal, T &amp;maxHorizontal) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a131a7c148188f3f70c2db44cc1a93bc8</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subWriteContents</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>abdd6c6f5f8f028a6ffd30168885b6338</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a474950d32c26caa1e88dbee2788cc1bf</anchor>
      <arglist>(std::ostream &amp;os, const BaseScalarCdf&lt; T &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseScalarCovarianceFunction</name>
    <filename>a00040.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a93a35146e106c7fb28913c604a918acb</anchor>
      <arglist>(const V &amp;domainVector1, const V &amp;domainVector2) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ScalarGaussianRandomField</name>
    <filename>a00195.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ScalarGaussianRandomField</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a97e289939e97f5280dd29cda787bbcbb</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;indexSet, const BaseScalarFunction&lt; V, M &gt; &amp;meanFunction, const BaseScalarCovarianceFunction&lt; V, M &gt; &amp;covarianceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarGaussianRandomField</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ad0ae533f9f30c4d38ea9244accb91838</anchor>
      <arglist>(const ScalarGaussianRandomField &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScalarGaussianRandomField</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a913f644a4ba78c2d4f538802c743a20e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarGaussianRandomField &amp;</type>
      <name>operator=</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aebc3cec0fcb380ef912332a2eec8724c</anchor>
      <arglist>(const ScalarGaussianRandomField &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>indexSet</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ac4edd4b4742e09be69e8f0aab3ecb6c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseScalarFunction&lt; V, M &gt; &amp;</type>
      <name>meanFunction</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ac2421f1e67dc7a0052cdebfaf464421e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseScalarCovarianceFunction&lt; V, M &gt; &amp;</type>
      <name>covarianceFunction</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a3b8e2cce1f6fff8383de2325dc2981b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFunction</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aea3e501fbf8ece28702666138f0eb8e0</anchor>
      <arglist>(const std::vector&lt; V * &gt; &amp;fieldPositions, V &amp;sampleValues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a40ea0ed2c0011577bd17a7bcfaa9dfa6</anchor>
      <arglist>(const ScalarGaussianRandomField &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>af1f041e02404457420e5b32dee70edc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a92b889ad0b3f05650afc60b3808af1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; V, M &gt; &amp;</type>
      <name>m_indexSet</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ada3f607cbe463fd3f735e33acca3f132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseScalarFunction&lt; V, M &gt; &amp;</type>
      <name>m_meanFunction</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a89e14e481690ccfa5536352018c7641f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseScalarCovarianceFunction&lt; V, M &gt; &amp;</type>
      <name>m_covarianceFunction</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a7db273a4030d7bede05d9d4ef0efd043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; V * &gt;</type>
      <name>m_savedPositions</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a5993884088927e1eb818cb8d473c5be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorSpace&lt; V, M &gt; *</type>
      <name>m_savedRvImageSpace</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aaffc22808e1c4a88073a171d781412a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_savedRvLawExpVector</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a0a59f8828711e204296d1cfb0ad6260a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>M *</type>
      <name>m_savedRvLawCovMatrix</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>aca6f26fffd99c7d8fee7a8300e623dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianVectorRV&lt; V, M &gt; *</type>
      <name>m_savedRv</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ab8ca399444079041b75eb0986fe0fc80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ScaledCovMatrixTKGroup</name>
    <filename>a00198.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseTKGroup</base>
    <member kind="function">
      <type></type>
      <name>ScaledCovMatrixTKGroup</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a7d4bfeea785ba13d1a879e209c584a0f</anchor>
      <arglist>(const char *prefix, const VectorSpace&lt; V, M &gt; &amp;vectorSpace, const std::vector&lt; double &gt; &amp;scales, const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScaledCovMatrixTKGroup</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a74b0b38be315e970803b3fc65fa4e1e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>symmetric</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a3189c3503bf9eb4229ec707594d75516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a55db329f3c0f9c44dde607e263722a2d</anchor>
      <arglist>(unsigned int stageId) const </arglist>
    </member>
    <member kind="function">
      <type>const GaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a753ada276637a3c32ea77b833dda7979</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;stageIds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>adf9e4926c98f845c9f6c6b2ad2ddee25</anchor>
      <arglist>(const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPreComputingPosition</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a4e6325c0cd92d555f32aef52ae4755e3</anchor>
      <arglist>(const V &amp;position, unsigned int stageId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPreComputingPositions</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ae03597da61742f43997b8fffb7656b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ac1116a3f10d1456c9b796d2756258e55</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setRVsWithZeroMean</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>ad61780456238817267b4f70cddffa24f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>m_originalCovMatrix</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>a57274707373f001d91695e4120cc1743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SequentialVectorRealizer</name>
    <filename>a00200.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>SequentialVectorRealizer</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a8a39a19e20c9f2e2521750b2c12f0ede</anchor>
      <arglist>(const char *prefix, const BaseVectorSequence&lt; V, M &gt; &amp;chain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequentialVectorRealizer</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a8e982c9719fb7998601d79d76fea9d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedSampleExpVector</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>ac7c24dd2a5663d245ba1e37556a68bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const V &amp;</type>
      <name>unifiedSampleVarVector</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a79981fe171d8596d55172f5fa600ee29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a67050d12ad38147f9f0743a0e53011b2</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorSequence&lt; V, M &gt; &amp;</type>
      <name>m_chain</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a4072619c7ef9d9f196bb0d70ec9e8479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_currentChainPos</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aee9ff35b276862ab8aefd7f2dbe6d232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedSampleExpVector</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a9419977e751efa173663218427d5f4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_unifiedSampleVarVector</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a8c4b1311f473131c0ab55f02096b252b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StatisticalForwardProblem</name>
    <filename>a00208.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>StatisticalForwardProblem</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ab2aba79cca8d9fde437fa2bc7d196adc</anchor>
      <arglist>(const char *prefix, const SfpOptionsValues *alternativeOptionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;paramRv, const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;qoiFunction, GenericVectorRV&lt; Q_V, Q_M &gt; &amp;qoiRv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StatisticalForwardProblem</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>add0e52e8c9a8f80cc0d4e401a3e958e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeSolutionFlag</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a2c67e3878a0bddf2bf28db9f04962456</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveWithMonteCarlo</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a523a6e2ac16dd949849bb7b46d98b842</anchor>
      <arglist>(const McOptionsValues *alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type>const GenericVectorRV&lt; Q_V, Q_M &gt; &amp;</type>
      <name>qoiRv</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ae2aa8a443bec68b57342c3afc079356d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorSequence&lt; Q_V, Q_M &gt; &amp;</type>
      <name>getParamChain</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>abedc9de0cb7724c9ae37f447a5da4dec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>commonConstructor</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>af39a259d0c779d3e9bf33fbf0ef013c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ab8dc530366735e9ca11290e37f95996a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_paramRv</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ab4933700b21362717461ce7da3c8a0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_qoiFunction</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>af267c75bf676bb857db1ff45fe5e4484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_qoiRv</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>aa9ce415e5be95e04d6eea53c48fdea2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorSequence&lt; Q_V, Q_M &gt; *</type>
      <name>m_paramChain</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>add86e10f5d013e532d2687b0ed58dc0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorSequence&lt; Q_V, Q_M &gt; *</type>
      <name>m_qoiChain</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a0c7b7ce063c82ed96ea0a75d119a677a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MonteCarloSG&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_mcSeqGenerator</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a18f3f73759fbc2e64486b11c13b3fbf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorRealizer&lt; Q_V, Q_M &gt; *</type>
      <name>m_solutionRealizer</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a0b855f085c84bd113827951f3c424d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseJointPdf&lt; Q_V, Q_M &gt; *</type>
      <name>m_solutionPdf</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a67810b9d77e549b7eee76cc008e21e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SfpOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a197386aba56d1a91788ebc4385e2e32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_userDidNotProvideOptions</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>aa8273af808ea63a49f325823a4b612f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a023244862152f4398c4544e9239fe32a</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>aee8ed5dc90b8ecfd9536e60b393376ee</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SfpOptionsValues</name>
    <filename>a00201.html</filename>
    <member kind="function">
      <type></type>
      <name>SfpOptionsValues</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a4d22c8810ddcb0cbcadf2d1ebef94017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SfpOptionsValues</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ac13eca43b00109daf7ff46779473a9ff</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SfpOptionsValues</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a00a1957ae1fc524b93d7ec0f5625ca66</anchor>
      <arglist>(const SfpOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SfpOptionsValues</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>adaf1b4661c41fc88ff406eb252414ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SfpOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>add6fb5c02575aa3828f727835d84da6a</anchor>
      <arglist>(const SfpOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a3fde286c6cb94de87e3f355c6ccfc14d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a36488291e1bbd35962275235b97c9f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_computeSolution</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a087c7e28e7c72ee99d5722f75e43c8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_computeCovariances</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>abe755434941b852aaf5bd512c153354b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_computeCorrelations</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a4de46169004d9ccbe66fdf32ae93ea45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ad6028c5dff00b18d5085045c3a6d135e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a51d0f0da7a29dfb12340d863e2f980a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ad3e0b2e03abf1e2ca7b767fef7512af7</anchor>
      <arglist>(const SfpOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a986740d60e4420cd0082844803e88175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ad3acfd6e65cf7d56166bf4fa43fd2b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>aab15910fa73a118f62642b48c5818903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeSolution</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>afa88f85cedb4a1c2281584a9cd65d2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeCovariances</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>aa64e1c6b66f07736bdb196040b82ce6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeCorrelations</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a5531e8ccab68c5f9ae56eb4dd851cb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>af6d8c5c08fb4484278003bbe50e67e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a8737086040db939242a813818e8898af</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a9c3733892d16aeed05f6c08f4597a5b7</anchor>
      <arglist>(std::ostream &amp;os, const SfpOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StatisticalForwardProblemOptions</name>
    <filename>a00209.html</filename>
    <member kind="function">
      <type></type>
      <name>StatisticalForwardProblemOptions</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a1c538c09b3c85e59a805fdf1613d7106</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatisticalForwardProblemOptions</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a85e048ec9fe9332879a2fafb5735a8ba</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const SfpOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StatisticalForwardProblemOptions</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a77e78ff0d42128d04db946aa3d002b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a79677f13d8f76171e0e9482920d1e07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a09fead4b82b68d38aaab1072eaacf3e3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>SfpOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a87ad4acd32801ea3edd5e65ffb093dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>adc3ea162cb9889b19128686aa657ab30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa4c890f8363390f9678b98520db3f14b</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a02ded4f2bf1d5bfaf2b2f4752f8da751</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a14f437399d668fac2aac5861bd6f39ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>abfbec7d0ac4d5bd3ee19d5b54cde5cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a6a48a27ad2c386feb7807e0623573fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeSolution</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5e7c8a8383bb80a98ab4c271748e0d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeCovariances</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad3f809f0695c126956afd86e07f77bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeCorrelations</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad712823b5b7b3ce5c76a793a531f0f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad4f884177efb0d4ab7068dfe00861f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a8f7d13eaec063727f412add0a1a4d9af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StatisticalInverseProblem</name>
    <filename>a00210.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <member kind="function">
      <type></type>
      <name>StatisticalInverseProblem</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a98ad98a7030b2c6577a0e840506bf74d</anchor>
      <arglist>(const char *prefix, const SipOptionsValues *alternativeOptionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;priorRv, const BaseScalarFunction&lt; P_V, P_M &gt; &amp;likelihoodFunction, GenericVectorRV&lt; P_V, P_M &gt; &amp;postRv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatisticalInverseProblem</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>afd7122e1cecbbcd6f720a57e7088ea08</anchor>
      <arglist>(const char *prefix, const SipOptionsValues *alternativeOptionsValues, const GPMSAFactory&lt; P_V, P_M &gt; &amp;gpmsaFactory, GenericVectorRV&lt; P_V, P_M &gt; &amp;postRv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StatisticalInverseProblem</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a9e63552ba21e18dd6a4748df101decd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeSolutionFlag</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a8af5f8ed1db58cf2625bcf459d249167</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveWithBayesMetropolisHastings</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a924189e647110129682308b9bffc3a0d</anchor>
      <arglist>(const MhOptionsValues *alternativeOptionsValues, const P_V &amp;initialValues, const P_M *initialProposalCovMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seedWithMAPEstimator</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>af340c3f695e0decff4288b2cef0177a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveWithBayesMLSampling</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a72a2bfd14054b4c8de14fb86da240ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MetropolisHastingsSG&lt; P_V, P_M &gt; &amp;</type>
      <name>sequenceGenerator</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a9c81cf9bfc4806de6a597c3c66f84d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>priorRv</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a954df0672a7c1271eaff53b8d5f3fbc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GenericVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>postRv</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a69360a2f2ec5f33b33c5b5f61ec15344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorSequence&lt; P_V, P_M &gt; &amp;</type>
      <name>chain</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ab30056932de294fd8caea93a3cb29a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarSequence&lt; double &gt; &amp;</type>
      <name>logLikelihoodValues</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ac1e61aa350ea19bfb7c2b146ab0b6622</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScalarSequence&lt; double &gt; &amp;</type>
      <name>logTargetValues</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4ab809a92d4e7ec102a096eaee1d8912</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logEvidence</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a5b7801a55f4026c8a06558f19275f596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanLogLikelihood</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a1d97b50dca7034acfef4df209b94838c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eig</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a039958964641a79de68845ae3a00c218</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ac24b3395274db9fad21b13abd2d070d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_priorRv</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aebe8ce8eb6fa5f264cafffbe35fbead0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; P_V, P_M &gt; &amp;</type>
      <name>m_likelihoodFunction</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a27177c077988c85c3310e0491f899332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; P_V, P_M &gt; &amp;</type>
      <name>m_postRv</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a7dc62223cad355422449841ff3ec68e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>VectorSet&lt; P_V, P_M &gt; *</type>
      <name>m_solutionDomain</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a51eeabd608af36b009d67b2a5244db9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseJointPdf&lt; P_V, P_M &gt; *</type>
      <name>m_solutionPdf</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a6ea67d31e6651f1dd4aa6983d4a01865</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorMdf&lt; P_V, P_M &gt; *</type>
      <name>m_subSolutionMdf</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4e4808280b09aa4ae0584521b78230ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorCdf&lt; P_V, P_M &gt; *</type>
      <name>m_subSolutionCdf</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4cb3684669aa87b1d4a6903b55978969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorRealizer&lt; P_V, P_M &gt; *</type>
      <name>m_solutionRealizer</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4ac9fdff2472ae289fcf1413d210e38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MetropolisHastingsSG&lt; P_V, P_M &gt; *</type>
      <name>m_mhSeqGenerator</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>af66c3780c9b23fc917dca0ea6dc12103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MLSampling&lt; P_V, P_M &gt; *</type>
      <name>m_mlSampler</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a8410eadca0a84c3ee1ad2e934a2c6d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BaseVectorSequence&lt; P_V, P_M &gt; *</type>
      <name>m_chain</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a5f6b98058067d21fb16981844e32910d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScalarSequence&lt; double &gt; *</type>
      <name>m_logLikelihoodValues</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a7138a1175f641633f69ab90617fc5f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ScalarSequence&lt; double &gt; *</type>
      <name>m_logTargetValues</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aa84ebc22eac5f609d5e269a9ed25c6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SipOptionsValues *</type>
      <name>m_optionsObj</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a7120bde6e357d8ac2847884e266175d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_seedWithMAPEstimator</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ad3347c53f52837f3eb455c8df8584cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_userDidNotProvideOptions</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>aed402d20fd80e8e8b09b7d24bb5467b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a1f5e10175b41d273d86e54c61cf44839</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a4354becd88247e1704b4f9b07faf9e55</anchor>
      <arglist>(std::ostream &amp;os, const StatisticalInverseProblem&lt; P_V, P_M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SipOptionsValues</name>
    <filename>a00205.html</filename>
    <member kind="function">
      <type></type>
      <name>SipOptionsValues</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae1758de20f5e2c05447e821b12c91139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SipOptionsValues</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a9a769cdaf937bffa0b34b675663f12d3</anchor>
      <arglist>(const BaseEnvironment *env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SipOptionsValues</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ade0d13814c57e5121b803ce06d3584b5</anchor>
      <arglist>(const SipOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SipOptionsValues</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aff12acaaae65cba11020522126e0fd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SipOptionsValues &amp;</type>
      <name>operator=</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>abb893847a1358ffe904c47ed16cb4178</anchor>
      <arglist>(const SipOptionsValues &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab00a1ccce6f3b0eda0043cb6f251e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_help</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a9f8fda3d5caac9538d0d90b7f9de2fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_computeSolution</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3ad6bcf891e7d938cc41ac47af698ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_dataOutputFileName</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a5b68edcbfca8473657ee8d58cfc16fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; unsigned int &gt;</type>
      <name>m_dataOutputAllowedSet</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>abda641263b3f677da5078fb3ea3f7102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_seedWithMAPEstimator</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aa3a8627a55ea53dc230127772cdd749e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_useOptimizerMonitor</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a750715f526a64df67ea325f4570f5429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a82009a049ab5e41592e33646bcf5c857</anchor>
      <arglist>(const SipOptionsValues &amp;src)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>checkOptions</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a8f65c43ee4ed38c2147e194771574781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BoostInputOptionsParser *</type>
      <name>m_parser</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3d2ee84da110a8f0c75f8efd25c78f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aa6df78f78bd115e2ddd379f04d0214ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeSolution</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a9b0e6931c08637d45b483377401ad3f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a4f717e9b9efb1416155332b8e5d2e0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af32f09e2a86d9e7fc905557a63cb49a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_seedWithMAPEstimator</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a53354bb733e8f3ae4205b682bd9a1f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_useOptimizerMonitor</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0ae4445bb180b7525a6f0bcbc1e8c2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a79092e087e37c85a9a6291bfeea37408</anchor>
      <arglist>(std::ostream &amp;os, const SipOptionsValues &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StatisticalInverseProblemOptions</name>
    <filename>a00211.html</filename>
    <member kind="function">
      <type></type>
      <name>StatisticalInverseProblemOptions</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ae6f5401589bdfa56f0d3671305600301</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatisticalInverseProblemOptions</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a1338bf7f41712f3475195931f124127b</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const SipOptionsValues &amp;alternativeOptionsValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StatisticalInverseProblemOptions</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a278d6b4e25dadb6346160f70b6c3bdff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanOptionsValues</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a3ed629e5e6eb8d5e9b005c6c6810da91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a5e06fc25408a43aad1240dada3f13a4e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>SipOptionsValues</type>
      <name>m_ov</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a3f432ce80a98a70c33376bf9a1c4b36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ad58cf6e7350173ebea80576184a97e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>defineMyOptions</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a8c0db9540855c9b0771f972058786b79</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>getMyOptionValues</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a5dfd558339d531e94595064223263919</anchor>
      <arglist>(boost::program_options::options_description &amp;optionsDesc)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>afce40a7fed3b00fc8cabad7ff81ef35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::program_options::options_description *</type>
      <name>m_optionsDesc</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a173e2817f6a1ad822fccdc8dbc1a8011</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_help</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a6442fa5141155733851550abf54fb727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_computeSolution</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ab6eeb26f8464cd104a9352774027aa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputFileName</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>af1d009496381139b51679b891fc052f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_dataOutputAllowedSet</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ac88a78b03e97a655819b039ed6068bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_seedWithMAPEstimator</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a7006cdbd2303e863f6acf914f7262c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_option_useOptimizerMonitor</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>ae1ea7627e13ec1d599c51a522844cfc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::StdScalarCdf</name>
    <filename>a00213.html</filename>
    <templarg></templarg>
    <base>QUESO::BaseScalarCdf</base>
    <member kind="function">
      <type></type>
      <name>StdScalarCdf</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a23bae93733ff0dc82fc51754044e7c17</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const std::vector&lt; T &gt; &amp;cdfGrid, const std::vector&lt; double &gt; &amp;cdfValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StdScalarCdf</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a24cf6c93886182c8e46e108aa65e7f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a03b075f858fa2a5d35515cf602283985</anchor>
      <arglist>(T paramValue) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inverse</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a0b989e6ac45b22f22951389ae4c41861</anchor>
      <arglist>(double cdfValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ad754f420fbfaa309d6574a0c2674f06e</anchor>
      <arglist>(T &amp;minHorizontal, T &amp;maxHorizontal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>af31f2d7dfa14a23987d1d71b36d2d221</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subWriteContents</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a9c4edf99c3d0bbd5a011b5e03c5a1bcc</anchor>
      <arglist>(const std::string &amp;varNamePrefix, const std::string &amp;fileName, const std::string &amp;fileType, const std::set&lt; unsigned int &gt; &amp;allowedSubEnvIds) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StdOneDGrid&lt; T &gt;</type>
      <name>m_cdfGrid</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a6d92d555e9042f0c203b59f3b272f878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; double &gt;</type>
      <name>m_cdfValues</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ac04a45e22e2500a5ef8911e2c034364f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SampledScalarCdf&lt; T &gt; *</type>
      <name>m_sampledCdfGrid</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a2da9aa62766843734025cc059f817258</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseTKGroup</name>
    <filename>a00042.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>symmetric</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad0130349060d50b985c83b6bb1abc58e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const BaseVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>accf41e1baaa3709afacf1af8f66dd021</anchor>
      <arglist>(unsigned int stageId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const BaseVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa07cabead2c6dbc195fdcbd2e7cad361</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;stageIds)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setPreComputingPosition</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>acd1efb5b2ae3eb4f1130fa37201545d8</anchor>
      <arglist>(const V &amp;position, unsigned int stageId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearPreComputingPositions</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>adb4decb4e8f01dce2ae4d5a3333c74f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ad6f7aa1ed1f75476b46333847e5086ba</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::TransformedScaledCovMatrixTKGroup</name>
    <filename>a00217.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseTKGroup</base>
    <member kind="function">
      <type>void</type>
      <name>transformToGaussianSpace</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a8b6d5160097ac03318022cdacaaa9468</anchor>
      <arglist>(const V &amp;physicalPoint, V &amp;transformedPoint) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformedScaledCovMatrixTKGroup</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a006be4f7f33ed5cdc9b63600f9a918e1</anchor>
      <arglist>(const char *prefix, const BoxSubset&lt; V, M &gt; &amp;boxSubset, const std::vector&lt; double &gt; &amp;scales, const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransformedScaledCovMatrixTKGroup</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a565e4b569b84e3a6034c453ac0f07408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>symmetric</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a3be34577600a75229d9efbd156673d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InvLogitGaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a26844f7b2470fbd46fa3b1c1907acf41</anchor>
      <arglist>(unsigned int stageId) const </arglist>
    </member>
    <member kind="function">
      <type>const InvLogitGaussianVectorRV&lt; V, M &gt; &amp;</type>
      <name>rv</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa9428d42f1db9147c06572e3a73825e1</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;stageIds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLawCovMatrix</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a70a7b7ccec7af14bb42a3f48cf59a92a</anchor>
      <arglist>(const M &amp;covMatrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPreComputingPosition</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a0e7dd569afbe0bef9d07b0195be79d9d</anchor>
      <arglist>(const V &amp;position, unsigned int stageId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPreComputingPositions</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a63701e5bc18eea761c4d991a0c803beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ae593f9ab8fa5f24dcf71f38ab74d9000</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setRVsWithZeroMean</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a9c83bde628e6c46cbb6d95eb97e0bd88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>m_boxSubset</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aecf0523f914747a70b1fc11f96652bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>M</type>
      <name>m_originalCovMatrix</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a40e45a9c395d4fc25b2210945c1ad588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::UniformJointPdf</name>
    <filename>a00221.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>UniformJointPdf</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a2322d8b9485f1d5fad00083fa5ef46a2</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UniformJointPdf</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a8061747b487d8686414b614e7bdc0369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a358ffa410284ed3e40435439c1c8bbc3</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a80858abd7ca07ed42b9e9f0e4c92b3d2</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a7104edeec3bc1a45f4c8a805cdfde170</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::UniformVectorRealizer</name>
    <filename>a00224.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>UniformVectorRealizer</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a68012df178de00ac40163033fa42c4b3</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UniformVectorRealizer</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a39faaea0c942308fedee9cc672ad0a75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a59c9c5c848823a4c6b0992adc4f772e2</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::UniformVectorRV</name>
    <filename>a00225.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>UniformVectorRV</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a088f61731c268c102b4a21c503cc9844</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UniformVectorRV</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a8ff6273a758739c706e8ffbaf8ca4b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>ab6dee885e568635b7b7e9675b4e66833</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::ValidationCycle</name>
    <filename>a00226.html</filename>
    <templarg>P_V</templarg>
    <templarg>P_M</templarg>
    <templarg>Q_V</templarg>
    <templarg>Q_M</templarg>
    <member kind="function">
      <type></type>
      <name>ValidationCycle</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>abd2447f8ec9a109f2c97b8aa73279cc3</anchor>
      <arglist>(const BaseEnvironment &amp;env, const char *prefix, const VectorSpace&lt; P_V, P_M &gt; &amp;paramSpace, const VectorSpace&lt; P_V, P_M &gt; &amp;qoiSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValidationCycle</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac5ba69713d7c3090eb34a431b8238209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BaseEnvironment &amp;</type>
      <name>env</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a64215b434e018a2ef2f4049aa48ecc17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instantiateCalIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>af13cd3bac365d8a5b0338ba662741c5e</anchor>
      <arglist>(SipOptionsValues *optionsValues, const BaseVectorRV&lt; P_V, P_M &gt; &amp;priorRv, const BaseScalarFunction&lt; P_V, P_M &gt; &amp;likelihoodFunctionObj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instantiateCalFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a2ae0650115037337b454a85ae2a0990f</anchor>
      <arglist>(SfpOptionsValues *optionsValues, void(*qoiRoutinePtr)(const P_V &amp;domainVector, const P_V *domainDirection, const void *functionDataPtr, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects), const void *qoiRoutineDataPtr)</arglist>
    </member>
    <member kind="function">
      <type>const StatisticalInverseProblem&lt; P_V, P_M &gt; &amp;</type>
      <name>calIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5a6cbe4851f3657e52a7302d82022233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StatisticalInverseProblem&lt; P_V, P_M &gt; &amp;</type>
      <name>calIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a4ac209596278774d5f12e6d806a87d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>calFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab3ee54cdc9d1d6f726414f4fd2142c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>calFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad8214c581b3e0879cae7d0643af99f69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instantiateValIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ada0d69cdc89fe50d5b6cbefb37d3867b</anchor>
      <arglist>(SipOptionsValues *optionsValues, const BaseScalarFunction&lt; P_V, P_M &gt; &amp;likelihoodFunctionObj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instantiateValFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>acd62b7e91aa2c0dffeb26a8e34fea5fb</anchor>
      <arglist>(SfpOptionsValues *optionsValues, void(*qoiRoutinePtr)(const P_V &amp;domainVector, const P_V *domainDirection, const void *functionDataPtr, Q_V &amp;imageVector, DistArray&lt; P_V * &gt; *gradVectors, DistArray&lt; P_M * &gt; *hessianMatrices, DistArray&lt; P_V * &gt; *hessianEffects), const void *qoiRoutineDataPtr)</arglist>
    </member>
    <member kind="function">
      <type>const StatisticalInverseProblem&lt; P_V, P_M &gt; &amp;</type>
      <name>valIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a726e07f03e40bbafcd4dd759d2365750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StatisticalInverseProblem&lt; P_V, P_M &gt; &amp;</type>
      <name>valIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>accd1d098732581bcf919dd78f347da55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>valFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>aea0022cb79bbbc30a7694d50723c746a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>valFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a0bcde7f4a5860ca2dc410575c766bbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a38a308718da67cac37c1290d86b93bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>adcc61017a11c99f3a6189ddbf7bc76fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; P_V, P_M &gt; &amp;</type>
      <name>m_paramSpace</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a641d2e59aed41a93a787c71ec30b6e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const VectorSpace&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_qoiSpace</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>adccd6175c04258a6f603a92a7ae4327c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseVectorRV&lt; P_V, P_M &gt; *</type>
      <name>m_calPriorRv</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a9f8c93eb68908f51b728af2fffbfb4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; P_V, P_M &gt; *</type>
      <name>m_calLikelihoodFunctionObj</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a764d9a79a615317b0749ee69c2234d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; P_V, P_M &gt; *</type>
      <name>m_calPostRv</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a535b6447a44ac7191e12e887d1710ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StatisticalInverseProblem&lt; P_V, P_M &gt; *</type>
      <name>m_calIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>afa19cacc32a262840f2108ed405f0521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_calQoiFunctionObj</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab891acfabc02b5e590deee6e05e30b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; Q_V, Q_M &gt; *</type>
      <name>m_calQoiRv</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac3bac139c827b3210e92d4bac190f89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_calFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab91bdb2d36652abb6275af640f2844bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BaseScalarFunction&lt; P_V, P_M &gt; *</type>
      <name>m_valLikelihoodFunctionObj</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a18afcde29c5ba9f4b7d9db9519166d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; P_V, P_M &gt; *</type>
      <name>m_valPostRv</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a196610836330a456a21c4f3b6ec56883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StatisticalInverseProblem&lt; P_V, P_M &gt; *</type>
      <name>m_valIP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ad65609930305ca35305bb7b42b1acfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_valQoiFunctionObj</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a35443093bebe1ddbab7fa7cb671be562</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GenericVectorRV&lt; Q_V, Q_M &gt; *</type>
      <name>m_valQoiRv</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a930f8140c5ba8655ea6ce926acc6ceef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>StatisticalForwardProblem&lt; P_V, P_M, Q_V, Q_M &gt; *</type>
      <name>m_valFP</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac1ba4bc21405b92f9bce23e8579e5c70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorCdf</name>
    <filename>a00043.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>values</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a30b15bde5a206071b4e4db26141ce179</anchor>
      <arglist>(const V &amp;paramValues, V &amp;cdfVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1ab6a49295542017bae6c5853398223f</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6da489fb178ea7354d91d756b06a0cfb</anchor>
      <arglist>(std::ostream &amp;os, const BaseVectorCdf&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::VectorGaussianRandomField</name>
    <filename>a00229.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VectorGaussianRandomField</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aeae7dcb40edbc2458f8692374de55a5f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; P_V, P_M &gt; &amp;indexSet, const VectorSet&lt; Q_V, Q_M &gt; &amp;imageSetPerIndex, const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;meanFunction, const BaseMatrixCovarianceFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;covarianceFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorGaussianRandomField</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>adb2728a7cb86783378103b82c4926eb5</anchor>
      <arglist>(const VectorGaussianRandomField &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VectorGaussianRandomField</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8f29ed36b35f7c2b15866c0bf1fd9c79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorGaussianRandomField &amp;</type>
      <name>operator=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a5c0963ff4c87895a69b941059b3f9afd</anchor>
      <arglist>(const VectorGaussianRandomField &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>indexSet</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a091d86faba76ed1bff60c8157a7743db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>meanFunction</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ad14336d5026583fcc31662d1790e8cf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BaseMatrixCovarianceFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>covarianceFunction</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a5c68f05266b73ad99cc52748b99febe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleFunction</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a1852122a765ec7d30511ff4b3f9b5550</anchor>
      <arglist>(const std::vector&lt; P_V * &gt; &amp;fieldPositions, Q_V &amp;sampleValues)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab31bc63bd2e2b50cb75c6b502a69578c</anchor>
      <arglist>(const VectorGaussianRandomField &amp;src)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseEnvironment &amp;</type>
      <name>m_env</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab4ad80cb336314fd0025abf0d37c5aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_prefix</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a1adeb7ad40609acaa8a5e47b19026e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; P_V, P_M &gt; &amp;</type>
      <name>m_indexSet</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a3b4453419ff7b6e593b2f6cc88830490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VectorSet&lt; Q_V, Q_M &gt; &amp;</type>
      <name>m_imageSetPerIndex</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a6e1a9a6a3512559e1579e3c8a266141f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseVectorFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_meanFunction</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a648031ddf7e3d5d4d0eb353edc52b4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseMatrixCovarianceFunction&lt; P_V, P_M, Q_V, Q_M &gt; &amp;</type>
      <name>m_covarianceFunction</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a67b1325646a7076207d768cfd796eb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; P_V * &gt;</type>
      <name>m_savedPositions</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa51f310fb54dd4807522a0e72be61acd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorSpace&lt; Q_V, Q_M &gt; *</type>
      <name>m_savedRvImageSpace</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8fba910fff533442361ad7bd93e5706b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Q_V *</type>
      <name>m_savedRvLawExpVector</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a544ce2c5ff0329b6fb7c625e71eb3576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Q_M *</type>
      <name>m_savedRvLawCovMatrix</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a0a07c1eec3d56ef764b13586a36921d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianVectorRV&lt; Q_V, Q_M &gt; *</type>
      <name>m_savedRv</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a7e2ed5d146f65c8c4ddbd1d4e496647d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorMdf</name>
    <filename>a00045.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>values</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8b7826a86f4034d8960ff92ebf79a32b</anchor>
      <arglist>(const V &amp;paramValues, V &amp;mdfVec) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8c656209554341cb90f16f867ad9cb37</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorRealizer</name>
    <filename>a00046.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>realization</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6845173dd79a80ae11c86cde26e55817</anchor>
      <arglist>(V &amp;nextValues) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::BaseVectorRV</name>
    <filename>a00047.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5296b918534e12e5b62ac7cb5d20a1e8</anchor>
      <arglist>(std::ostream &amp;os) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad423b34d9e9d8865ff0688e24b82f245</anchor>
      <arglist>(std::ostream &amp;os, const BaseVectorRV&lt; V, M &gt; &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::WignerJointPdf</name>
    <filename>a00235.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseJointPdf</base>
    <member kind="function">
      <type></type>
      <name>WignerJointPdf</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a02a442c6808674aa589a872be23608f0</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;domainSet, const V &amp;centerPos, double radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WignerJointPdf</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ad3f8b515620fe416cf9f4b9f0b83ccdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>actualValue</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a48482e1e5b953cd0753bf0c39486a81f</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lnValue</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a64afe5e7a7974fc91b4394e81ba4da55</anchor>
      <arglist>(const V &amp;domainVector, const V *domainDirection, V *gradVector, M *hessianMatrix, V *hessianEffect) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLogOfNormalizationFactor</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>adbe13f31b4bdfbf6eb9b7ad57f9e71f0</anchor>
      <arglist>(unsigned int numSamples, bool updateFactorInternally) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>V *</type>
      <name>m_centerPos</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>abca40c4e75cf4429fbbe8ef077282ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_radius</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a05e7841821be3fea3990e64f40af813d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::WignerVectorRealizer</name>
    <filename>a00236.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <base>QUESO::BaseVectorRealizer</base>
    <member kind="function">
      <type></type>
      <name>WignerVectorRealizer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a44b2d353c8c82a0968d07c18ea40b69f</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;unifiedImageSet, const V &amp;centerPos, double radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WignerVectorRealizer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a52de4d73111dd2831e7099c782220ed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realization</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>a0d72232eb5843e78fc3d02a510ceb966</anchor>
      <arglist>(V &amp;nextValues) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>V *</type>
      <name>m_centerPos</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>afe5a5ae0e04ca222b2d1c9b84a297896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>m_radius</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>af325e618f0f529af2a2f26649be101a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::WignerVectorRV</name>
    <filename>a00237.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::BaseVectorRV</base>
    <member kind="function">
      <type></type>
      <name>WignerVectorRV</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ac2167c95fba84b2a3b9eff451bc2f64e</anchor>
      <arglist>(const char *prefix, const VectorSet&lt; V, M &gt; &amp;imageSet, const V &amp;centerPos, double radius)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WignerVectorRV</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ae3c14eb7f4b940dc5312d004eea3c832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a6658542aa6a551c1b92de93558cb67fa</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateData</name>
    <filename>a00139.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateData</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a21701f37c66f20a34b9737ca9597bce0</anchor>
      <arglist>(const BoxSubset&lt; V, M &gt; &amp;domain, const std::vector&lt; unsigned int &gt; &amp;n_points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterpolationSurrogateData</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a1288c3f669ad7f986a6a58b641b0689c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>get_paramDomain</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a8c42798f990362f9aabdaad53030ccdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>get_n_points</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>aa131e0d33c63b666460c17628da198a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>get_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a6b67d4708ee4f7b336070ded21040fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>get_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a85f02e6ba0b4d152aa820e99ba0b7be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_value</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>af0af08dbf7e164feec96044ba4d8fcaa</anchor>
      <arglist>(unsigned int n) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>n_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a10f91d8b742ce0043fc7234211e68a55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>abbc532a95cf4c31b9b6844730d5eb6f8</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9902158fa031623279dbb1f8a29678ec</anchor>
      <arglist>(unsigned int n, double value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>dim</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a37ffa23a53ee1bd3421cea490338f967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x_min</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a7edffeac45d6efb9b0bed02f21bc00cc</anchor>
      <arglist>(unsigned int dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x_max</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a830f9e41a1b266a46e73bd544d9ef0c0</anchor>
      <arglist>(unsigned int dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>spacing</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a79de31ae1c7a13a1c0fa6e8ccc3bfdc1</anchor>
      <arglist>(unsigned int dim) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_x</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a24b14db4fa4eb1a6b47486554a130e7d</anchor>
      <arglist>(unsigned int dim, unsigned int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a95960919c0adf0953dfcc647e82c13cb</anchor>
      <arglist>(unsigned int root)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterpolationSurrogateData</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a58611c92684ffc4cdab38e49ff2efc87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>check_dim_consistency</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a619d249f00fec5fb88d53587b511c1ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9d11f99a8d5d93d2d43009fbd3b86f0e</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;n_points)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BoxSubset&lt; V, M &gt; &amp;</type>
      <name>m_domain</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a12ae16e2a85b4d099c1d34f781820c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>m_n_points</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a906b89eebfdfbb450eecee7ee973ad7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; double &gt;</type>
      <name>m_values</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a72eae554878b708747b7c24437f4d45f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateBase</name>
    <filename>a00137.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::SurrogateBase</base>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateBase</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a00d3b5021c4c2c4fa3ece226623c3ad2</anchor>
      <arglist>(const InterpolationSurrogateData&lt; V, M &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolationSurrogateBase</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aa993220c35f76b9cd76da35c64e9ee42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurrogateBase</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a008309a6a70a58c60c59ed35777ed9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurrogateBase</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>af342cf4a55221355d63d3f9227d29b08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a8891c061c8186f23f89318211ba81ecc</anchor>
      <arglist>(const V &amp;domainVector) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const InterpolationSurrogateData&lt; V, M &gt; &amp;</type>
      <name>m_data</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a849caf0fc4f3846233255047bc5f8525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterpolationSurrogateBase</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af26afb816b53f487ecc19dae05d91f2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateBuilder</name>
    <filename>a00138.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::SurrogateBuilderBase</base>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateBuilder</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a7cdc176f7bcf247dfbf1f278af3d921a</anchor>
      <arglist>(InterpolationSurrogateDataSet&lt; V, M &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolationSurrogateBuilder</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a18ed6580ad6b2a15e62975cea1d3bcb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_values</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a9ce7380eca8a969ecc0b3c174289f1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurrogateBuilderBase</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a75b56ddd3038edb261372712f6c2e4d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurrogateBuilderBase</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a9a5968559d053f22d0de6055a1db4b09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate_model</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a6d3c931b857e9a107ef525cfdf80488a</anchor>
      <arglist>(const V &amp;domainVector, std::vector&lt; double &gt; &amp;values)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>partition_work</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ad1c8316ab7393f37084e46d9b2bb996d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_work_bounds</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac400ac9693975c80c5202d9b3e412946</anchor>
      <arglist>(unsigned int &amp;n_begin, unsigned int &amp;n_end) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>sync_data</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a8dd554d15072172d5d3285d0427e5032</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;local_n, std::vector&lt; double &gt; &amp;local_values, InterpolationSurrogateData&lt; V, M &gt; &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_domain_vector</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a605a4f0d5a562fd49e316717ebec77db</anchor>
      <arglist>(unsigned int n, V &amp;domain_vector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute_strides</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>aa78ad4bb2a5eb01fbe5c8b9d0f8d9f61</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;strides) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const InterpolationSurrogateData&lt; V, M &gt; &amp;</type>
      <name>get_default_data</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a9f9cab2af1f537f4c4339b37677d87f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InterpolationSurrogateDataSet&lt; V, M &gt; &amp;</type>
      <name>m_data</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>afdbf8e81fda2ba9de3a4fbc74e067553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_njobs</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a2a58303d08d458d8e3673e9cd0d4d59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterpolationSurrogateBuilder</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a905d70c54696a69bbda2828b8d16c808</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateDataSet</name>
    <filename>a00140.html</filename>
    <templarg>V</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateDataSet</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a7d35bf67379e9b0afd13be28c30246fe</anchor>
      <arglist>(const BoxSubset&lt; V, M &gt; &amp;domain, const std::vector&lt; unsigned int &gt; &amp;n_points, unsigned int n_datasets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterpolationSurrogateDataSet</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aa0af094673e17a1aee7c1e5bd0e91be2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const InterpolationSurrogateData&lt; V, M &gt; &amp;</type>
      <name>get_dataset</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2887a9f215a3972c7f9340ce3df40e90</anchor>
      <arglist>(unsigned int s) const </arglist>
    </member>
    <member kind="function">
      <type>InterpolationSurrogateData&lt; V, M &gt; &amp;</type>
      <name>get_dataset</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a1f34694d81e68d2ce228f9773cf7ada1</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a2d9c452ebeea6b1b3cfcf5042c19dcd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>InterpolationSurrogateDataSet</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a71227219fcb0dca3198728cfecd906e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; InterpolationSurrogateData&lt; V, M &gt; * &gt;</type>
      <name>m_datasets</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a8af1851b14baab8cb2f30333cf907adc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateHelper</name>
    <filename>a00141.html</filename>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateHelper</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5923ced1c7483db181435511c0ccc43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InterpolationSurrogateHelper</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>ae24361fbce1f1746423efa60b2a7363d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>coordToGlobal</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a0249e2c31d66a94d7575e3bfaf2e5bef</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;coord_indices, const std::vector&lt; unsigned int &gt; &amp;n_points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>globalToCoord</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a80a0ec679c1ef8a72d6182e23e751213</anchor>
      <arglist>(unsigned int global, const std::vector&lt; unsigned int &gt; &amp;n_points, std::vector&lt; unsigned int &gt; &amp;coord_indices)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static unsigned int</type>
      <name>compute_npoints_factor</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a71e8a9e84b4875253b98da9f9e9d65f4</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;n_points, unsigned int term)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateIOASCII</name>
    <filename>a00142.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::InterpolationSurrogateIOBase</base>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateIOASCII</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a5a5ea5e40215b96e93eb3c93c7a812a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolationSurrogateIOASCII</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a075e3639c3475e43cbead0ce4c1a655e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a71a2c390a880bb92f26d8085ba5eed17</anchor>
      <arglist>(const std::string &amp;filename, const FullEnvironment &amp;env, const std::string &amp;vector_space_prefix, int reading_rank=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a21624e30df6f98f0edc500ff72218be0</anchor>
      <arglist>(const std::string &amp;filename, const InterpolationSurrogateData&lt; V, M &gt; &amp;data, int writing_rank=0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolationSurrogateIOBase</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa8ba6167ceff5740cf549116c4fd99d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolationSurrogateIOBase</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0a8d01a394dbc01960c3adb9cb2eca1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const InterpolationSurrogateData&lt; V, M &gt; &amp;</type>
      <name>data</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ad24e29bc8ef971a00d44b90c008208d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPtr&lt; VectorSpace&lt; V, M &gt; &gt;::Type</type>
      <name>m_vector_space</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a06531cf2abfd2d92e4eee8e9ca02c8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPtr&lt; BoxSubset&lt; V, M &gt; &gt;::Type</type>
      <name>m_domain</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab8b1c4d297f6d576ed2328af27d823d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>m_n_points</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ab1b0cad48d89815d90e5afbf9e1d7e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ScopedPtr&lt; InterpolationSurrogateData&lt; V, M &gt; &gt;::Type</type>
      <name>m_data</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a98797df0b43929552ec90387f213e13c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::InterpolationSurrogateIOBase</name>
    <filename>a00143.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>read</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aba9b0a877cef77bbea72c95ca81910cf</anchor>
      <arglist>(const std::string &amp;filename, const FullEnvironment &amp;env, const std::string &amp;vector_space_prefix, int reading_rank)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa633d5e710f2e07fdb5b8740bf8a9b6f</anchor>
      <arglist>(const std::string &amp;filename, const InterpolationSurrogateData&lt; V, M &gt; &amp;data, int writing_rank) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::LinearLagrangeInterpolationSurrogate</name>
    <filename>a00157.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>QUESO::InterpolationSurrogateBase</base>
    <member kind="function">
      <type></type>
      <name>LinearLagrangeInterpolationSurrogate</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a4f1152d104164db1be57ff8c098baa71</anchor>
      <arglist>(const InterpolationSurrogateData&lt; V, M &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearLagrangeInterpolationSurrogate</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ab328f3f7e68db75d4ff3fe393504d0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a0ee3f5a8590cc565003d930e1c6a2517</anchor>
      <arglist>(const V &amp;domainVector) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>n_coeffs</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>afebd6ba0f69d6963690b33ee6033b682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute_interval_indices</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aa36b692e66fbedcc8fb4af9498255b22</anchor>
      <arglist>(const V &amp;domainVector, std::vector&lt; unsigned int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute_interval_values</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aad6abf565d0996abfcb7b77b785cad40</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;indices, std::vector&lt; double &gt; &amp;x_min, std::vector&lt; double &gt; &amp;x_max, std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>eval_interpolant</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a9af6a0dc8344714bc920c465c800aec4</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x_min, const std::vector&lt; double &gt; &amp;x_max, const std::vector&lt; double &gt; &amp;values, const V &amp;domainVector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>coordsToSingle</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a9b6985deba9550f64fa0d81df0001dc2</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>singleToCoords</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a19a3a94363d5a7d03445da44bf0449a1</anchor>
      <arglist>(unsigned int global, std::vector&lt; unsigned int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>tensor_product_lagrange</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ab63b8990c31b42d3e3c1cb03e39d6bb7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;x_min, const std::vector&lt; double &gt; &amp;x_max, const std::vector&lt; unsigned int &gt; &amp;indices, const V &amp;domainVector) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>lagrange_poly</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a04e316834a5e021d1231a20881849e10</anchor>
      <arglist>(double x0, double x1, double x, unsigned int index) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LinearLagrangeInterpolationSurrogate</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a25d9db9f926eeebdd20dc375185d87f8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QUESO::SurrogateBase</name>
    <filename>a00215.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>QUESO::SurrogateBuilderBase</name>
    <filename>a00216.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/include/ANN</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/include/ANN/</path>
    <filename>dir_7eeef1a65f7934a07ee77af6d49f4197.html</filename>
    <file>ANN.h</file>
    <file>ANNperf.h</file>
    <file>ANNx.h</file>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/</path>
    <filename>dir_67b7d72f59e2a5482e20d8653f81e008.html</filename>
    <dir>src/contrib/ANN/ann2fig</dir>
    <dir>src/contrib/ANN/include</dir>
    <dir>src/contrib/ANN/sample</dir>
    <dir>src/contrib/ANN/src</dir>
    <dir>src/contrib/ANN/test</dir>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/ann2fig</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/ann2fig/</path>
    <filename>dir_80bee3e85cafda26308d3e0843290606.html</filename>
    <file>ann2fig.cpp</file>
  </compound>
  <compound kind="dir">
    <name>src/basic</name>
    <path>/scratch/damon/git/queso/src/basic/</path>
    <filename>dir_65433ce6240d5a25b49f68c6b447155d.html</filename>
    <dir>src/basic/inc</dir>
    <dir>src/basic/src</dir>
  </compound>
  <compound kind="dir">
    <name>build_v0.55.0</name>
    <path>/scratch/damon/git/queso/build_v0.55.0/</path>
    <filename>dir_2695a3a80a5067e1638af327bbd03a30.html</filename>
    <dir>build_v0.55.0/doxygen</dir>
  </compound>
  <compound kind="dir">
    <name>src/contrib</name>
    <path>/scratch/damon/git/queso/src/contrib/</path>
    <filename>dir_5ebf0f177932fe2ba181ddb3e6398119.html</filename>
    <dir>src/contrib/ANN</dir>
    <dir>src/contrib/inc</dir>
  </compound>
  <compound kind="dir">
    <name>src/core</name>
    <path>/scratch/damon/git/queso/src/core/</path>
    <filename>dir_6c3c03b0c6c61440556655ca6259a2f1.html</filename>
    <dir>src/core/inc</dir>
    <dir>src/core/src</dir>
  </compound>
  <compound kind="dir">
    <name>doxygen</name>
    <path>/scratch/damon/git/queso/doxygen/</path>
    <filename>dir_10383ab99c71dcfd929142bc0b9233d3.html</filename>
    <dir>doxygen/txt_common</dir>
    <file>queso.page</file>
  </compound>
  <compound kind="dir">
    <name>build_v0.55.0/doxygen</name>
    <path>/scratch/damon/git/queso/build_v0.55.0/doxygen/</path>
    <filename>dir_581d1b04960fc87be86e66872bba5751.html</filename>
    <dir>build_v0.55.0/doxygen/txt_common</dir>
  </compound>
  <compound kind="dir">
    <name>src/gp</name>
    <path>/scratch/damon/git/queso/src/gp/</path>
    <filename>dir_b4cf28f9c7017ae598e01d89fd5623b0.html</filename>
    <dir>src/gp/inc</dir>
    <dir>src/gp/src</dir>
  </compound>
  <compound kind="dir">
    <name>src/surrogates/inc</name>
    <path>/scratch/damon/git/queso/src/surrogates/inc/</path>
    <filename>dir_56669f7f1dd44b740c22dcae2fd7563a.html</filename>
    <file>InterpolationSurrogateBase.h</file>
    <file>InterpolationSurrogateBuilder.h</file>
    <file>InterpolationSurrogateData.h</file>
    <file>InterpolationSurrogateDataSet.h</file>
    <file>InterpolationSurrogateHelper.h</file>
    <file>InterpolationSurrogateIOASCII.h</file>
    <file>InterpolationSurrogateIOBase.h</file>
    <file>LinearLagrangeInterpolationSurrogate.h</file>
    <file>SurrogateBase.h</file>
    <file>SurrogateBuilderBase.h</file>
  </compound>
  <compound kind="dir">
    <name>src/stats/inc</name>
    <path>/scratch/damon/git/queso/src/stats/inc/</path>
    <filename>dir_0f21e708b746168b296493cf5f1407d8.html</filename>
    <file>BayesianJointPdf.h</file>
    <file>BetaJointPdf.h</file>
    <file>BetaVectorRealizer.h</file>
    <file>BetaVectorRV.h</file>
    <file>ConcatenatedJointPdf.h</file>
    <file>ConcatenatedVectorRealizer.h</file>
    <file>ConcatenatedVectorRV.h</file>
    <file>ExponentialMatrixCovarianceFunction.h</file>
    <file>ExponentialScalarCovarianceFunction.h</file>
    <file>FiniteDistribution.h</file>
    <file>GammaJointPdf.h</file>
    <file>GammaVectorRealizer.h</file>
    <file>GammaVectorRV.h</file>
    <file>GaussianJointPdf.h</file>
    <file>GaussianLikelihood.h</file>
    <file>GaussianLikelihoodBlockDiagonalCovariance.h</file>
    <file>GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients.h</file>
    <file>GaussianLikelihoodDiagonalCovariance.h</file>
    <file>GaussianLikelihoodFullCovariance.h</file>
    <file>GaussianLikelihoodFullCovarianceRandomCoefficient.h</file>
    <file>GaussianLikelihoodScalarCovariance.h</file>
    <file>GaussianVectorCdf.h</file>
    <file>GaussianVectorMdf.h</file>
    <file>GaussianVectorRealizer.h</file>
    <file>GaussianVectorRV.h</file>
    <file>GenericJointPdf.h</file>
    <file>GenericMatrixCovarianceFunction.h</file>
    <file>GenericScalarCovarianceFunction.h</file>
    <file>GenericVectorCdf.h</file>
    <file>GenericVectorMdf.h</file>
    <file>GenericVectorRealizer.h</file>
    <file>GenericVectorRV.h</file>
    <file>HessianCovMatricesTKGroup.h</file>
    <file>InfoTheory.h</file>
    <file>InverseGammaJointPdf.h</file>
    <file>InverseGammaVectorRealizer.h</file>
    <file>InverseGammaVectorRV.h</file>
    <file>InvLogitGaussianJointPdf.h</file>
    <file>InvLogitGaussianVectorRealizer.h</file>
    <file>InvLogitGaussianVectorRV.h</file>
    <file>JeffreysJointPdf.h</file>
    <file>JeffreysVectorRealizer.h</file>
    <file>JeffreysVectorRV.h</file>
    <file>JointPdf.h</file>
    <file>LogNormalJointPdf.h</file>
    <file>LogNormalVectorRealizer.h</file>
    <file>LogNormalVectorRV.h</file>
    <file>MarkovChainPositionData.h</file>
    <file>MatrixCovarianceFunction.h</file>
    <file>MetropolisHastingsSG.h</file>
    <file>MetropolisHastingsSGOptions.h</file>
    <file>MLSampling.h</file>
    <file>MLSamplingLevelOptions.h</file>
    <file>MLSamplingOptions.h</file>
    <file>ModelValidation.h</file>
    <file>MonteCarloSG.h</file>
    <file>MonteCarloSGOptions.h</file>
    <file>PoweredJointPdf.h</file>
    <file>SampledScalarCdf.h</file>
    <file>SampledVectorCdf.h</file>
    <file>SampledVectorMdf.h</file>
    <file>ScalarCdf.h</file>
    <file>ScalarCovarianceFunction.h</file>
    <file>ScalarGaussianRandomField.h</file>
    <file>ScaledCovMatrixTKGroup.h</file>
    <file>SequentialVectorRealizer.h</file>
    <file>StatisticalForwardProblem.h</file>
    <file>StatisticalForwardProblemOptions.h</file>
    <file>StatisticalInverseProblem.h</file>
    <file>StatisticalInverseProblemOptions.h</file>
    <file>StdScalarCdf.h</file>
    <file>TKGroup.h</file>
    <file>TransformedScaledCovMatrixTKGroup.h</file>
    <file>UniformJointPdf.h</file>
    <file>UniformVectorRealizer.h</file>
    <file>UniformVectorRV.h</file>
    <file>ValidationCycle.h</file>
    <file>VectorCdf.h</file>
    <file>VectorGaussianRandomField.h</file>
    <file>VectorMdf.h</file>
    <file>VectorRealizer.h</file>
    <file>VectorRV.h</file>
    <file>WignerJointPdf.h</file>
    <file>WignerVectorRealizer.h</file>
    <file>WignerVectorRV.h</file>
  </compound>
  <compound kind="dir">
    <name>src/misc/inc</name>
    <path>/scratch/damon/git/queso/src/misc/inc/</path>
    <filename>dir_b78c18289fd7719ff0daf45dba9bb4e6.html</filename>
    <file>1D1DFunction.h</file>
    <file>1DQuadrature.h</file>
    <file>2dArrayOfStuff.h</file>
    <file>ArrayOfOneDGrids.h</file>
    <file>ArrayOfOneDTables.h</file>
    <file>AsciiTable.h</file>
    <file>CovCond.h</file>
    <file>Fft.h</file>
    <file>Miscellaneous.h</file>
    <file>OneDGrid.h</file>
    <file>StdOneDGrid.h</file>
    <file>StreamUtilities.h</file>
    <file>UniformOneDGrid.h</file>
  </compound>
  <compound kind="dir">
    <name>src/gp/inc</name>
    <path>/scratch/damon/git/queso/src/gp/inc/</path>
    <filename>dir_ce64702489dbb32a8d0ac93a35e853be.html</filename>
    <file>ExperimentModel.h</file>
    <file>ExperimentModelOptions.h</file>
    <file>ExperimentStorage.h</file>
    <file>GcmExperimentInfo.h</file>
    <file>GcmJointInfo.h</file>
    <file>GcmJointTildeInfo.h</file>
    <file>GcmSimulationInfo.h</file>
    <file>GcmSimulationTildeInfo.h</file>
    <file>GcmTotalInfo.h</file>
    <file>GcmZInfo.h</file>
    <file>GcmZTildeInfo.h</file>
    <file>GPMSA.h</file>
    <file>GpmsaComputerModel.h</file>
    <file>GpmsaComputerModelOptions.h</file>
    <file>GPMSAOptions.h</file>
    <file>SimulationModel.h</file>
    <file>SimulationModelOptions.h</file>
    <file>SimulationStorage.h</file>
  </compound>
  <compound kind="dir">
    <name>src/core/inc</name>
    <path>/scratch/damon/git/queso/src/core/inc/</path>
    <filename>dir_8c6469bb17906efee6ca4d3fe37c75c7.html</filename>
    <file>asserts.h</file>
    <file>BaseInputOptionsParser.h</file>
    <file>BasicPdfsBase.h</file>
    <file>BasicPdfsBoost.h</file>
    <file>BasicPdfsGsl.h</file>
    <file>BoostInputOptionsParser.h</file>
    <file>Defines.h</file>
    <file>DistArray.h</file>
    <file>Environment.h</file>
    <file>EnvironmentOptions.h</file>
    <file>exceptions.h</file>
    <file>FunctionBase.h</file>
    <file>FunctionOperatorBuilder.h</file>
    <file>GslBlockMatrix.h</file>
    <file>GslMatrix.h</file>
    <file>GslOptimizer.h</file>
    <file>GslVector.h</file>
    <file>InfiniteDimensionalGaussian.h</file>
    <file>InfiniteDimensionalLikelihoodBase.h</file>
    <file>InfiniteDimensionalMCMCSampler.h</file>
    <file>InfiniteDimensionalMCMCSamplerOptions.h</file>
    <file>InfiniteDimensionalMeasureBase.h</file>
    <file>LibMeshFunction.h</file>
    <file>LibMeshNegativeLaplacianOperator.h</file>
    <file>LibMeshOperatorBase.h</file>
    <file>Map.h</file>
    <file>Matrix.h</file>
    <file>MpiComm.h</file>
    <file>OperatorBase.h</file>
    <file>Optimizer.h</file>
    <file>OptimizerMonitor.h</file>
    <file>RngBase.h</file>
    <file>RngBoost.h</file>
    <file>RngGsl.h</file>
    <file>ScopedPtr.h</file>
    <file>SharedPtr.h</file>
    <file>TeuchosMatrix.h</file>
    <file>TeuchosVector.h</file>
    <file>Vector.h</file>
  </compound>
  <compound kind="dir">
    <name>src/contrib/inc</name>
    <path>/scratch/damon/git/queso/src/contrib/inc/</path>
    <filename>dir_f114e188e5106d33d1b25383e3394a44.html</filename>
    <file>all.h</file>
  </compound>
  <compound kind="dir">
    <name>src/basic/inc</name>
    <path>/scratch/damon/git/queso/src/basic/inc/</path>
    <filename>dir_fb02fc46cfd827d8da56a29f890e88e7.html</filename>
    <file>ArrayOfSequences.h</file>
    <file>BoxSubset.h</file>
    <file>ConcatenationSubset.h</file>
    <file>ConstantScalarFunction.h</file>
    <file>ConstantVectorFunction.h</file>
    <file>DiscreteSubset.h</file>
    <file>GenericScalarFunction.h</file>
    <file>GenericVectorFunction.h</file>
    <file>InstantiateIntersection.h</file>
    <file>IntersectionSubset.h</file>
    <file>ScalarFunction.h</file>
    <file>ScalarFunctionSynchronizer.h</file>
    <file>ScalarSequence.h</file>
    <file>SequenceOfVectors.h</file>
    <file>SequenceStatisticalOptions.h</file>
    <file>VectorFunction.h</file>
    <file>VectorFunctionSynchronizer.h</file>
    <file>VectorSequence.h</file>
    <file>VectorSet.h</file>
    <file>VectorSpace.h</file>
    <file>VectorSubset.h</file>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/include</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/include/</path>
    <filename>dir_69584c032fd7897b7f9bf7ceda8e18f3.html</filename>
    <dir>src/contrib/ANN/include/ANN</dir>
  </compound>
  <compound kind="dir">
    <name>src/misc</name>
    <path>/scratch/damon/git/queso/src/misc/</path>
    <filename>dir_fd073eb1633a0d190d175355df604331.html</filename>
    <dir>src/misc/inc</dir>
    <dir>src/misc/src</dir>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/sample</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/sample/</path>
    <filename>dir_1bbe07b054dd4fa9fd17e51131b69a76.html</filename>
    <file>ann_sample.cpp</file>
  </compound>
  <compound kind="dir">
    <name>src/surrogates/src</name>
    <path>/scratch/damon/git/queso/src/surrogates/src/</path>
    <filename>dir_1c4a1bbec8b9e9436b29a73278884a09.html</filename>
    <file>InterpolationSurrogateBase.C</file>
    <file>InterpolationSurrogateBuilder.C</file>
    <file>InterpolationSurrogateData.C</file>
    <file>InterpolationSurrogateDataSet.C</file>
    <file>InterpolationSurrogateHelper.C</file>
    <file>InterpolationSurrogateIOASCII.C</file>
    <file>InterpolationSurrogateIOBase.C</file>
    <file>LinearLagrangeInterpolationSurrogate.C</file>
  </compound>
  <compound kind="dir">
    <name>src/stats/src</name>
    <path>/scratch/damon/git/queso/src/stats/src/</path>
    <filename>dir_12ad124ea09f49810819695bb6998b06.html</filename>
    <file>BayesianJointPdf.C</file>
    <file>BetaJointPdf.C</file>
    <file>BetaVectorRealizer.C</file>
    <file>BetaVectorRV.C</file>
    <file>ConcatenatedJointPdf.C</file>
    <file>ConcatenatedVectorRealizer.C</file>
    <file>ConcatenatedVectorRV.C</file>
    <file>ExponentialMatrixCovarianceFunction.C</file>
    <file>ExponentialScalarCovarianceFunction.C</file>
    <file>FiniteDistribution.C</file>
    <file>GammaJointPdf.C</file>
    <file>GammaVectorRealizer.C</file>
    <file>GammaVectorRV.C</file>
    <file>GaussianJointPdf.C</file>
    <file>GaussianLikelihood.C</file>
    <file>GaussianLikelihoodBlockDiagonalCovariance.C</file>
    <file>GaussianLikelihoodBlockDiagonalCovarianceRandomCoefficients.C</file>
    <file>GaussianLikelihoodDiagonalCovariance.C</file>
    <file>GaussianLikelihoodFullCovariance.C</file>
    <file>GaussianLikelihoodFullCovarianceRandomCoefficient.C</file>
    <file>GaussianLikelihoodScalarCovariance.C</file>
    <file>GaussianVectorCdf.C</file>
    <file>GaussianVectorMdf.C</file>
    <file>GaussianVectorRealizer.C</file>
    <file>GaussianVectorRV.C</file>
    <file>GenericJointPdf.C</file>
    <file>GenericMatrixCovarianceFunction.C</file>
    <file>GenericScalarCovarianceFunction.C</file>
    <file>GenericVectorCdf.C</file>
    <file>GenericVectorMdf.C</file>
    <file>GenericVectorRealizer.C</file>
    <file>GenericVectorRV.C</file>
    <file>HessianCovMatricesTKGroup.C</file>
    <file>InfoTheory.C</file>
    <file>InverseGammaJointPdf.C</file>
    <file>InverseGammaVectorRealizer.C</file>
    <file>InverseGammaVectorRV.C</file>
    <file>InvLogitGaussianJointPdf.C</file>
    <file>InvLogitGaussianVectorRealizer.C</file>
    <file>InvLogitGaussianVectorRV.C</file>
    <file>JeffreysJointPdf.C</file>
    <file>JeffreysVectorRealizer.C</file>
    <file>JeffreysVectorRV.C</file>
    <file>JointPdf.C</file>
    <file>LogNormalJointPdf.C</file>
    <file>LogNormalVectorRealizer.C</file>
    <file>LogNormalVectorRV.C</file>
    <file>MarkovChainPositionData.C</file>
    <file>MatrixCovarianceFunction.C</file>
    <file>MetropolisHastingsSG.C</file>
    <file>MetropolisHastingsSGOptions.C</file>
    <file>MLSampling.C</file>
    <file>MLSamplingLevelOptions.C</file>
    <file>MLSamplingOptions.C</file>
    <file>ModelValidation.C</file>
    <file>MonteCarloSG.C</file>
    <file>MonteCarloSGOptions.C</file>
    <file>PoweredJointPdf.C</file>
    <file>SampledScalarCdf.C</file>
    <file>SampledVectorCdf.C</file>
    <file>SampledVectorMdf.C</file>
    <file>ScalarCdf.C</file>
    <file>ScalarCovarianceFunction.C</file>
    <file>ScalarGaussianRandomField.C</file>
    <file>ScaledCovMatrixTKGroup.C</file>
    <file>SequentialVectorRealizer.C</file>
    <file>StatisticalForwardProblem.C</file>
    <file>StatisticalForwardProblemOptions.C</file>
    <file>StatisticalInverseProblem.C</file>
    <file>StatisticalInverseProblemOptions.C</file>
    <file>StdScalarCdf.C</file>
    <file>TKGroup.C</file>
    <file>TransformedScaledCovMatrixTKGroup.C</file>
    <file>UniformJointPdf.C</file>
    <file>UniformVectorRealizer.C</file>
    <file>UniformVectorRV.C</file>
    <file>ValidationCycle.C</file>
    <file>VectorCdf.C</file>
    <file>VectorGaussianRandomField.C</file>
    <file>VectorMdf.C</file>
    <file>VectorRealizer.C</file>
    <file>VectorRV.C</file>
    <file>WignerJointPdf.C</file>
    <file>WignerVectorRealizer.C</file>
    <file>WignerVectorRV.C</file>
  </compound>
  <compound kind="dir">
    <name>src/misc/src</name>
    <path>/scratch/damon/git/queso/src/misc/src/</path>
    <filename>dir_4a3d6721aef5231a3f41ae337e19a0ed.html</filename>
    <file>1D1DFunction.C</file>
    <file>1DQuadrature.C</file>
    <file>2dArrayOfStuff.C</file>
    <file>ArrayOfOneDGrids.C</file>
    <file>ArrayOfOneDTables.C</file>
    <file>AsciiTable.C</file>
    <file>ComplexFft.C</file>
    <file>CovCond.C</file>
    <file>Fft.C</file>
    <file>GslAsciiTable.C</file>
    <file>Miscellaneous.C</file>
    <file>OneDGrid.C</file>
    <file>RealFft.C</file>
    <file>StdOneDGrid.C</file>
    <file>StreamUtilities.C</file>
    <file>UniformOneDGrid.C</file>
  </compound>
  <compound kind="dir">
    <name>src/gp/src</name>
    <path>/scratch/damon/git/queso/src/gp/src/</path>
    <filename>dir_e7877959a931b5afcc5b6fe77bf66ee1.html</filename>
    <file>ExperimentModel.C</file>
    <file>ExperimentModelOptions.C</file>
    <file>ExperimentStorage.C</file>
    <file>GcmExperimentInfo.C</file>
    <file>GcmJointInfo.C</file>
    <file>GcmJointTildeInfo.C</file>
    <file>GcmSimulationInfo.C</file>
    <file>GcmSimulationTildeInfo.C</file>
    <file>GcmTotalInfo.C</file>
    <file>GcmZInfo.C</file>
    <file>GcmZTildeInfo.C</file>
    <file>GPMSA.C</file>
    <file>GpmsaComputerModel.C</file>
    <file>GpmsaComputerModelOptions.C</file>
    <file>GPMSAOptions.C</file>
    <file>SimulationModel.C</file>
    <file>SimulationModelOptions.C</file>
    <file>SimulationStorage.C</file>
  </compound>
  <compound kind="dir">
    <name>src/core/src</name>
    <path>/scratch/damon/git/queso/src/core/src/</path>
    <filename>dir_637b9fe55c797d9c55ffa9eb30124a86.html</filename>
    <file>BaseInputOptionsParser.C</file>
    <file>BasicPdfsBase.C</file>
    <file>BasicPdfsBoost.C</file>
    <file>BasicPdfsGsl.C</file>
    <file>BoostInputOptionsParser.C</file>
    <file>Defines.C</file>
    <file>DistArray.C</file>
    <file>Environment.C</file>
    <file>EnvironmentOptions.C</file>
    <file>FunctionBase.C</file>
    <file>FunctionOperatorBuilder.C</file>
    <file>GslBlockMatrix.C</file>
    <file>GslMatrix.C</file>
    <file>GslOptimizer.C</file>
    <file>GslVector.C</file>
    <file>InfiniteDimensionalGaussian.C</file>
    <file>InfiniteDimensionalLikelihoodBase.C</file>
    <file>InfiniteDimensionalMCMCSampler.C</file>
    <file>InfiniteDimensionalMCMCSamplerOptions.C</file>
    <file>InfiniteDimensionalMeasureBase.C</file>
    <file>LibMeshFunction.C</file>
    <file>LibMeshNegativeLaplacianOperator.C</file>
    <file>LibMeshOperatorBase.C</file>
    <file>Map.C</file>
    <file>Matrix.C</file>
    <file>MpiComm.C</file>
    <file>OperatorBase.C</file>
    <file>Optimizer.C</file>
    <file>OptimizerMonitor.C</file>
    <file>RngBase.C</file>
    <file>RngBoost.C</file>
    <file>RngGsl.C</file>
    <file>TeuchosMatrix.C</file>
    <file>TeuchosVector.C</file>
    <file>Vector.C</file>
    <file>version.C</file>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/src</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/src/</path>
    <filename>dir_fa82fbc2dbc4619088671a6166e0274d.html</filename>
    <file>ANN.cpp</file>
    <file>bd_fix_rad_search.cpp</file>
    <file>bd_pr_search.cpp</file>
    <file>bd_search.cpp</file>
    <file>bd_tree.cpp</file>
    <file>bd_tree.h</file>
    <file>brute.cpp</file>
    <file>kd_dump.cpp</file>
    <file>kd_fix_rad_search.cpp</file>
    <file>kd_fix_rad_search.h</file>
    <file>kd_pr_search.cpp</file>
    <file>kd_pr_search.h</file>
    <file>kd_search.cpp</file>
    <file>kd_search.h</file>
    <file>kd_split.cpp</file>
    <file>kd_split.h</file>
    <file>kd_tree.cpp</file>
    <file>kd_tree.h</file>
    <file>kd_util.cpp</file>
    <file>kd_util.h</file>
    <file>perf.cpp</file>
    <file>pr_queue.h</file>
    <file>pr_queue_k.h</file>
  </compound>
  <compound kind="dir">
    <name>src/basic/src</name>
    <path>/scratch/damon/git/queso/src/basic/src/</path>
    <filename>dir_c4b94a79b868fc61b095b04771f4d44b.html</filename>
    <file>ArrayOfSequences.C</file>
    <file>BoxSubset.C</file>
    <file>ConcatenationSubset.C</file>
    <file>ConstantScalarFunction.C</file>
    <file>ConstantVectorFunction.C</file>
    <file>DiscreteSubset.C</file>
    <file>GenericScalarFunction.C</file>
    <file>GenericVectorFunction.C</file>
    <file>GslVectorSpace.C</file>
    <file>InstantiateIntersection.C</file>
    <file>IntersectionSubset.C</file>
    <file>ScalarFunction.C</file>
    <file>ScalarFunctionSynchronizer.C</file>
    <file>ScalarSequence.C</file>
    <file>SequenceOfVectors.C</file>
    <file>SequenceStatisticalOptions.C</file>
    <file>TeuchosVectorSpace.C</file>
    <file>VectorFunction.C</file>
    <file>VectorFunctionSynchronizer.C</file>
    <file>VectorSequence.C</file>
    <file>VectorSet.C</file>
    <file>VectorSpace.C</file>
    <file>VectorSubset.C</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/scratch/damon/git/queso/src/</path>
    <filename>dir_974a4f9b5986246761932d409834af31.html</filename>
    <dir>src/basic</dir>
    <dir>src/contrib</dir>
    <dir>src/core</dir>
    <dir>src/gp</dir>
    <dir>src/misc</dir>
    <dir>src/stats</dir>
    <dir>src/surrogates</dir>
  </compound>
  <compound kind="dir">
    <name>src/stats</name>
    <path>/scratch/damon/git/queso/src/stats/</path>
    <filename>dir_46dc4440eb70d1f1c8f4a63e21a98f76.html</filename>
    <dir>src/stats/inc</dir>
    <dir>src/stats/src</dir>
  </compound>
  <compound kind="dir">
    <name>src/surrogates</name>
    <path>/scratch/damon/git/queso/src/surrogates/</path>
    <filename>dir_b54671388bab177c11af29f6dd893ba2.html</filename>
    <dir>src/surrogates/inc</dir>
    <dir>src/surrogates/src</dir>
  </compound>
  <compound kind="dir">
    <name>src/contrib/ANN/test</name>
    <path>/scratch/damon/git/queso/src/contrib/ANN/test/</path>
    <filename>dir_6af914bded9bee188a168b4fe4a4d194.html</filename>
    <file>ann_test.cpp</file>
    <file>rand.cpp</file>
    <file>rand.h</file>
  </compound>
  <compound kind="dir">
    <name>doxygen/txt_common</name>
    <path>/scratch/damon/git/queso/doxygen/txt_common/</path>
    <filename>dir_558c80d44874499f36d169d1fcc2f074.html</filename>
    <file>acknowledgment.page</file>
    <file>lgpl.page</file>
    <file>noop.page</file>
  </compound>
  <compound kind="dir">
    <name>build_v0.55.0/doxygen/txt_common</name>
    <path>/scratch/damon/git/queso/build_v0.55.0/doxygen/txt_common/</path>
    <filename>dir_71defee5799fbe7f23b63c3ce1c83be5.html</filename>
    <file>about_vpath.page</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>The QUESO Library</title>
    <filename>a00009</filename>
    <docanchor file="a00009" title="Regression Testing">bugs</docanchor>
    <docanchor file="a00009" title="License">licence</docanchor>
    <docanchor file="a00009" title="Acknowledgments">acknowledgements</docanchor>
    <docanchor file="a00009" title="More Information About PECOS">pecos-center</docanchor>
  </compound>
</tagfile>
